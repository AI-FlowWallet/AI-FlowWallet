{"id":"17903cf32b9f45d108288a3e55e8acc5","_format":"hh-sol-build-info-1","solcVersion":"0.8.19","solcLongVersion":"0.8.19+commit.7dd6d404","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/interfaces/draft-IERC1822.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts/interfaces/IERC1967.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"},"@openzeppelin/contracts/proxy/beacon/IBeacon.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"},"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"},"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/IERC1967.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"},"@openzeppelin/contracts/proxy/Proxy.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"},"@openzeppelin/contracts/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/Create2.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40) // Get free memory pointer\n\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\n            // | 0xFF              |            FF                                                             |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\n\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\n            mstore8(start, 0xff)\n            addr := keccak256(start, 85)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"contracts/aa/Account.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.19;\n\nimport \"./utils/UserOp.sol\";\nimport \"./utils/Secp256r1.sol\";\nimport \"./utils/Base64.sol\";\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\ncontract Account is Initializable {\n    using UserOpLib for UserOp;\n    using ECDSA for bytes32;\n\n    address addressOwner;\n    PassKeyId passKeyOwner;\n\n    bool isPassKeyOwnerEnabled;\n\n    uint256 nonce;\n\n    constructor() {\n        _disableInitializers();\n    }\n\n    // getter functions\n    function getAddressOwner() public view returns (address) {\n        return addressOwner;\n    }\n\n    function getPassKeyOwner() public view returns (PassKeyId memory) {\n        return passKeyOwner;\n    }\n\n    function passKeyOwnerEnabled() public view returns (bool) {\n        return isPassKeyOwnerEnabled;\n    }\n\n    function getNonce() public view returns (uint256) {\n        return nonce;\n    }\n\n    function changeOwnershipToAddress(bytes memory argument) private {\n        require(\n            isPassKeyOwnerEnabled == true,\n            \"Account: Already address owner enabled\"\n        );\n        // address newOwner = abi.decode(argument, (address));\n        address newOwner;\n        assembly {\n            newOwner := mload(add(argument, 20))\n        }\n        _changePassKeyOwner(PassKeyId(0, 0, \"\"));\n        _changeAddressOwner(newOwner);\n        isPassKeyOwnerEnabled = false;\n    }\n\n    function changeOwnershipToPassKeyAddress(bytes memory argument) private {\n        require(\n            isPassKeyOwnerEnabled == false,\n            \"Account: Already passkey owner enabled\"\n        );\n        (uint256 pubKeyX, uint256 pubKeyY, string memory keyId) = abi.decode(\n            argument,\n            (uint256, uint256, string)\n        );\n        PassKeyId memory newOwner = PassKeyId(pubKeyX, pubKeyY, keyId);\n        _changeAddressOwner(address(0));\n        _changePassKeyOwner(newOwner);\n        isPassKeyOwnerEnabled = true;\n    }\n\n    // internal functions to change owners\n    function _changePassKeyOwner(PassKeyId memory newOwner) private {\n        passKeyOwner = newOwner;\n    }\n\n    function _changeAddressOwner(address newOwner) private {\n        addressOwner = newOwner;\n    }\n\n    function initialize(PassKeyId memory anOwner) public virtual initializer {\n        isPassKeyOwnerEnabled = true;\n        _initialize(anOwner);\n    }\n\n    function _initialize(PassKeyId memory anOwner) internal virtual {\n        passKeyOwner = anOwner;\n    }\n\n    // Main entry point for external callers\n\n    function entrypoint(UserOp calldata userop) public {\n        // validate userop signature\n        uint256 sigVerification = _validateUserOp(userop);\n        require(sigVerification == 0, \"Account: Signature verification failed\");\n        // validate nonce\n        uint256 nonceVerification = _validateNonce(userop);\n        require(nonceVerification == 0, \"Account: Nonce verification failed\");\n        // execute\n        if (userop.functionType == 0) {\n            execute(userop.argument);\n        }\n        if (userop.functionType == 1) {\n            executeBatch(userop.argument);\n        }\n        if (userop.functionType == 2) {\n            changeOwnershipToAddress(userop.argument);\n        }\n        if (userop.functionType == 3) {\n            changeOwnershipToPassKeyAddress(userop.argument);\n        }\n        nonce = nonce + 1;\n        return;\n    }\n\n    /**\n     * execute a transaction (called directly from owner, or by entryPoint)\n     */\n    function execute(bytes memory argument) private {\n        (address dest, uint256 value, bytes memory func) = abi.decode(\n            argument,\n            (address, uint256, bytes)\n        );\n        _call(dest, value, func);\n    }\n\n    /**\n     * execute a sequence of transactions\n     * @dev to reduce gas consumption for trivial case (no value), use a zero-length array to mean zero value\n     */\n    function executeBatch(bytes memory argument) private {\n        (\n            address[] memory dest,\n            uint256[] memory value,\n            bytes[] memory func\n        ) = abi.decode(argument, (address[], uint256[], bytes[]));\n        require(\n            dest.length == func.length &&\n                (value.length == 0 || value.length == func.length),\n            \"wrong array lengths\"\n        );\n        if (value.length == 0) {\n            for (uint256 i = 0; i < dest.length; i++) {\n                _call(dest[i], 0, func[i]);\n            }\n        } else {\n            for (uint256 i = 0; i < dest.length; i++) {\n                _call(dest[i], value[i], func[i]);\n            }\n        }\n    }\n\n    function _call(address target, uint256 value, bytes memory data) internal {\n        (bool success, bytes memory result) = target.call{value: value}(data);\n        if (!success) {\n            assembly {\n                revert(add(result, 32), mload(result))\n            }\n        }\n    }\n\n    // internal function to validate userop signature\n    function _validateUserOp(\n        UserOp calldata userop\n    ) internal view returns (uint256) {\n        bytes32 userOpHash = getUserOpHash(userop);\n        if (isPassKeyOwnerEnabled) {\n            bool isSigValid = validatePassKeySig(\n                userop.signature,\n                userOpHash,\n                passKeyOwner\n            );\n            if (!isSigValid) return 1;\n            return 0;\n        } else {\n            bytes32 hash = userOpHash.toEthSignedMessageHash();\n            if (addressOwner != hash.recover(userop.signature)) return 1;\n            return 0;\n        }\n    }\n\n    // internal function to validate nonce\n    function _validateNonce(\n        UserOp calldata userop\n    ) internal view returns (uint256) {\n        if (userop.nonce == nonce) return 0;\n        return 1;\n    }\n\n    function validatePassKeySig(\n        bytes memory signature,\n        bytes32 execHash,\n        PassKeyId memory passkey\n    ) internal view returns (bool) {\n        (\n            bytes32 keyHash,\n            uint256 sigx,\n            uint256 sigy,\n            bytes memory authenticatorData,\n            string memory clientDataJSONPre,\n            string memory clientDataJSONPost\n        ) = abi.decode(\n                signature,\n                (bytes32, uint256, uint256, bytes, string, string)\n            );\n\n        string memory execHashBase64 = Base64.encode(bytes.concat(execHash));\n        string memory clientDataJSON = string.concat(\n            clientDataJSONPre,\n            execHashBase64,\n            clientDataJSONPost\n        );\n        bytes32 clientHash = sha256(bytes(clientDataJSON));\n        bytes32 sigHash = sha256(bytes.concat(authenticatorData, clientHash));\n\n        require(passkey.pubKeyY != 0 && passkey.pubKeyY != 0, \"Key not found\");\n        bool isSigValid = Secp256r1.Verify(\n            passkey,\n            sigx,\n            sigy,\n            uint256(sigHash)\n        );\n        return isSigValid;\n    }\n\n    // gets the userOp hash\n    function getUserOpHash(\n        UserOp calldata userop\n    ) public view returns (bytes32) {\n        return\n            keccak256(abi.encode(userop.hash(), address(this), block.chainid));\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n}\n"},"contracts/aa/AccountFactory.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\nimport \"@openzeppelin/contracts/utils/Create2.sol\";\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\n\nimport \"./Account.sol\";\nimport \"./utils/Secp256r1.sol\";\n\ncontract AccountFactory {\n    Account public immutable accountImplementation;\n\n    constructor() {\n        accountImplementation = new Account();\n    }\n\n    /**\n     * create an account, and return its address.\n     * returns the address even if the account is already deployed.\n     * Note that during UserOperation execution, this method is called only if the account is not deployed.\n     * This method returns an existing account address so that entryPoint.getSenderAddress() would work even after account creation\n     */\n    function createAccount(\n        uint256 pubKeyX,\n        uint256 pubKeyY,\n        string memory keyId,\n        uint256 salt\n    ) public returns (Account ret) {\n        PassKeyId memory owner = PassKeyId(pubKeyX, pubKeyY, keyId);\n        address addr = getAddress(pubKeyX, pubKeyY, keyId, salt);\n        uint codeSize = addr.code.length;\n        if (codeSize > 0) {\n            return Account(payable(addr));\n        }\n        ret = Account(\n            payable(\n                new ERC1967Proxy{salt: bytes32(salt)}(\n                    address(accountImplementation),\n                    abi.encodeCall(Account.initialize, (owner))\n                )\n            )\n        );\n    }\n\n    /**\n     * calculate the counterfactual address of this account as it would be returned by createAccount()\n     */\n    function getAddress(\n        uint256 pubKeyX,\n        uint256 pubKeyY,\n        string memory keyId,\n        uint256 salt\n    ) public view returns (address) {\n        PassKeyId memory owner = PassKeyId(pubKeyX, pubKeyY, keyId);\n\n        return\n            Create2.computeAddress(\n                bytes32(salt),\n                keccak256(\n                    abi.encodePacked(\n                        type(ERC1967Proxy).creationCode,\n                        abi.encode(\n                            address(accountImplementation),\n                            abi.encodeCall(Account.initialize, (owner))\n                        )\n                    )\n                )\n            );\n    }\n}\n"},"contracts/aa/BUSD.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract BUSD is ERC20 {\n    constructor() ERC20(\"BUSD\", \"BUSD\") {\n        _mint(msg.sender, 10 ** 26);\n    }\n}\n"},"contracts/aa/Swapper.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./BUSD.sol\";\n\ncontract Swapper {\n    address owner;\n    BUSD busdToken;\n\n    constructor(address busd) {\n        owner = msg.sender;\n        busdToken = BUSD(busd);\n    }\n\n    // both inputs with 18\n    function swapBNBToBUSD(\n        uint256 amountBNB,\n        uint256 amountBUSD\n    ) public payable {\n        require(tx.origin == owner, \"Swapper: Tx not initiated by owner\");\n        require(msg.value == amountBNB, \"Invalid Transfer amount\");\n        busdToken.transferFrom(owner, msg.sender, amountBUSD);\n    }\n\n    function swapBUSDToBNB(\n        uint256 amountBUSD,\n        uint256 amountBNB\n    ) public payable {\n        require(tx.origin == owner, \"Swapper: Tx not initiated by owner\");\n        busdToken.transferFrom(msg.sender, owner, amountBUSD);\n        payable(msg.sender).transfer(amountBNB);\n    }\n\n    function transferBNB() public {\n        require(msg.sender == owner, \"Swapper: Sender not owner\");\n        payable(owner).transfer(address(this).balance);\n    }\n\n    function transferBUSD() public {\n        require(msg.sender == owner, \"Swapper: Sender not owner\");\n        uint256 bal = busdToken.balanceOf(address(this));\n        busdToken.transfer(owner, bal);\n    }\n\n    receive() external payable {}\n}\n"},"contracts/aa/utils/Base64.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\n// modified for base64url encoding, does not pad with '='\n\npragma solidity 0.8.19;\n\n/**\n * @dev Provides a set of functions to operate with Base64 strings.\n *  modified for base64url https://datatracker.ietf.org/doc/html/rfc4648#section-5\n * _Available since v4.5._\n */\nlibrary Base64 {\n    /**\n     * @dev Base64 Encoding/Decoding Table\n     */\n    string internal constant _TABLE =\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\";\n\n    /**\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\n     */\n    function encode(bytes memory data) internal pure returns (string memory) {\n        /**\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\n         */\n        if (data.length == 0) return \"\";\n\n        // Loads the table into memory\n        string memory table = _TABLE;\n\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\n        // and split into 4 numbers of 6 bits.\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\n        // - `data.length + 2`  -> Round up\n        // - `/ 3`              -> Number of 3-bytes chunks\n        // - `4 *`              -> 4 characters for each chunk\n        uint256 newlength = (data.length * 8) / 6;\n        if (data.length % 6 > 0) {\n            newlength++;\n        }\n        string memory result = new string(newlength);\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Prepare the lookup table (skip the first \"length\" byte)\n            let tablePtr := add(table, 1)\n\n            // Prepare result pointer, jump over length\n            let resultPtr := add(result, 32)\n            // let targetLength := add(resultPtr, newlength)\n\n            // Run over the input, 3 bytes at a time\n            for {\n                let dataPtr := data\n                let endPtr := add(data, mload(data))\n            } lt(dataPtr, endPtr) {\n\n            } {\n                // Advance 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // To write each character, shift the 3 bytes (18 bits) chunk\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\n                // and apply logical AND with 0x3F which is the number of\n                // the previous character in the ASCII table prior to the Base64 Table\n                // The result is then added to the table to get the character to write,\n                // and finally write it in the result pointer but with a left shift\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\n\n                mstore8(\n                    resultPtr,\n                    mload(add(tablePtr, and(shr(18, input), 0x3F)))\n                )\n                resultPtr := add(resultPtr, 1) // Advance\n\n                // if lt(resultPtr, targetLength) {\n                mstore8(\n                    resultPtr,\n                    mload(add(tablePtr, and(shr(12, input), 0x3F)))\n                )\n                resultPtr := add(resultPtr, 1) // Advance\n\n                // if lt(resultPtr, targetLength) {\n                mstore8(\n                    resultPtr,\n                    mload(add(tablePtr, and(shr(6, input), 0x3F)))\n                )\n                resultPtr := add(resultPtr, 1) // Advance\n\n                // if lt(resultPtr, targetLength) {\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n                // }\n                // }\n                // }\n            }\n        }\n\n        return result;\n    }\n}\n"},"contracts/aa/utils/Secp256r1.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.19;\n//\n// Heavily inspired from\n// https://github.com/maxrobot/elliptic-solidity/blob/master/contracts/Secp256r1.sol\n// https://github.com/tdrerup/elliptic-curve-solidity/blob/master/contracts/curves/EllipticCurve.sol\n// modified to use precompile 0x05 modexp\n// and modified jacobian double\n// optimisations to avoid to an from from affine and jacobian coordinates\n//\nstruct PassKeyId {\n    uint256 pubKeyX;\n    uint256 pubKeyY;\n    string keyId;\n}\n\nstruct JPoint {\n    uint256 x;\n    uint256 y;\n    uint256 z;\n}\n\nlibrary Secp256r1 {\n    uint256 constant gx =\n        0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296;\n    uint256 constant gy =\n        0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5;\n    uint256 public constant pp =\n        0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF;\n\n    uint256 public constant nn =\n        0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551;\n    uint256 constant a =\n        0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC;\n    uint256 constant b =\n        0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B;\n    uint256 constant MOST_SIGNIFICANT =\n        0xc000000000000000000000000000000000000000000000000000000000000000;\n\n    /*\n     * Verify\n     * @description - verifies that a public key has signed a given message\n     * @param X - public key coordinate X\n     * @param Y - public key coordinate Y\n     * @param R - signature half R\n     * @param S - signature half S\n     * @param input - hashed message\n     */\n    function Verify(\n        PassKeyId memory passKey,\n        uint r,\n        uint s,\n        uint e\n    ) internal view returns (bool) {\n        if (r == 0 || s == 0 || r >= nn || s >= nn) {\n            /* testing null signature, otherwise (0,0) is valid for any message*/\n            return false;\n        }\n\n        JPoint[16] memory points = _preComputeJacobianPoints(passKey);\n        return VerifyWithPrecompute(points, r, s, e);\n    }\n\n    function VerifyWithPrecompute(\n        JPoint[16] memory points,\n        uint r,\n        uint s,\n        uint e\n    ) internal view returns (bool) {\n        if (r >= nn || s >= nn) {\n            return false;\n        }\n\n        uint w = _primemod(s, nn);\n\n        uint u1 = mulmod(e, w, nn);\n        uint u2 = mulmod(r, w, nn);\n\n        uint x;\n        uint y;\n\n        (x, y) = ShamirMultJacobian(points, u1, u2);\n        return (x == r);\n    }\n\n    /*\n     * Strauss Shamir trick for EC multiplication\n     * https://stackoverflow.com/questions/50993471/ec-scalar-multiplication-with-strauss-shamir-method\n     * we optimise on this a bit to do with 2 bits at a time rather than a single bit\n     * the individual points for a single pass are precomputed\n     * overall this reduces the number of additions while keeping the same number of doublings\n     */\n    function ShamirMultJacobian(\n        JPoint[16] memory points,\n        uint u1,\n        uint u2\n    ) internal view returns (uint, uint) {\n        uint x = 0;\n        uint y = 0;\n        uint z = 0;\n        uint bits = 128;\n        uint index = 0;\n\n        while (bits > 0) {\n            if (z > 0) {\n                (x, y, z) = _modifiedJacobianDouble(x, y, z);\n                (x, y, z) = _modifiedJacobianDouble(x, y, z);\n            }\n            index =\n                ((u1 & MOST_SIGNIFICANT) >> 252) |\n                ((u2 & MOST_SIGNIFICANT) >> 254);\n            if (index > 0) {\n                (x, y, z) = _jAdd(\n                    x,\n                    y,\n                    z,\n                    points[index].x,\n                    points[index].y,\n                    points[index].z\n                );\n            }\n            u1 <<= 2;\n            u2 <<= 2;\n            bits--;\n        }\n        (x, y) = _affineFromJacobian(x, y, z);\n        return (x, y);\n    }\n\n    function _preComputeJacobianPoints(\n        PassKeyId memory passKey\n    ) internal pure returns (JPoint[16] memory points) {\n        // JPoint[] memory u1Points = new JPoint[](4);\n        // u1Points[0] = JPoint(0, 0, 0);\n        // u1Points[1] = JPoint(gx, gy, 1); // u1\n        // u1Points[2] = _jPointDouble(u1Points[1]);\n        // u1Points[3] = _jPointAdd(u1Points[1], u1Points[2]);\n        // avoiding this intermediate step by using it in a single array below\n        // these are pre computed points for u1\n\n        // JPoint[16] memory points;\n        points[0] = JPoint(0, 0, 0);\n        points[1] = JPoint(passKey.pubKeyX, passKey.pubKeyY, 1); // u2\n        points[2] = _jPointDouble(points[1]);\n        points[3] = _jPointAdd(points[1], points[2]);\n\n        points[4] = JPoint(gx, gy, 1); // u1Points[1]\n        points[5] = _jPointAdd(points[4], points[1]);\n        points[6] = _jPointAdd(points[4], points[2]);\n        points[7] = _jPointAdd(points[4], points[3]);\n\n        points[8] = _jPointDouble(points[4]); // u1Points[2]\n        points[9] = _jPointAdd(points[8], points[1]);\n        points[10] = _jPointAdd(points[8], points[2]);\n        points[11] = _jPointAdd(points[8], points[3]);\n\n        points[12] = _jPointAdd(points[4], points[8]); // u1Points[3]\n        points[13] = _jPointAdd(points[12], points[1]);\n        points[14] = _jPointAdd(points[12], points[2]);\n        points[15] = _jPointAdd(points[12], points[3]);\n    }\n\n    function _jPointAdd(\n        JPoint memory p1,\n        JPoint memory p2\n    ) internal pure returns (JPoint memory) {\n        uint x;\n        uint y;\n        uint z;\n        (x, y, z) = _jAdd(p1.x, p1.y, p1.z, p2.x, p2.y, p2.z);\n        return JPoint(x, y, z);\n    }\n\n    function _jPointDouble(\n        JPoint memory p\n    ) internal pure returns (JPoint memory) {\n        uint x;\n        uint y;\n        uint z;\n        (x, y, z) = _modifiedJacobianDouble(p.x, p.y, p.z);\n        return JPoint(x, y, z);\n    }\n\n    /* _affineFromJacobian\n     * @desription returns affine coordinates from a jacobian input follows\n     * golang elliptic/crypto library\n     */\n    function _affineFromJacobian(\n        uint x,\n        uint y,\n        uint z\n    ) internal view returns (uint ax, uint ay) {\n        if (z == 0) {\n            return (0, 0);\n        }\n\n        uint zinv = _primemod(z, pp);\n        uint zinvsq = mulmod(zinv, zinv, pp);\n\n        ax = mulmod(x, zinvsq, pp);\n        ay = mulmod(y, mulmod(zinvsq, zinv, pp), pp);\n    }\n\n    /*\n     * _jAdd\n     * @description performs double Jacobian as defined below:\n     * https://hyperelliptic.org/EFD/g1p/auto-code/shortw/jacobian-3/doubling/mdbl-2007-bl.op3\n     */\n    function _jAdd(\n        uint p1,\n        uint p2,\n        uint p3,\n        uint q1,\n        uint q2,\n        uint q3\n    ) internal pure returns (uint r1, uint r2, uint r3) {\n        if (p3 == 0) {\n            r1 = q1;\n            r2 = q2;\n            r3 = q3;\n\n            return (r1, r2, r3);\n        } else if (q3 == 0) {\n            r1 = p1;\n            r2 = p2;\n            r3 = p3;\n\n            return (r1, r2, r3);\n        }\n\n        assembly {\n            let\n                pd\n            := 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF\n            let z1z1 := mulmod(p3, p3, pd) // Z1Z1 = Z1^2\n            let z2z2 := mulmod(q3, q3, pd) // Z2Z2 = Z2^2\n\n            let u1 := mulmod(p1, z2z2, pd) // U1 = X1*Z2Z2\n            let u2 := mulmod(q1, z1z1, pd) // U2 = X2*Z1Z1\n\n            let s1 := mulmod(p2, mulmod(z2z2, q3, pd), pd) // S1 = Y1*Z2*Z2Z2\n            let s2 := mulmod(q2, mulmod(z1z1, p3, pd), pd) // S2 = Y2*Z1*Z1Z1\n\n            let p3q3 := addmod(p3, q3, pd)\n\n            if lt(u2, u1) {\n                u2 := add(pd, u2) // u2 = u2+pd\n            }\n            let h := sub(u2, u1) // H = U2-U1\n\n            let i := mulmod(0x02, h, pd)\n            i := mulmod(i, i, pd) // I = (2*H)^2\n\n            let j := mulmod(h, i, pd) // J = H*I\n            if lt(s2, s1) {\n                s2 := add(pd, s2) // u2 = u2+pd\n            }\n            let rr := mulmod(0x02, sub(s2, s1), pd) // r = 2*(S2-S1)\n            r1 := mulmod(rr, rr, pd) // X3 = R^2\n\n            let v := mulmod(u1, i, pd) // V = U1*I\n            let j2v := addmod(j, mulmod(0x02, v, pd), pd)\n            if lt(r1, j2v) {\n                r1 := add(pd, r1) // X3 = X3+pd\n            }\n            r1 := sub(r1, j2v)\n\n            // Y3 = r*(V-X3)-2*S1*J\n            let s12j := mulmod(mulmod(0x02, s1, pd), j, pd)\n\n            if lt(v, r1) {\n                v := add(pd, v)\n            }\n            r2 := mulmod(rr, sub(v, r1), pd)\n\n            if lt(r2, s12j) {\n                r2 := add(pd, r2)\n            }\n            r2 := sub(r2, s12j)\n\n            // Z3 = ((Z1+Z2)^2-Z1Z1-Z2Z2)*H\n            z1z1 := addmod(z1z1, z2z2, pd)\n            j2v := mulmod(p3q3, p3q3, pd)\n            if lt(j2v, z1z1) {\n                j2v := add(pd, j2v)\n            }\n            r3 := mulmod(sub(j2v, z1z1), h, pd)\n        }\n        return (r1, r2, r3);\n    }\n\n    // Point doubling on the modified jacobian coordinates\n    // http://point-at-infinity.org/ecc/Prime_Curve_Modified_Jacobian_Coordinates.html\n    function _modifiedJacobianDouble(\n        uint x,\n        uint y,\n        uint z\n    ) internal pure returns (uint x3, uint y3, uint z3) {\n        assembly {\n            let\n                pd\n            := 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF\n            let z2 := mulmod(z, z, pd)\n            let az4 := mulmod(\n                0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC,\n                mulmod(z2, z2, pd),\n                pd\n            )\n            let y2 := mulmod(y, y, pd)\n            let s := mulmod(0x04, mulmod(x, y2, pd), pd)\n            let u := mulmod(0x08, mulmod(y2, y2, pd), pd)\n            let m := addmod(mulmod(0x03, mulmod(x, x, pd), pd), az4, pd)\n            let twos := mulmod(0x02, s, pd)\n            let m2 := mulmod(m, m, pd)\n            if lt(m2, twos) {\n                m2 := add(pd, m2)\n            }\n            x3 := sub(m2, twos)\n            if lt(s, x3) {\n                s := add(pd, s)\n            }\n            y3 := mulmod(m, sub(s, x3), pd)\n            if lt(y3, u) {\n                y3 := add(pd, y3)\n            }\n            y3 := sub(y3, u)\n            z3 := mulmod(0x02, mulmod(y, z, pd), pd)\n        }\n    }\n\n    // Fermats little theorem https://en.wikipedia.org/wiki/Fermat%27s_little_theorem\n    // a^(p-1) = 1 mod p\n    // a^(-1) ≅ a^(p-2) (mod p)\n    // we then use the precompile bigModExp to compute a^(-1)\n    function _primemod(uint value, uint p) internal view returns (uint ret) {\n        ret = modexp(value, p - 2, p);\n        return ret;\n    }\n\n    // Wrapper for built-in BigNumber_modexp (contract 0x5) as described here. https://github.com/ethereum/EIPs/pull/198\n    function modexp(\n        uint _base,\n        uint _exp,\n        uint _mod\n    ) internal view returns (uint ret) {\n        // bigModExp(_base, _exp, _mod);\n        assembly {\n            if gt(_base, _mod) {\n                _base := mod(_base, _mod)\n            }\n            // Free memory pointer is always stored at 0x40\n            let freemem := mload(0x40)\n\n            mstore(freemem, 0x20)\n            mstore(add(freemem, 0x20), 0x20)\n            mstore(add(freemem, 0x40), 0x20)\n\n            mstore(add(freemem, 0x60), _base)\n            mstore(add(freemem, 0x80), _exp)\n            mstore(add(freemem, 0xa0), _mod)\n\n            let success := staticcall(not(0), 0x5, freemem, 0xc0, freemem, 0x20)\n            switch success\n            case 0 {\n                revert(0x0, 0x0)\n            }\n            default {\n                ret := mload(freemem)\n            }\n        }\n    }\n}\n"},"contracts/aa/utils/UserOp.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.19;\n// call type\n// 00 -> single\n// 01 -> batch\n\nstruct UserOp {\n    uint256 functionType;\n    bytes argument;\n    uint256 nonce;\n    bytes signature;\n}\n\nlibrary UserOpLib {\n    /**\n     * Pack the user operation data into bytes for hashing.\n     * @param userop - The user operation data.\n     */\n    function pack(\n        UserOp calldata userop\n    ) internal pure returns (bytes memory ret) {\n        uint256 functionType = userop.functionType;\n        bytes32 hashArguments = calldataKeccak(userop.argument);\n        uint256 nonce = userop.nonce;\n\n        return abi.encode(functionType, hashArguments, nonce);\n    }\n\n    /**\n     * Hash the user operation data.\n     * @param userop - The user operation data.\n     */\n    function hash(UserOp calldata userop) internal pure returns (bytes32) {\n        return keccak256(pack(userop));\n    }\n\n    /**\n     * keccak function over calldata.\n     * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\n     */\n    function calldataKeccak(\n        bytes calldata data\n    ) public pure returns (bytes32 ret) {\n        assembly {\n            let mem := mload(0x40)\n            let len := data.length\n            calldatacopy(mem, data.offset, len)\n            ret := keccak256(mem, len)\n        }\n    }\n}\n"},"contracts/Lock.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\ncontract Lock {\n    address payable public owner;\n\n    constructor() {\n        owner = payable(msg.sender);\n    }\n\n    function withdraw() public {\n        // Uncomment this line, and the import of \"hardhat/console.sol\", to print a log in your terminal\n        // console.log(\"Unlock time is %o and block timestamp is %o\", unlockTime, block.timestamp);\n\n        owner.transfer(address(this).balance);\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":1000000},"metadata":{"bytecodeHash":"none","useLiteralContent":true},"viaIR":true,"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}}}},"output":{"errors":[{"component":"general","errorCode":"2072","formattedMessage":"Warning: Unused local variable.\n   --> contracts/aa/Account.sol:197:13:\n    |\n197 |             bytes32 keyHash,\n    |             ^^^^^^^^^^^^^^^\n\n","message":"Unused local variable.","severity":"warning","sourceLocation":{"end":6015,"file":"contracts/aa/Account.sol","start":6000},"type":"Warning"}],"sources":{"@openzeppelin/contracts/interfaces/IERC1967.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC1967.sol","exportedSymbols":{"IERC1967":[20]},"id":21,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:0"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1967","contractDependencies":[],"contractKind":"interface","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"132:133:0","text":" @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n _Available since v4.8.3._"},"fullyImplemented":true,"id":20,"linearizedBaseContracts":[20],"name":"IERC1967","nameLocation":"276:8:0","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"291:68:0","text":" @dev Emitted when the implementation is upgraded."},"eventSelector":"bc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b","id":7,"name":"Upgraded","nameLocation":"370:8:0","nodeType":"EventDefinition","parameters":{"id":6,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5,"indexed":true,"mutability":"mutable","name":"implementation","nameLocation":"395:14:0","nodeType":"VariableDeclaration","scope":7,"src":"379:30:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4,"name":"address","nodeType":"ElementaryTypeName","src":"379:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"378:32:0"},"src":"364:47:0"},{"anonymous":false,"documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"417:67:0","text":" @dev Emitted when the admin account has changed."},"eventSelector":"7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f","id":14,"name":"AdminChanged","nameLocation":"495:12:0","nodeType":"EventDefinition","parameters":{"id":13,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10,"indexed":false,"mutability":"mutable","name":"previousAdmin","nameLocation":"516:13:0","nodeType":"VariableDeclaration","scope":14,"src":"508:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9,"name":"address","nodeType":"ElementaryTypeName","src":"508:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12,"indexed":false,"mutability":"mutable","name":"newAdmin","nameLocation":"539:8:0","nodeType":"VariableDeclaration","scope":14,"src":"531:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":11,"name":"address","nodeType":"ElementaryTypeName","src":"531:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"507:41:0"},"src":"489:60:0"},{"anonymous":false,"documentation":{"id":15,"nodeType":"StructuredDocumentation","src":"555:59:0","text":" @dev Emitted when the beacon is changed."},"eventSelector":"1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e","id":19,"name":"BeaconUpgraded","nameLocation":"625:14:0","nodeType":"EventDefinition","parameters":{"id":18,"nodeType":"ParameterList","parameters":[{"constant":false,"id":17,"indexed":true,"mutability":"mutable","name":"beacon","nameLocation":"656:6:0","nodeType":"VariableDeclaration","scope":19,"src":"640:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":16,"name":"address","nodeType":"ElementaryTypeName","src":"640:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"639:24:0"},"src":"619:45:0"}],"scope":21,"src":"266:400:0","usedErrors":[]}],"src":"107:560:0"},"id":0},"@openzeppelin/contracts/interfaces/draft-IERC1822.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC1822.sol","exportedSymbols":{"IERC1822Proxiable":[30]},"id":31,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":22,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"113:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1822Proxiable","contractDependencies":[],"contractKind":"interface","documentation":{"id":23,"nodeType":"StructuredDocumentation","src":"138:203:1","text":" @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n proxy whose upgrades are fully controlled by the current implementation."},"fullyImplemented":false,"id":30,"linearizedBaseContracts":[30],"name":"IERC1822Proxiable","nameLocation":"352:17:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":24,"nodeType":"StructuredDocumentation","src":"376:438:1","text":" @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n address.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy."},"functionSelector":"52d1902d","id":29,"implemented":false,"kind":"function","modifiers":[],"name":"proxiableUUID","nameLocation":"828:13:1","nodeType":"FunctionDefinition","parameters":{"id":25,"nodeType":"ParameterList","parameters":[],"src":"841:2:1"},"returnParameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":27,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":29,"src":"867:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":26,"name":"bytes32","nodeType":"ElementaryTypeName","src":"867:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"866:9:1"},"scope":30,"src":"819:57:1","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":31,"src":"342:536:1","usedErrors":[]}],"src":"113:766:1"},"id":1},"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol","exportedSymbols":{"Address":[1622],"ERC1967Proxy":[67],"ERC1967Upgrade":[371],"IBeacon":[433],"IERC1822Proxiable":[30],"IERC1967":[20],"Proxy":[423],"StorageSlot":[1835]},"id":68,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":32,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"114:23:2"},{"absolutePath":"@openzeppelin/contracts/proxy/Proxy.sol","file":"../Proxy.sol","id":33,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":68,"sourceUnit":424,"src":"139:22:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol","file":"./ERC1967Upgrade.sol","id":34,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":68,"sourceUnit":372,"src":"162:30:2","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":36,"name":"Proxy","nameLocations":["592:5:2"],"nodeType":"IdentifierPath","referencedDeclaration":423,"src":"592:5:2"},"id":37,"nodeType":"InheritanceSpecifier","src":"592:5:2"},{"baseName":{"id":38,"name":"ERC1967Upgrade","nameLocations":["599:14:2"],"nodeType":"IdentifierPath","referencedDeclaration":371,"src":"599:14:2"},"id":39,"nodeType":"InheritanceSpecifier","src":"599:14:2"}],"canonicalName":"ERC1967Proxy","contractDependencies":[],"contractKind":"contract","documentation":{"id":35,"nodeType":"StructuredDocumentation","src":"194:372:2","text":" @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n implementation address that can be changed. This address is stored in storage in the location specified by\n https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n implementation behind the proxy."},"fullyImplemented":true,"id":67,"linearizedBaseContracts":[67,371,20,423],"name":"ERC1967Proxy","nameLocation":"576:12:2","nodeType":"ContractDefinition","nodes":[{"body":{"id":53,"nodeType":"Block","src":"1014:56:2","statements":[{"expression":{"arguments":[{"id":48,"name":"_logic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42,"src":"1042:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":49,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44,"src":"1050:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"66616c7365","id":50,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1057:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":47,"name":"_upgradeToAndCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"1024:17:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":51,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1024:39:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52,"nodeType":"ExpressionStatement","src":"1024:39:2"}]},"documentation":{"id":40,"nodeType":"StructuredDocumentation","src":"620:333:2","text":" @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n function call, and allows initializing the storage of the proxy like a Solidity constructor."},"id":54,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":45,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42,"mutability":"mutable","name":"_logic","nameLocation":"978:6:2","nodeType":"VariableDeclaration","scope":54,"src":"970:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":41,"name":"address","nodeType":"ElementaryTypeName","src":"970:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":44,"mutability":"mutable","name":"_data","nameLocation":"999:5:2","nodeType":"VariableDeclaration","scope":54,"src":"986:18:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":43,"name":"bytes","nodeType":"ElementaryTypeName","src":"986:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"969:36:2"},"returnParameters":{"id":46,"nodeType":"ParameterList","parameters":[],"src":"1014:0:2"},"scope":67,"src":"958:112:2","stateMutability":"payable","virtual":false,"visibility":"public"},{"baseFunctions":[388],"body":{"id":65,"nodeType":"Block","src":"1229:59:2","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":61,"name":"ERC1967Upgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"1246:14:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1967Upgrade_$371_$","typeString":"type(contract ERC1967Upgrade)"}},"id":62,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1261:18:2","memberName":"_getImplementation","nodeType":"MemberAccess","referencedDeclaration":97,"src":"1246:33:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":63,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1246:35:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":60,"id":64,"nodeType":"Return","src":"1239:42:2"}]},"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1076:67:2","text":" @dev Returns the current implementation address."},"id":66,"implemented":true,"kind":"function","modifiers":[],"name":"_implementation","nameLocation":"1157:15:2","nodeType":"FunctionDefinition","overrides":{"id":57,"nodeType":"OverrideSpecifier","overrides":[],"src":"1197:8:2"},"parameters":{"id":56,"nodeType":"ParameterList","parameters":[],"src":"1172:2:2"},"returnParameters":{"id":60,"nodeType":"ParameterList","parameters":[{"constant":false,"id":59,"mutability":"mutable","name":"impl","nameLocation":"1223:4:2","nodeType":"VariableDeclaration","scope":66,"src":"1215:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":58,"name":"address","nodeType":"ElementaryTypeName","src":"1215:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1214:14:2"},"scope":67,"src":"1148:140:2","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":68,"src":"567:723:2","usedErrors":[]}],"src":"114:1177:2"},"id":2},"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol","exportedSymbols":{"Address":[1622],"ERC1967Upgrade":[371],"IBeacon":[433],"IERC1822Proxiable":[30],"IERC1967":[20],"StorageSlot":[1835]},"id":372,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":69,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"116:23:3"},{"absolutePath":"@openzeppelin/contracts/proxy/beacon/IBeacon.sol","file":"../beacon/IBeacon.sol","id":70,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":372,"sourceUnit":434,"src":"141:31:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC1967.sol","file":"../../interfaces/IERC1967.sol","id":71,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":372,"sourceUnit":21,"src":"173:39:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC1822.sol","file":"../../interfaces/draft-IERC1822.sol","id":72,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":372,"sourceUnit":31,"src":"213:45:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../utils/Address.sol","id":73,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":372,"sourceUnit":1623,"src":"259:33:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"../../utils/StorageSlot.sol","id":74,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":372,"sourceUnit":1836,"src":"293:37:3","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":76,"name":"IERC1967","nameLocations":["553:8:3"],"nodeType":"IdentifierPath","referencedDeclaration":20,"src":"553:8:3"},"id":77,"nodeType":"InheritanceSpecifier","src":"553:8:3"}],"canonicalName":"ERC1967Upgrade","contractDependencies":[],"contractKind":"contract","documentation":{"id":75,"nodeType":"StructuredDocumentation","src":"332:184:3","text":" @dev This abstract contract provides getters and event emitting update functions for\n https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n _Available since v4.1._"},"fullyImplemented":true,"id":371,"linearizedBaseContracts":[371,20],"name":"ERC1967Upgrade","nameLocation":"535:14:3","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":80,"mutability":"constant","name":"_ROLLBACK_SLOT","nameLocation":"672:14:3","nodeType":"VariableDeclaration","scope":371,"src":"647:108:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":78,"name":"bytes32","nodeType":"ElementaryTypeName","src":"647:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307834393130666466613136666564333236306564306537313437663763633664613131613630323038623562393430366431326136333536313466666439313433","id":79,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"689:66:3","typeDescriptions":{"typeIdentifier":"t_rational_33048860383849004559742813297059419343339852917517107368639918720169455489347_by_1","typeString":"int_const 3304...(69 digits omitted)...9347"},"value":"0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143"},"visibility":"private"},{"constant":true,"documentation":{"id":81,"nodeType":"StructuredDocumentation","src":"762:214:3","text":" @dev Storage slot with the address of the current implementation.\n This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n validated in the constructor."},"id":84,"mutability":"constant","name":"_IMPLEMENTATION_SLOT","nameLocation":"1007:20:3","nodeType":"VariableDeclaration","scope":371,"src":"981:115:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":82,"name":"bytes32","nodeType":"ElementaryTypeName","src":"981:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307833363038393461313362613161333231303636376338323834393264623938646361336532303736636333373335613932306133636135303564333832626263","id":83,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1030:66:3","typeDescriptions":{"typeIdentifier":"t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1","typeString":"int_const 2444...(69 digits omitted)...5612"},"value":"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc"},"visibility":"internal"},{"body":{"id":96,"nodeType":"Block","src":"1237:78:3","statements":[{"expression":{"expression":{"arguments":[{"id":92,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"1281:20:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":90,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1835,"src":"1254:11:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$1835_$","typeString":"type(library StorageSlot)"}},"id":91,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1266:14:3","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1757,"src":"1254:26:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1731_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":93,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1254:48:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1731_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":94,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1303:5:3","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1730,"src":"1254:54:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":89,"id":95,"nodeType":"Return","src":"1247:61:3"}]},"documentation":{"id":85,"nodeType":"StructuredDocumentation","src":"1103:67:3","text":" @dev Returns the current implementation address."},"id":97,"implemented":true,"kind":"function","modifiers":[],"name":"_getImplementation","nameLocation":"1184:18:3","nodeType":"FunctionDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[],"src":"1202:2:3"},"returnParameters":{"id":89,"nodeType":"ParameterList","parameters":[{"constant":false,"id":88,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":97,"src":"1228:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":87,"name":"address","nodeType":"ElementaryTypeName","src":"1228:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1227:9:3"},"scope":371,"src":"1175:140:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":120,"nodeType":"Block","src":"1469:196:3","statements":[{"expression":{"arguments":[{"arguments":[{"id":106,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":100,"src":"1506:17:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":104,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1622,"src":"1487:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$1622_$","typeString":"type(library Address)"}},"id":105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1495:10:3","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1310,"src":"1487:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":107,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1487:37:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1526:47:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""},"value":"ERC1967: new implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""}],"id":103,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1479:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1479:95:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":110,"nodeType":"ExpressionStatement","src":"1479:95:3"},{"expression":{"id":118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":114,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"1611:20:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":111,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1835,"src":"1584:11:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$1835_$","typeString":"type(library StorageSlot)"}},"id":113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1596:14:3","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1757,"src":"1584:26:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1731_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1584:48:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1731_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":116,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1633:5:3","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1730,"src":"1584:54:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":117,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":100,"src":"1641:17:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1584:74:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":119,"nodeType":"ExpressionStatement","src":"1584:74:3"}]},"documentation":{"id":98,"nodeType":"StructuredDocumentation","src":"1321:80:3","text":" @dev Stores a new address in the EIP1967 implementation slot."},"id":121,"implemented":true,"kind":"function","modifiers":[],"name":"_setImplementation","nameLocation":"1415:18:3","nodeType":"FunctionDefinition","parameters":{"id":101,"nodeType":"ParameterList","parameters":[{"constant":false,"id":100,"mutability":"mutable","name":"newImplementation","nameLocation":"1442:17:3","nodeType":"VariableDeclaration","scope":121,"src":"1434:25:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":99,"name":"address","nodeType":"ElementaryTypeName","src":"1434:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1433:27:3"},"returnParameters":{"id":102,"nodeType":"ParameterList","parameters":[],"src":"1469:0:3"},"scope":371,"src":"1406:259:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":135,"nodeType":"Block","src":"1827:96:3","statements":[{"expression":{"arguments":[{"id":128,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":124,"src":"1856:17:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":127,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":121,"src":"1837:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1837:37:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":130,"nodeType":"ExpressionStatement","src":"1837:37:3"},{"eventCall":{"arguments":[{"id":132,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":124,"src":"1898:17:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":131,"name":"Upgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"1889:8:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":133,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1889:27:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":134,"nodeType":"EmitStatement","src":"1884:32:3"}]},"documentation":{"id":122,"nodeType":"StructuredDocumentation","src":"1671:95:3","text":" @dev Perform implementation upgrade\n Emits an {Upgraded} event."},"id":136,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeTo","nameLocation":"1780:10:3","nodeType":"FunctionDefinition","parameters":{"id":125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":124,"mutability":"mutable","name":"newImplementation","nameLocation":"1799:17:3","nodeType":"VariableDeclaration","scope":136,"src":"1791:25:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":123,"name":"address","nodeType":"ElementaryTypeName","src":"1791:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1790:27:3"},"returnParameters":{"id":126,"nodeType":"ParameterList","parameters":[],"src":"1827:0:3"},"scope":371,"src":"1771:152:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":165,"nodeType":"Block","src":"2155:167:3","statements":[{"expression":{"arguments":[{"id":147,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":139,"src":"2176:17:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":146,"name":"_upgradeTo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":136,"src":"2165:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2165:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":149,"nodeType":"ExpressionStatement","src":"2165:29:3"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":150,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"2208:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2213:6:3","memberName":"length","nodeType":"MemberAccess","src":"2208:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2222:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2208:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":154,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":143,"src":"2227:9:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2208:28:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":164,"nodeType":"IfStatement","src":"2204:112:3","trueBody":{"id":163,"nodeType":"Block","src":"2238:78:3","statements":[{"expression":{"arguments":[{"id":159,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":139,"src":"2281:17:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":160,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"2300:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":156,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1622,"src":"2252:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$1622_$","typeString":"type(library Address)"}},"id":158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2260:20:3","memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":1509,"src":"2252:28:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":161,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2252:53:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":162,"nodeType":"ExpressionStatement","src":"2252:53:3"}]}}]},"documentation":{"id":137,"nodeType":"StructuredDocumentation","src":"1929:123:3","text":" @dev Perform implementation upgrade with additional setup call.\n Emits an {Upgraded} event."},"id":166,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCall","nameLocation":"2066:17:3","nodeType":"FunctionDefinition","parameters":{"id":144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":139,"mutability":"mutable","name":"newImplementation","nameLocation":"2092:17:3","nodeType":"VariableDeclaration","scope":166,"src":"2084:25:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":138,"name":"address","nodeType":"ElementaryTypeName","src":"2084:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":141,"mutability":"mutable","name":"data","nameLocation":"2124:4:3","nodeType":"VariableDeclaration","scope":166,"src":"2111:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":140,"name":"bytes","nodeType":"ElementaryTypeName","src":"2111:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":143,"mutability":"mutable","name":"forceCall","nameLocation":"2135:9:3","nodeType":"VariableDeclaration","scope":166,"src":"2130:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":142,"name":"bool","nodeType":"ElementaryTypeName","src":"2130:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2083:62:3"},"returnParameters":{"id":145,"nodeType":"ParameterList","parameters":[],"src":"2155:0:3"},"scope":371,"src":"2057:265:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":218,"nodeType":"Block","src":"2596:820:3","statements":[{"condition":{"expression":{"arguments":[{"id":178,"name":"_ROLLBACK_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"2937:14:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":176,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1835,"src":"2910:11:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$1835_$","typeString":"type(library StorageSlot)"}},"id":177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2922:14:3","memberName":"getBooleanSlot","nodeType":"MemberAccess","referencedDeclaration":1768,"src":"2910:26:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_BooleanSlot_$1734_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.BooleanSlot storage pointer)"}},"id":179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2910:42:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1734_storage_ptr","typeString":"struct StorageSlot.BooleanSlot storage pointer"}},"id":180,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2953:5:3","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1733,"src":"2910:48:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":216,"nodeType":"Block","src":"3028:382:3","statements":[{"clauses":[{"block":{"id":201,"nodeType":"Block","src":"3122:115:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":195,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"3148:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":196,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"3156:20:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3148:28:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524331393637557067726164653a20756e737570706f727465642070726f786961626c6555554944","id":198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3178:43:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""},"value":"ERC1967Upgrade: unsupported proxiableUUID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""}],"id":194,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3140:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3140:82:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":200,"nodeType":"ExpressionStatement","src":"3140:82:3"}]},"errorName":"","id":202,"nodeType":"TryCatchClause","parameters":{"id":193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":192,"mutability":"mutable","name":"slot","nameLocation":"3116:4:3","nodeType":"VariableDeclaration","scope":202,"src":"3108:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":191,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3108:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3107:14:3"},"src":"3099:138:3"},{"block":{"id":207,"nodeType":"Block","src":"3244:89:3","statements":[{"expression":{"arguments":[{"hexValue":"45524331393637557067726164653a206e657720696d706c656d656e746174696f6e206973206e6f742055555053","id":204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3269:48:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""},"value":"ERC1967Upgrade: new implementation is not UUPS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""}],"id":203,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3262:6:3","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3262:56:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":206,"nodeType":"ExpressionStatement","src":"3262:56:3"}]},"errorName":"","id":208,"nodeType":"TryCatchClause","src":"3238:95:3"}],"externalCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":187,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":169,"src":"3064:17:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":186,"name":"IERC1822Proxiable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"3046:17:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1822Proxiable_$30_$","typeString":"type(contract IERC1822Proxiable)"}},"id":188,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3046:36:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1822Proxiable_$30","typeString":"contract IERC1822Proxiable"}},"id":189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3083:13:3","memberName":"proxiableUUID","nodeType":"MemberAccess","referencedDeclaration":29,"src":"3046:50:3","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bytes32_$","typeString":"function () view external returns (bytes32)"}},"id":190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3046:52:3","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":209,"nodeType":"TryStatement","src":"3042:291:3"},{"expression":{"arguments":[{"id":211,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":169,"src":"3364:17:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":212,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"3383:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":213,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173,"src":"3389:9:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":210,"name":"_upgradeToAndCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"3346:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3346:53:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":215,"nodeType":"ExpressionStatement","src":"3346:53:3"}]},"id":217,"nodeType":"IfStatement","src":"2906:504:3","trueBody":{"id":185,"nodeType":"Block","src":"2960:62:3","statements":[{"expression":{"arguments":[{"id":182,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":169,"src":"2993:17:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":181,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":121,"src":"2974:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2974:37:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":184,"nodeType":"ExpressionStatement","src":"2974:37:3"}]}}]},"documentation":{"id":167,"nodeType":"StructuredDocumentation","src":"2328:161:3","text":" @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n Emits an {Upgraded} event."},"id":219,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCallUUPS","nameLocation":"2503:21:3","nodeType":"FunctionDefinition","parameters":{"id":174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":169,"mutability":"mutable","name":"newImplementation","nameLocation":"2533:17:3","nodeType":"VariableDeclaration","scope":219,"src":"2525:25:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":168,"name":"address","nodeType":"ElementaryTypeName","src":"2525:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":171,"mutability":"mutable","name":"data","nameLocation":"2565:4:3","nodeType":"VariableDeclaration","scope":219,"src":"2552:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":170,"name":"bytes","nodeType":"ElementaryTypeName","src":"2552:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":173,"mutability":"mutable","name":"forceCall","nameLocation":"2576:9:3","nodeType":"VariableDeclaration","scope":219,"src":"2571:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":172,"name":"bool","nodeType":"ElementaryTypeName","src":"2571:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2524:62:3"},"returnParameters":{"id":175,"nodeType":"ParameterList","parameters":[],"src":"2596:0:3"},"scope":371,"src":"2494:922:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":220,"nodeType":"StructuredDocumentation","src":"3422:189:3","text":" @dev Storage slot with the admin of the contract.\n This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n validated in the constructor."},"id":223,"mutability":"constant","name":"_ADMIN_SLOT","nameLocation":"3642:11:3","nodeType":"VariableDeclaration","scope":371,"src":"3616:106:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":221,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3616:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307862353331323736383461353638623331373361653133623966386136303136653234336536336236653865653131373864366137313738353062356436313033","id":222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3656:66:3","typeDescriptions":{"typeIdentifier":"t_rational_81955473079516046949633743016697847541294818689821282749996681496272635257091_by_1","typeString":"int_const 8195...(69 digits omitted)...7091"},"value":"0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103"},"visibility":"internal"},{"body":{"id":235,"nodeType":"Block","src":"3837:69:3","statements":[{"expression":{"expression":{"arguments":[{"id":231,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":223,"src":"3881:11:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":229,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1835,"src":"3854:11:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$1835_$","typeString":"type(library StorageSlot)"}},"id":230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3866:14:3","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1757,"src":"3854:26:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1731_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3854:39:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1731_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":233,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3894:5:3","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1730,"src":"3854:45:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":228,"id":234,"nodeType":"Return","src":"3847:52:3"}]},"documentation":{"id":224,"nodeType":"StructuredDocumentation","src":"3729:50:3","text":" @dev Returns the current admin."},"id":236,"implemented":true,"kind":"function","modifiers":[],"name":"_getAdmin","nameLocation":"3793:9:3","nodeType":"FunctionDefinition","parameters":{"id":225,"nodeType":"ParameterList","parameters":[],"src":"3802:2:3"},"returnParameters":{"id":228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":227,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":236,"src":"3828:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":226,"name":"address","nodeType":"ElementaryTypeName","src":"3828:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3827:9:3"},"scope":371,"src":"3784:122:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":261,"nodeType":"Block","src":"4033:156:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":243,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"4051:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4071:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":245,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4063:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":244,"name":"address","nodeType":"ElementaryTypeName","src":"4063:7:3","typeDescriptions":{}}},"id":247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4063:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4051:22:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e65772061646d696e20697320746865207a65726f2061646472657373","id":249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4075:40:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""},"value":"ERC1967: new admin is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""}],"id":242,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4043:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4043:73:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":251,"nodeType":"ExpressionStatement","src":"4043:73:3"},{"expression":{"id":259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":255,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":223,"src":"4153:11:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":252,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1835,"src":"4126:11:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$1835_$","typeString":"type(library StorageSlot)"}},"id":254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4138:14:3","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1757,"src":"4126:26:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1731_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4126:39:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1731_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":257,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4166:5:3","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1730,"src":"4126:45:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":258,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"4174:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4126:56:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":260,"nodeType":"ExpressionStatement","src":"4126:56:3"}]},"documentation":{"id":237,"nodeType":"StructuredDocumentation","src":"3912:71:3","text":" @dev Stores a new address in the EIP1967 admin slot."},"id":262,"implemented":true,"kind":"function","modifiers":[],"name":"_setAdmin","nameLocation":"3997:9:3","nodeType":"FunctionDefinition","parameters":{"id":240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":239,"mutability":"mutable","name":"newAdmin","nameLocation":"4015:8:3","nodeType":"VariableDeclaration","scope":262,"src":"4007:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":238,"name":"address","nodeType":"ElementaryTypeName","src":"4007:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4006:18:3"},"returnParameters":{"id":241,"nodeType":"ParameterList","parameters":[],"src":"4033:0:3"},"scope":371,"src":"3988:201:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":278,"nodeType":"Block","src":"4349:86:3","statements":[{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":269,"name":"_getAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":236,"src":"4377:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4377:11:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":271,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":265,"src":"4390:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":268,"name":"AdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"4364:12:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4364:35:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":273,"nodeType":"EmitStatement","src":"4359:40:3"},{"expression":{"arguments":[{"id":275,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":265,"src":"4419:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":274,"name":"_setAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"4409:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4409:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":277,"nodeType":"ExpressionStatement","src":"4409:19:3"}]},"documentation":{"id":263,"nodeType":"StructuredDocumentation","src":"4195:100:3","text":" @dev Changes the admin of the proxy.\n Emits an {AdminChanged} event."},"id":279,"implemented":true,"kind":"function","modifiers":[],"name":"_changeAdmin","nameLocation":"4309:12:3","nodeType":"FunctionDefinition","parameters":{"id":266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":265,"mutability":"mutable","name":"newAdmin","nameLocation":"4330:8:3","nodeType":"VariableDeclaration","scope":279,"src":"4322:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":264,"name":"address","nodeType":"ElementaryTypeName","src":"4322:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4321:18:3"},"returnParameters":{"id":267,"nodeType":"ParameterList","parameters":[],"src":"4349:0:3"},"scope":371,"src":"4300:135:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":280,"nodeType":"StructuredDocumentation","src":"4441:232:3","text":" @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"id":283,"mutability":"constant","name":"_BEACON_SLOT","nameLocation":"4704:12:3","nodeType":"VariableDeclaration","scope":371,"src":"4678:107:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":281,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4678:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307861336630616437346535343233616562666438306433656634333436353738333335613961373261656165653539666636636233353832623335313333643530","id":282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4719:66:3","typeDescriptions":{"typeIdentifier":"t_rational_74152234768234802001998023604048924213078445070507226371336425913862612794704_by_1","typeString":"int_const 7415...(69 digits omitted)...4704"},"value":"0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50"},"visibility":"internal"},{"body":{"id":295,"nodeType":"Block","src":"4902:70:3","statements":[{"expression":{"expression":{"arguments":[{"id":291,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"4946:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":289,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1835,"src":"4919:11:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$1835_$","typeString":"type(library StorageSlot)"}},"id":290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4931:14:3","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1757,"src":"4919:26:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1731_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4919:40:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1731_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":293,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4960:5:3","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1730,"src":"4919:46:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":288,"id":294,"nodeType":"Return","src":"4912:53:3"}]},"documentation":{"id":284,"nodeType":"StructuredDocumentation","src":"4792:51:3","text":" @dev Returns the current beacon."},"id":296,"implemented":true,"kind":"function","modifiers":[],"name":"_getBeacon","nameLocation":"4857:10:3","nodeType":"FunctionDefinition","parameters":{"id":285,"nodeType":"ParameterList","parameters":[],"src":"4867:2:3"},"returnParameters":{"id":288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":287,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":296,"src":"4893:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":286,"name":"address","nodeType":"ElementaryTypeName","src":"4893:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4892:9:3"},"scope":371,"src":"4848:124:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":331,"nodeType":"Block","src":"5101:324:3","statements":[{"expression":{"arguments":[{"arguments":[{"id":305,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":299,"src":"5138:9:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":303,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1622,"src":"5119:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$1622_$","typeString":"type(library Address)"}},"id":304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5127:10:3","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1310,"src":"5119:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5119:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720626561636f6e206973206e6f74206120636f6e7472616374","id":307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5150:39:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""},"value":"ERC1967: new beacon is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""}],"id":302,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5111:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5111:79:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":309,"nodeType":"ExpressionStatement","src":"5111:79:3"},{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":314,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":299,"src":"5248:9:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":313,"name":"IBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":433,"src":"5240:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeacon_$433_$","typeString":"type(contract IBeacon)"}},"id":315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5240:18:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeacon_$433","typeString":"contract IBeacon"}},"id":316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5259:14:3","memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":432,"src":"5240:33:3","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5240:35:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":311,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1622,"src":"5221:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$1622_$","typeString":"type(library Address)"}},"id":312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5229:10:3","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1310,"src":"5221:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":318,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5221:55:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a20626561636f6e20696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5290:50:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""},"value":"ERC1967: beacon implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""}],"id":310,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5200:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5200:150:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":321,"nodeType":"ExpressionStatement","src":"5200:150:3"},{"expression":{"id":329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":325,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"5387:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":322,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1835,"src":"5360:11:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$1835_$","typeString":"type(library StorageSlot)"}},"id":324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5372:14:3","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1757,"src":"5360:26:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1731_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5360:40:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1731_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":327,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5401:5:3","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1730,"src":"5360:46:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":328,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":299,"src":"5409:9:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5360:58:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":330,"nodeType":"ExpressionStatement","src":"5360:58:3"}]},"documentation":{"id":297,"nodeType":"StructuredDocumentation","src":"4978:71:3","text":" @dev Stores a new beacon in the EIP1967 beacon slot."},"id":332,"implemented":true,"kind":"function","modifiers":[],"name":"_setBeacon","nameLocation":"5063:10:3","nodeType":"FunctionDefinition","parameters":{"id":300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":299,"mutability":"mutable","name":"newBeacon","nameLocation":"5082:9:3","nodeType":"VariableDeclaration","scope":332,"src":"5074:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":298,"name":"address","nodeType":"ElementaryTypeName","src":"5074:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5073:19:3"},"returnParameters":{"id":301,"nodeType":"ParameterList","parameters":[],"src":"5101:0:3"},"scope":371,"src":"5054:371:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":369,"nodeType":"Block","src":"5824:217:3","statements":[{"expression":{"arguments":[{"id":343,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"5845:9:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":342,"name":"_setBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":332,"src":"5834:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":344,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5834:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":345,"nodeType":"ExpressionStatement","src":"5834:21:3"},{"eventCall":{"arguments":[{"id":347,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"5885:9:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":346,"name":"BeaconUpgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19,"src":"5870:14:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5870:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":349,"nodeType":"EmitStatement","src":"5865:30:3"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":350,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":337,"src":"5909:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5914:6:3","memberName":"length","nodeType":"MemberAccess","src":"5909:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5923:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5909:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":354,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":339,"src":"5928:9:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5909:28:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":368,"nodeType":"IfStatement","src":"5905:130:3","trueBody":{"id":367,"nodeType":"Block","src":"5939:96:3","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":360,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"5990:9:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":359,"name":"IBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":433,"src":"5982:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeacon_$433_$","typeString":"type(contract IBeacon)"}},"id":361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5982:18:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeacon_$433","typeString":"contract IBeacon"}},"id":362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6001:14:3","memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":432,"src":"5982:33:3","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":363,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5982:35:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":364,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":337,"src":"6019:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":356,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1622,"src":"5953:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$1622_$","typeString":"type(library Address)"}},"id":358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5961:20:3","memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":1509,"src":"5953:28:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5953:71:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":366,"nodeType":"ExpressionStatement","src":"5953:71:3"}]}}]},"documentation":{"id":333,"nodeType":"StructuredDocumentation","src":"5431:292:3","text":" @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n Emits a {BeaconUpgraded} event."},"id":370,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeBeaconToAndCall","nameLocation":"5737:23:3","nodeType":"FunctionDefinition","parameters":{"id":340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":335,"mutability":"mutable","name":"newBeacon","nameLocation":"5769:9:3","nodeType":"VariableDeclaration","scope":370,"src":"5761:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":334,"name":"address","nodeType":"ElementaryTypeName","src":"5761:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":337,"mutability":"mutable","name":"data","nameLocation":"5793:4:3","nodeType":"VariableDeclaration","scope":370,"src":"5780:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":336,"name":"bytes","nodeType":"ElementaryTypeName","src":"5780:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":339,"mutability":"mutable","name":"forceCall","nameLocation":"5804:9:3","nodeType":"VariableDeclaration","scope":370,"src":"5799:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":338,"name":"bool","nodeType":"ElementaryTypeName","src":"5799:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5760:54:3"},"returnParameters":{"id":341,"nodeType":"ParameterList","parameters":[],"src":"5824:0:3"},"scope":371,"src":"5728:313:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":372,"src":"517:5526:3","usedErrors":[]}],"src":"116:5928:3"},"id":3},"@openzeppelin/contracts/proxy/Proxy.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/proxy/Proxy.sol","exportedSymbols":{"Proxy":[423]},"id":424,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":373,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:4"},{"abstract":true,"baseContracts":[],"canonicalName":"Proxy","contractDependencies":[],"contractKind":"contract","documentation":{"id":374,"nodeType":"StructuredDocumentation","src":"124:598:4","text":" @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n be specified by overriding the virtual {_implementation} function.\n Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n different contract through the {_delegate} function.\n The success and return data of the delegated call will be returned back to the caller of the proxy."},"fullyImplemented":false,"id":423,"linearizedBaseContracts":[423],"name":"Proxy","nameLocation":"741:5:4","nodeType":"ContractDefinition","nodes":[{"body":{"id":381,"nodeType":"Block","src":"1008:835:4","statements":[{"AST":{"nodeType":"YulBlock","src":"1027:810:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1280:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1283:1:4","type":"","value":"0"},{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"1286:12:4"},"nodeType":"YulFunctionCall","src":"1286:14:4"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"1267:12:4"},"nodeType":"YulFunctionCall","src":"1267:34:4"},"nodeType":"YulExpressionStatement","src":"1267:34:4"},{"nodeType":"YulVariableDeclaration","src":"1428:74:4","value":{"arguments":[{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"1455:3:4"},"nodeType":"YulFunctionCall","src":"1455:5:4"},{"name":"implementation","nodeType":"YulIdentifier","src":"1462:14:4"},{"kind":"number","nodeType":"YulLiteral","src":"1478:1:4","type":"","value":"0"},{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"1481:12:4"},"nodeType":"YulFunctionCall","src":"1481:14:4"},{"kind":"number","nodeType":"YulLiteral","src":"1497:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1500:1:4","type":"","value":"0"}],"functionName":{"name":"delegatecall","nodeType":"YulIdentifier","src":"1442:12:4"},"nodeType":"YulFunctionCall","src":"1442:60:4"},"variables":[{"name":"result","nodeType":"YulTypedName","src":"1432:6:4","type":""}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1570:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1573:1:4","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"1576:14:4"},"nodeType":"YulFunctionCall","src":"1576:16:4"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"1555:14:4"},"nodeType":"YulFunctionCall","src":"1555:38:4"},"nodeType":"YulExpressionStatement","src":"1555:38:4"},{"cases":[{"body":{"nodeType":"YulBlock","src":"1688:59:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1713:1:4","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"1716:14:4"},"nodeType":"YulFunctionCall","src":"1716:16:4"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1706:6:4"},"nodeType":"YulFunctionCall","src":"1706:27:4"},"nodeType":"YulExpressionStatement","src":"1706:27:4"}]},"nodeType":"YulCase","src":"1681:66:4","value":{"kind":"number","nodeType":"YulLiteral","src":"1686:1:4","type":"","value":"0"}},{"body":{"nodeType":"YulBlock","src":"1768:59:4","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1793:1:4","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"1796:14:4"},"nodeType":"YulFunctionCall","src":"1796:16:4"}],"functionName":{"name":"return","nodeType":"YulIdentifier","src":"1786:6:4"},"nodeType":"YulFunctionCall","src":"1786:27:4"},"nodeType":"YulExpressionStatement","src":"1786:27:4"}]},"nodeType":"YulCase","src":"1760:67:4","value":"default"}],"expression":{"name":"result","nodeType":"YulIdentifier","src":"1614:6:4"},"nodeType":"YulSwitch","src":"1607:220:4"}]},"evmVersion":"paris","externalReferences":[{"declaration":377,"isOffset":false,"isSlot":false,"src":"1462:14:4","valueSize":1}],"id":380,"nodeType":"InlineAssembly","src":"1018:819:4"}]},"documentation":{"id":375,"nodeType":"StructuredDocumentation","src":"753:190:4","text":" @dev Delegates the current call to `implementation`.\n This function does not return to its internal call site, it will return directly to the external caller."},"id":382,"implemented":true,"kind":"function","modifiers":[],"name":"_delegate","nameLocation":"957:9:4","nodeType":"FunctionDefinition","parameters":{"id":378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":377,"mutability":"mutable","name":"implementation","nameLocation":"975:14:4","nodeType":"VariableDeclaration","scope":382,"src":"967:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":376,"name":"address","nodeType":"ElementaryTypeName","src":"967:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"966:24:4"},"returnParameters":{"id":379,"nodeType":"ParameterList","parameters":[],"src":"1008:0:4"},"scope":423,"src":"948:895:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"documentation":{"id":383,"nodeType":"StructuredDocumentation","src":"1849:173:4","text":" @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n and {_fallback} should delegate."},"id":388,"implemented":false,"kind":"function","modifiers":[],"name":"_implementation","nameLocation":"2036:15:4","nodeType":"FunctionDefinition","parameters":{"id":384,"nodeType":"ParameterList","parameters":[],"src":"2051:2:4"},"returnParameters":{"id":387,"nodeType":"ParameterList","parameters":[{"constant":false,"id":386,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":388,"src":"2085:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":385,"name":"address","nodeType":"ElementaryTypeName","src":"2085:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2084:9:4"},"scope":423,"src":"2027:67:4","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":400,"nodeType":"Block","src":"2360:72:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":392,"name":"_beforeFallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":422,"src":"2370:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2370:17:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":394,"nodeType":"ExpressionStatement","src":"2370:17:4"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":396,"name":"_implementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":388,"src":"2407:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2407:17:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":395,"name":"_delegate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":382,"src":"2397:9:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2397:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":399,"nodeType":"ExpressionStatement","src":"2397:28:4"}]},"documentation":{"id":389,"nodeType":"StructuredDocumentation","src":"2100:217:4","text":" @dev Delegates the current call to the address returned by `_implementation()`.\n This function does not return to its internal call site, it will return directly to the external caller."},"id":401,"implemented":true,"kind":"function","modifiers":[],"name":"_fallback","nameLocation":"2331:9:4","nodeType":"FunctionDefinition","parameters":{"id":390,"nodeType":"ParameterList","parameters":[],"src":"2340:2:4"},"returnParameters":{"id":391,"nodeType":"ParameterList","parameters":[],"src":"2360:0:4"},"scope":423,"src":"2322:110:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":408,"nodeType":"Block","src":"2665:28:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":405,"name":"_fallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":401,"src":"2675:9:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2675:11:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":407,"nodeType":"ExpressionStatement","src":"2675:11:4"}]},"documentation":{"id":402,"nodeType":"StructuredDocumentation","src":"2438:186:4","text":" @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n function in the contract matches the call data."},"id":409,"implemented":true,"kind":"fallback","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":403,"nodeType":"ParameterList","parameters":[],"src":"2637:2:4"},"returnParameters":{"id":404,"nodeType":"ParameterList","parameters":[],"src":"2665:0:4"},"scope":423,"src":"2629:64:4","stateMutability":"payable","virtual":true,"visibility":"external"},{"body":{"id":416,"nodeType":"Block","src":"2888:28:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":413,"name":"_fallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":401,"src":"2898:9:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2898:11:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":415,"nodeType":"ExpressionStatement","src":"2898:11:4"}]},"documentation":{"id":410,"nodeType":"StructuredDocumentation","src":"2699:149:4","text":" @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n is empty."},"id":417,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":411,"nodeType":"ParameterList","parameters":[],"src":"2860:2:4"},"returnParameters":{"id":412,"nodeType":"ParameterList","parameters":[],"src":"2888:0:4"},"scope":423,"src":"2853:63:4","stateMutability":"payable","virtual":true,"visibility":"external"},{"body":{"id":421,"nodeType":"Block","src":"3242:2:4","statements":[]},"documentation":{"id":418,"nodeType":"StructuredDocumentation","src":"2922:271:4","text":" @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n call, or as part of the Solidity `fallback` or `receive` functions.\n If overridden should call `super._beforeFallback()`."},"id":422,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeFallback","nameLocation":"3207:15:4","nodeType":"FunctionDefinition","parameters":{"id":419,"nodeType":"ParameterList","parameters":[],"src":"3222:2:4"},"returnParameters":{"id":420,"nodeType":"ParameterList","parameters":[],"src":"3242:0:4"},"scope":423,"src":"3198:46:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":424,"src":"723:2523:4","usedErrors":[]}],"src":"99:3148:4"},"id":4},"@openzeppelin/contracts/proxy/beacon/IBeacon.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/proxy/beacon/IBeacon.sol","exportedSymbols":{"IBeacon":[433]},"id":434,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":425,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"93:23:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IBeacon","contractDependencies":[],"contractKind":"interface","documentation":{"id":426,"nodeType":"StructuredDocumentation","src":"118:79:5","text":" @dev This is the interface that {BeaconProxy} expects of its beacon."},"fullyImplemented":false,"id":433,"linearizedBaseContracts":[433],"name":"IBeacon","nameLocation":"208:7:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":427,"nodeType":"StructuredDocumentation","src":"222:162:5","text":" @dev Must return an address that can be used as a delegate call target.\n {BeaconProxy} will check that this address is a contract."},"functionSelector":"5c60da1b","id":432,"implemented":false,"kind":"function","modifiers":[],"name":"implementation","nameLocation":"398:14:5","nodeType":"FunctionDefinition","parameters":{"id":428,"nodeType":"ParameterList","parameters":[],"src":"412:2:5"},"returnParameters":{"id":431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":430,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":432,"src":"438:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":429,"name":"address","nodeType":"ElementaryTypeName","src":"438:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"437:9:5"},"scope":433,"src":"389:58:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":434,"src":"198:251:5","usedErrors":[]}],"src":"93:357:5"},"id":5},"@openzeppelin/contracts/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/proxy/utils/Initializable.sol","exportedSymbols":{"Address":[1622],"Initializable":[602]},"id":603,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":435,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:6"},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../utils/Address.sol","id":436,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":603,"sourceUnit":1623,"src":"138:33:6","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":437,"nodeType":"StructuredDocumentation","src":"173:2209:6","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":602,"linearizedBaseContracts":[602],"name":"Initializable","nameLocation":"2401:13:6","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":438,"nodeType":"StructuredDocumentation","src":"2421:109:6","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":440,"mutability":"mutable","name":"_initialized","nameLocation":"2549:12:6","nodeType":"VariableDeclaration","scope":602,"src":"2535:26:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":439,"name":"uint8","nodeType":"ElementaryTypeName","src":"2535:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":441,"nodeType":"StructuredDocumentation","src":"2568:91:6","text":" @dev Indicates that the contract is in the process of being initialized."},"id":443,"mutability":"mutable","name":"_initializing","nameLocation":"2677:13:6","nodeType":"VariableDeclaration","scope":602,"src":"2664:26:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":442,"name":"bool","nodeType":"ElementaryTypeName","src":"2664:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":444,"nodeType":"StructuredDocumentation","src":"2697:90:6","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498","id":448,"name":"Initialized","nameLocation":"2798:11:6","nodeType":"EventDefinition","parameters":{"id":447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":446,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2816:7:6","nodeType":"VariableDeclaration","scope":448,"src":"2810:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":445,"name":"uint8","nodeType":"ElementaryTypeName","src":"2810:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2809:15:6"},"src":"2792:33:6"},{"body":{"id":503,"nodeType":"Block","src":"3258:472:6","statements":[{"assignments":[452],"declarations":[{"constant":false,"id":452,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3273:14:6","nodeType":"VariableDeclaration","scope":503,"src":"3268:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":451,"name":"bool","nodeType":"ElementaryTypeName","src":"3268:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":455,"initialValue":{"id":454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3290:14:6","subExpression":{"id":453,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":443,"src":"3291:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3268:36:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":457,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":452,"src":"3336:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":458,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":440,"src":"3354:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3369:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3354:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3336:34:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":462,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3335:36:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3376:34:6","subExpression":{"arguments":[{"arguments":[{"id":467,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3404:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$602","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$602","typeString":"contract Initializable"}],"id":466,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3396:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":465,"name":"address","nodeType":"ElementaryTypeName","src":"3396:7:6","typeDescriptions":{}}},"id":468,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3396:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":463,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1622,"src":"3377:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$1622_$","typeString":"type(library Address)"}},"id":464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3385:10:6","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1310,"src":"3377:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3377:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":471,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":440,"src":"3414:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3430:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3414:17:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3376:55:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":475,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3375:57:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3335:97:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3446:48:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":456,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3314:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3314:190:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":479,"nodeType":"ExpressionStatement","src":"3314:190:6"},{"expression":{"id":482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":480,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":440,"src":"3514:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3529:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3514:16:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":483,"nodeType":"ExpressionStatement","src":"3514:16:6"},{"condition":{"id":484,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":452,"src":"3544:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":490,"nodeType":"IfStatement","src":"3540:65:6","trueBody":{"id":489,"nodeType":"Block","src":"3560:45:6","statements":[{"expression":{"id":487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":485,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":443,"src":"3574:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3590:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3574:20:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":488,"nodeType":"ExpressionStatement","src":"3574:20:6"}]}},{"id":491,"nodeType":"PlaceholderStatement","src":"3614:1:6"},{"condition":{"id":492,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":452,"src":"3629:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":502,"nodeType":"IfStatement","src":"3625:99:6","trueBody":{"id":501,"nodeType":"Block","src":"3645:79:6","statements":[{"expression":{"id":495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":493,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":443,"src":"3659:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3675:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3659:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":496,"nodeType":"ExpressionStatement","src":"3659:21:6"},{"eventCall":{"arguments":[{"hexValue":"31","id":498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3711:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":497,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"3699:11:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3699:14:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":500,"nodeType":"EmitStatement","src":"3694:19:6"}]}}]},"documentation":{"id":449,"nodeType":"StructuredDocumentation","src":"2831:399:6","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":504,"name":"initializer","nameLocation":"3244:11:6","nodeType":"ModifierDefinition","parameters":{"id":450,"nodeType":"ParameterList","parameters":[],"src":"3255:2:6"},"src":"3235:495:6","virtual":false,"visibility":"internal"},{"body":{"id":536,"nodeType":"Block","src":"4841:255:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4859:14:6","subExpression":{"id":510,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":443,"src":"4860:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":512,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":440,"src":"4877:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":513,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":507,"src":"4892:7:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4877:22:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4859:40:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4901:48:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":509,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4851:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":517,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4851:99:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":518,"nodeType":"ExpressionStatement","src":"4851:99:6"},{"expression":{"id":521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":519,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":440,"src":"4960:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":520,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":507,"src":"4975:7:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4960:22:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":522,"nodeType":"ExpressionStatement","src":"4960:22:6"},{"expression":{"id":525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":523,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":443,"src":"4992:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5008:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4992:20:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":526,"nodeType":"ExpressionStatement","src":"4992:20:6"},{"id":527,"nodeType":"PlaceholderStatement","src":"5022:1:6"},{"expression":{"id":530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":528,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":443,"src":"5033:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5049:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5033:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":531,"nodeType":"ExpressionStatement","src":"5033:21:6"},{"eventCall":{"arguments":[{"id":533,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":507,"src":"5081:7:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":532,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"5069:11:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5069:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":535,"nodeType":"EmitStatement","src":"5064:25:6"}]},"documentation":{"id":505,"nodeType":"StructuredDocumentation","src":"3736:1062:6","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":537,"name":"reinitializer","nameLocation":"4812:13:6","nodeType":"ModifierDefinition","parameters":{"id":508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":507,"mutability":"mutable","name":"version","nameLocation":"4832:7:6","nodeType":"VariableDeclaration","scope":537,"src":"4826:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":506,"name":"uint8","nodeType":"ElementaryTypeName","src":"4826:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4825:15:6"},"src":"4803:293:6","virtual":false,"visibility":"internal"},{"body":{"id":546,"nodeType":"Block","src":"5334:97:6","statements":[{"expression":{"arguments":[{"id":541,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":443,"src":"5352:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5367:45:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":540,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5344:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":543,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5344:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":544,"nodeType":"ExpressionStatement","src":"5344:69:6"},{"id":545,"nodeType":"PlaceholderStatement","src":"5423:1:6"}]},"documentation":{"id":538,"nodeType":"StructuredDocumentation","src":"5102:199:6","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":547,"name":"onlyInitializing","nameLocation":"5315:16:6","nodeType":"ModifierDefinition","parameters":{"id":539,"nodeType":"ParameterList","parameters":[],"src":"5331:2:6"},"src":"5306:125:6","virtual":false,"visibility":"internal"},{"body":{"id":582,"nodeType":"Block","src":"5966:231:6","statements":[{"expression":{"arguments":[{"id":553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5984:14:6","subExpression":{"id":552,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":443,"src":"5985:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6000:41:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":551,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5976:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5976:66:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":556,"nodeType":"ExpressionStatement","src":"5976:66:6"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":557,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":440,"src":"6056:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":560,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6077:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":559,"name":"uint8","nodeType":"ElementaryTypeName","src":"6077:5:6","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":558,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6072:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6072:11:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":562,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6084:3:6","memberName":"max","nodeType":"MemberAccess","src":"6072:15:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6056:31:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":581,"nodeType":"IfStatement","src":"6052:139:6","trueBody":{"id":580,"nodeType":"Block","src":"6089:102:6","statements":[{"expression":{"id":570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":564,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":440,"src":"6103:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":567,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6123:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":566,"name":"uint8","nodeType":"ElementaryTypeName","src":"6123:5:6","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":565,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6118:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6118:11:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":569,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6130:3:6","memberName":"max","nodeType":"MemberAccess","src":"6118:15:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6103:30:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":571,"nodeType":"ExpressionStatement","src":"6103:30:6"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":575,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6169:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":574,"name":"uint8","nodeType":"ElementaryTypeName","src":"6169:5:6","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":573,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6164:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":576,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6164:11:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":577,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6176:3:6","memberName":"max","nodeType":"MemberAccess","src":"6164:15:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":572,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"6152:11:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":578,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6152:28:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":579,"nodeType":"EmitStatement","src":"6147:33:6"}]}}]},"documentation":{"id":548,"nodeType":"StructuredDocumentation","src":"5437:475:6","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":583,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5926:20:6","nodeType":"FunctionDefinition","parameters":{"id":549,"nodeType":"ParameterList","parameters":[],"src":"5946:2:6"},"returnParameters":{"id":550,"nodeType":"ParameterList","parameters":[],"src":"5966:0:6"},"scope":602,"src":"5917:280:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":591,"nodeType":"Block","src":"6371:36:6","statements":[{"expression":{"id":589,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":440,"src":"6388:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":588,"id":590,"nodeType":"Return","src":"6381:19:6"}]},"documentation":{"id":584,"nodeType":"StructuredDocumentation","src":"6203:99:6","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":592,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6316:22:6","nodeType":"FunctionDefinition","parameters":{"id":585,"nodeType":"ParameterList","parameters":[],"src":"6338:2:6"},"returnParameters":{"id":588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":587,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":592,"src":"6364:5:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":586,"name":"uint8","nodeType":"ElementaryTypeName","src":"6364:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6363:7:6"},"scope":602,"src":"6307:100:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":600,"nodeType":"Block","src":"6579:37:6","statements":[{"expression":{"id":598,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":443,"src":"6596:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":597,"id":599,"nodeType":"Return","src":"6589:20:6"}]},"documentation":{"id":593,"nodeType":"StructuredDocumentation","src":"6413:105:6","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":601,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6532:15:6","nodeType":"FunctionDefinition","parameters":{"id":594,"nodeType":"ParameterList","parameters":[],"src":"6547:2:6"},"returnParameters":{"id":597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":596,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":601,"src":"6573:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":595,"name":"bool","nodeType":"ElementaryTypeName","src":"6573:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6572:6:6"},"scope":602,"src":"6523:93:6","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":603,"src":"2383:4235:6","usedErrors":[]}],"src":"113:6506:6"},"id":6},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","exportedSymbols":{"Context":[1644],"ERC20":[1189],"IERC20":[1267],"IERC20Metadata":[1292]},"id":1190,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":604,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:7"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"./IERC20.sol","id":605,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1190,"sourceUnit":1268,"src":"130:22:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","file":"./extensions/IERC20Metadata.sol","id":606,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1190,"sourceUnit":1293,"src":"153:41:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":607,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1190,"sourceUnit":1645,"src":"195:33:7","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":609,"name":"Context","nameLocations":["1550:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":1644,"src":"1550:7:7"},"id":610,"nodeType":"InheritanceSpecifier","src":"1550:7:7"},{"baseName":{"id":611,"name":"IERC20","nameLocations":["1559:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":1267,"src":"1559:6:7"},"id":612,"nodeType":"InheritanceSpecifier","src":"1559:6:7"},{"baseName":{"id":613,"name":"IERC20Metadata","nameLocations":["1567:14:7"],"nodeType":"IdentifierPath","referencedDeclaration":1292,"src":"1567:14:7"},"id":614,"nodeType":"InheritanceSpecifier","src":"1567:14:7"}],"canonicalName":"ERC20","contractDependencies":[],"contractKind":"contract","documentation":{"id":608,"nodeType":"StructuredDocumentation","src":"230:1301:7","text":" @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."},"fullyImplemented":true,"id":1189,"linearizedBaseContracts":[1189,1292,1267,1644],"name":"ERC20","nameLocation":"1541:5:7","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":618,"mutability":"mutable","name":"_balances","nameLocation":"1624:9:7","nodeType":"VariableDeclaration","scope":1189,"src":"1588:45:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":617,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":615,"name":"address","nodeType":"ElementaryTypeName","src":"1596:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1588:27:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":616,"name":"uint256","nodeType":"ElementaryTypeName","src":"1607:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":624,"mutability":"mutable","name":"_allowances","nameLocation":"1696:11:7","nodeType":"VariableDeclaration","scope":1189,"src":"1640:67:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":623,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":619,"name":"address","nodeType":"ElementaryTypeName","src":"1648:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1640:47:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":622,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":620,"name":"address","nodeType":"ElementaryTypeName","src":"1667:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1659:27:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":621,"name":"uint256","nodeType":"ElementaryTypeName","src":"1678:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":626,"mutability":"mutable","name":"_totalSupply","nameLocation":"1730:12:7","nodeType":"VariableDeclaration","scope":1189,"src":"1714:28:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":625,"name":"uint256","nodeType":"ElementaryTypeName","src":"1714:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":628,"mutability":"mutable","name":"_name","nameLocation":"1764:5:7","nodeType":"VariableDeclaration","scope":1189,"src":"1749:20:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":627,"name":"string","nodeType":"ElementaryTypeName","src":"1749:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":630,"mutability":"mutable","name":"_symbol","nameLocation":"1790:7:7","nodeType":"VariableDeclaration","scope":1189,"src":"1775:22:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":629,"name":"string","nodeType":"ElementaryTypeName","src":"1775:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":646,"nodeType":"Block","src":"2036:57:7","statements":[{"expression":{"id":640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":638,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":628,"src":"2046:5:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":639,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"2054:5:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2046:13:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":641,"nodeType":"ExpressionStatement","src":"2046:13:7"},{"expression":{"id":644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":642,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":630,"src":"2069:7:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":643,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":635,"src":"2079:7:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2069:17:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":645,"nodeType":"ExpressionStatement","src":"2069:17:7"}]},"documentation":{"id":631,"nodeType":"StructuredDocumentation","src":"1804:171:7","text":" @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."},"id":647,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":633,"mutability":"mutable","name":"name_","nameLocation":"2006:5:7","nodeType":"VariableDeclaration","scope":647,"src":"1992:19:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":632,"name":"string","nodeType":"ElementaryTypeName","src":"1992:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":635,"mutability":"mutable","name":"symbol_","nameLocation":"2027:7:7","nodeType":"VariableDeclaration","scope":647,"src":"2013:21:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":634,"name":"string","nodeType":"ElementaryTypeName","src":"2013:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1991:44:7"},"returnParameters":{"id":637,"nodeType":"ParameterList","parameters":[],"src":"2036:0:7"},"scope":1189,"src":"1980:113:7","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1279],"body":{"id":656,"nodeType":"Block","src":"2227:29:7","statements":[{"expression":{"id":654,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":628,"src":"2244:5:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":653,"id":655,"nodeType":"Return","src":"2237:12:7"}]},"documentation":{"id":648,"nodeType":"StructuredDocumentation","src":"2099:54:7","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":657,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2167:4:7","nodeType":"FunctionDefinition","overrides":{"id":650,"nodeType":"OverrideSpecifier","overrides":[],"src":"2194:8:7"},"parameters":{"id":649,"nodeType":"ParameterList","parameters":[],"src":"2171:2:7"},"returnParameters":{"id":653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":652,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":657,"src":"2212:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":651,"name":"string","nodeType":"ElementaryTypeName","src":"2212:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2211:15:7"},"scope":1189,"src":"2158:98:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1285],"body":{"id":666,"nodeType":"Block","src":"2440:31:7","statements":[{"expression":{"id":664,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":630,"src":"2457:7:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":663,"id":665,"nodeType":"Return","src":"2450:14:7"}]},"documentation":{"id":658,"nodeType":"StructuredDocumentation","src":"2262:102:7","text":" @dev Returns the symbol of the token, usually a shorter version of the\n name."},"functionSelector":"95d89b41","id":667,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2378:6:7","nodeType":"FunctionDefinition","overrides":{"id":660,"nodeType":"OverrideSpecifier","overrides":[],"src":"2407:8:7"},"parameters":{"id":659,"nodeType":"ParameterList","parameters":[],"src":"2384:2:7"},"returnParameters":{"id":663,"nodeType":"ParameterList","parameters":[{"constant":false,"id":662,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":667,"src":"2425:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":661,"name":"string","nodeType":"ElementaryTypeName","src":"2425:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2424:15:7"},"scope":1189,"src":"2369:102:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1291],"body":{"id":676,"nodeType":"Block","src":"3169:26:7","statements":[{"expression":{"hexValue":"3138","id":674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3186:2:7","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"functionReturnParameters":673,"id":675,"nodeType":"Return","src":"3179:9:7"}]},"documentation":{"id":668,"nodeType":"StructuredDocumentation","src":"2477:622:7","text":" @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."},"functionSelector":"313ce567","id":677,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"3113:8:7","nodeType":"FunctionDefinition","overrides":{"id":670,"nodeType":"OverrideSpecifier","overrides":[],"src":"3144:8:7"},"parameters":{"id":669,"nodeType":"ParameterList","parameters":[],"src":"3121:2:7"},"returnParameters":{"id":673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":672,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":677,"src":"3162:5:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":671,"name":"uint8","nodeType":"ElementaryTypeName","src":"3162:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"3161:7:7"},"scope":1189,"src":"3104:91:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1216],"body":{"id":686,"nodeType":"Block","src":"3325:36:7","statements":[{"expression":{"id":684,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":626,"src":"3342:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":683,"id":685,"nodeType":"Return","src":"3335:19:7"}]},"documentation":{"id":678,"nodeType":"StructuredDocumentation","src":"3201:49:7","text":" @dev See {IERC20-totalSupply}."},"functionSelector":"18160ddd","id":687,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"3264:11:7","nodeType":"FunctionDefinition","overrides":{"id":680,"nodeType":"OverrideSpecifier","overrides":[],"src":"3298:8:7"},"parameters":{"id":679,"nodeType":"ParameterList","parameters":[],"src":"3275:2:7"},"returnParameters":{"id":683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":682,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":687,"src":"3316:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":681,"name":"uint256","nodeType":"ElementaryTypeName","src":"3316:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3315:9:7"},"scope":1189,"src":"3255:106:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1224],"body":{"id":700,"nodeType":"Block","src":"3502:42:7","statements":[{"expression":{"baseExpression":{"id":696,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":618,"src":"3519:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":698,"indexExpression":{"id":697,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"3529:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3519:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":695,"id":699,"nodeType":"Return","src":"3512:25:7"}]},"documentation":{"id":688,"nodeType":"StructuredDocumentation","src":"3367:47:7","text":" @dev See {IERC20-balanceOf}."},"functionSelector":"70a08231","id":701,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"3428:9:7","nodeType":"FunctionDefinition","overrides":{"id":692,"nodeType":"OverrideSpecifier","overrides":[],"src":"3475:8:7"},"parameters":{"id":691,"nodeType":"ParameterList","parameters":[{"constant":false,"id":690,"mutability":"mutable","name":"account","nameLocation":"3446:7:7","nodeType":"VariableDeclaration","scope":701,"src":"3438:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":689,"name":"address","nodeType":"ElementaryTypeName","src":"3438:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3437:17:7"},"returnParameters":{"id":695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":694,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":701,"src":"3493:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":693,"name":"uint256","nodeType":"ElementaryTypeName","src":"3493:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3492:9:7"},"scope":1189,"src":"3419:125:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1234],"body":{"id":725,"nodeType":"Block","src":"3825:104:7","statements":[{"assignments":[713],"declarations":[{"constant":false,"id":713,"mutability":"mutable","name":"owner","nameLocation":"3843:5:7","nodeType":"VariableDeclaration","scope":725,"src":"3835:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":712,"name":"address","nodeType":"ElementaryTypeName","src":"3835:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":716,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":714,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1634,"src":"3851:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3851:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3835:28:7"},{"expression":{"arguments":[{"id":718,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"3883:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":719,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":704,"src":"3890:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":720,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"3894:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":717,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":949,"src":"3873:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3873:28:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":722,"nodeType":"ExpressionStatement","src":"3873:28:7"},{"expression":{"hexValue":"74727565","id":723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3918:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":711,"id":724,"nodeType":"Return","src":"3911:11:7"}]},"documentation":{"id":702,"nodeType":"StructuredDocumentation","src":"3550:185:7","text":" @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."},"functionSelector":"a9059cbb","id":726,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"3749:8:7","nodeType":"FunctionDefinition","overrides":{"id":708,"nodeType":"OverrideSpecifier","overrides":[],"src":"3801:8:7"},"parameters":{"id":707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":704,"mutability":"mutable","name":"to","nameLocation":"3766:2:7","nodeType":"VariableDeclaration","scope":726,"src":"3758:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":703,"name":"address","nodeType":"ElementaryTypeName","src":"3758:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":706,"mutability":"mutable","name":"amount","nameLocation":"3778:6:7","nodeType":"VariableDeclaration","scope":726,"src":"3770:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":705,"name":"uint256","nodeType":"ElementaryTypeName","src":"3770:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3757:28:7"},"returnParameters":{"id":711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":710,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":726,"src":"3819:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":709,"name":"bool","nodeType":"ElementaryTypeName","src":"3819:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3818:6:7"},"scope":1189,"src":"3740:189:7","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1244],"body":{"id":743,"nodeType":"Block","src":"4085:51:7","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":737,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":624,"src":"4102:11:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":739,"indexExpression":{"id":738,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":729,"src":"4114:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4102:18:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":741,"indexExpression":{"id":740,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":731,"src":"4121:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4102:27:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":736,"id":742,"nodeType":"Return","src":"4095:34:7"}]},"documentation":{"id":727,"nodeType":"StructuredDocumentation","src":"3935:47:7","text":" @dev See {IERC20-allowance}."},"functionSelector":"dd62ed3e","id":744,"implemented":true,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"3996:9:7","nodeType":"FunctionDefinition","overrides":{"id":733,"nodeType":"OverrideSpecifier","overrides":[],"src":"4058:8:7"},"parameters":{"id":732,"nodeType":"ParameterList","parameters":[{"constant":false,"id":729,"mutability":"mutable","name":"owner","nameLocation":"4014:5:7","nodeType":"VariableDeclaration","scope":744,"src":"4006:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":728,"name":"address","nodeType":"ElementaryTypeName","src":"4006:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":731,"mutability":"mutable","name":"spender","nameLocation":"4029:7:7","nodeType":"VariableDeclaration","scope":744,"src":"4021:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":730,"name":"address","nodeType":"ElementaryTypeName","src":"4021:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4005:32:7"},"returnParameters":{"id":736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":735,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":744,"src":"4076:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":734,"name":"uint256","nodeType":"ElementaryTypeName","src":"4076:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4075:9:7"},"scope":1189,"src":"3987:149:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1254],"body":{"id":768,"nodeType":"Block","src":"4533:108:7","statements":[{"assignments":[756],"declarations":[{"constant":false,"id":756,"mutability":"mutable","name":"owner","nameLocation":"4551:5:7","nodeType":"VariableDeclaration","scope":768,"src":"4543:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":755,"name":"address","nodeType":"ElementaryTypeName","src":"4543:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":759,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":757,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1634,"src":"4559:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":758,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4559:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4543:28:7"},{"expression":{"arguments":[{"id":761,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"4590:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":762,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"4597:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":763,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":749,"src":"4606:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":760,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1123,"src":"4581:8:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":764,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4581:32:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":765,"nodeType":"ExpressionStatement","src":"4581:32:7"},{"expression":{"hexValue":"74727565","id":766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4630:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":754,"id":767,"nodeType":"Return","src":"4623:11:7"}]},"documentation":{"id":745,"nodeType":"StructuredDocumentation","src":"4142:297:7","text":" @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"095ea7b3","id":769,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4453:7:7","nodeType":"FunctionDefinition","overrides":{"id":751,"nodeType":"OverrideSpecifier","overrides":[],"src":"4509:8:7"},"parameters":{"id":750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":747,"mutability":"mutable","name":"spender","nameLocation":"4469:7:7","nodeType":"VariableDeclaration","scope":769,"src":"4461:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":746,"name":"address","nodeType":"ElementaryTypeName","src":"4461:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":749,"mutability":"mutable","name":"amount","nameLocation":"4486:6:7","nodeType":"VariableDeclaration","scope":769,"src":"4478:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":748,"name":"uint256","nodeType":"ElementaryTypeName","src":"4478:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4460:33:7"},"returnParameters":{"id":754,"nodeType":"ParameterList","parameters":[{"constant":false,"id":753,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":769,"src":"4527:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":752,"name":"bool","nodeType":"ElementaryTypeName","src":"4527:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4526:6:7"},"scope":1189,"src":"4444:197:7","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1266],"body":{"id":801,"nodeType":"Block","src":"5306:153:7","statements":[{"assignments":[783],"declarations":[{"constant":false,"id":783,"mutability":"mutable","name":"spender","nameLocation":"5324:7:7","nodeType":"VariableDeclaration","scope":801,"src":"5316:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":782,"name":"address","nodeType":"ElementaryTypeName","src":"5316:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":786,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":784,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1634,"src":"5334:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5334:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5316:30:7"},{"expression":{"arguments":[{"id":788,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":772,"src":"5372:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":789,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"5378:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":790,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":776,"src":"5387:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":787,"name":"_spendAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"5356:15:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":791,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5356:38:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":792,"nodeType":"ExpressionStatement","src":"5356:38:7"},{"expression":{"arguments":[{"id":794,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":772,"src":"5414:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":795,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"5420:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":796,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":776,"src":"5424:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":793,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":949,"src":"5404:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":797,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5404:27:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":798,"nodeType":"ExpressionStatement","src":"5404:27:7"},{"expression":{"hexValue":"74727565","id":799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5448:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":781,"id":800,"nodeType":"Return","src":"5441:11:7"}]},"documentation":{"id":770,"nodeType":"StructuredDocumentation","src":"4647:551:7","text":" @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."},"functionSelector":"23b872dd","id":802,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"5212:12:7","nodeType":"FunctionDefinition","overrides":{"id":778,"nodeType":"OverrideSpecifier","overrides":[],"src":"5282:8:7"},"parameters":{"id":777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":772,"mutability":"mutable","name":"from","nameLocation":"5233:4:7","nodeType":"VariableDeclaration","scope":802,"src":"5225:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":771,"name":"address","nodeType":"ElementaryTypeName","src":"5225:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":774,"mutability":"mutable","name":"to","nameLocation":"5247:2:7","nodeType":"VariableDeclaration","scope":802,"src":"5239:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":773,"name":"address","nodeType":"ElementaryTypeName","src":"5239:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":776,"mutability":"mutable","name":"amount","nameLocation":"5259:6:7","nodeType":"VariableDeclaration","scope":802,"src":"5251:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":775,"name":"uint256","nodeType":"ElementaryTypeName","src":"5251:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5224:42:7"},"returnParameters":{"id":781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":780,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":802,"src":"5300:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":779,"name":"bool","nodeType":"ElementaryTypeName","src":"5300:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5299:6:7"},"scope":1189,"src":"5203:256:7","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":830,"nodeType":"Block","src":"5948:140:7","statements":[{"assignments":[813],"declarations":[{"constant":false,"id":813,"mutability":"mutable","name":"owner","nameLocation":"5966:5:7","nodeType":"VariableDeclaration","scope":830,"src":"5958:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":812,"name":"address","nodeType":"ElementaryTypeName","src":"5958:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":816,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":814,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1634,"src":"5974:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5974:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5958:28:7"},{"expression":{"arguments":[{"id":818,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":813,"src":"6005:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":819,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":805,"src":"6012:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":821,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":813,"src":"6031:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":822,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":805,"src":"6038:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":820,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":744,"src":"6021:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":823,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6021:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":824,"name":"addedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":807,"src":"6049:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6021:38:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":817,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1123,"src":"5996:8:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":826,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5996:64:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":827,"nodeType":"ExpressionStatement","src":"5996:64:7"},{"expression":{"hexValue":"74727565","id":828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6077:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":811,"id":829,"nodeType":"Return","src":"6070:11:7"}]},"documentation":{"id":803,"nodeType":"StructuredDocumentation","src":"5465:384:7","text":" @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"39509351","id":831,"implemented":true,"kind":"function","modifiers":[],"name":"increaseAllowance","nameLocation":"5863:17:7","nodeType":"FunctionDefinition","parameters":{"id":808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":805,"mutability":"mutable","name":"spender","nameLocation":"5889:7:7","nodeType":"VariableDeclaration","scope":831,"src":"5881:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":804,"name":"address","nodeType":"ElementaryTypeName","src":"5881:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":807,"mutability":"mutable","name":"addedValue","nameLocation":"5906:10:7","nodeType":"VariableDeclaration","scope":831,"src":"5898:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":806,"name":"uint256","nodeType":"ElementaryTypeName","src":"5898:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5880:37:7"},"returnParameters":{"id":811,"nodeType":"ParameterList","parameters":[{"constant":false,"id":810,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":831,"src":"5942:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":809,"name":"bool","nodeType":"ElementaryTypeName","src":"5942:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5941:6:7"},"scope":1189,"src":"5854:234:7","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":871,"nodeType":"Block","src":"6674:328:7","statements":[{"assignments":[842],"declarations":[{"constant":false,"id":842,"mutability":"mutable","name":"owner","nameLocation":"6692:5:7","nodeType":"VariableDeclaration","scope":871,"src":"6684:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":841,"name":"address","nodeType":"ElementaryTypeName","src":"6684:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":845,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":843,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1634,"src":"6700:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":844,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6700:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6684:28:7"},{"assignments":[847],"declarations":[{"constant":false,"id":847,"mutability":"mutable","name":"currentAllowance","nameLocation":"6730:16:7","nodeType":"VariableDeclaration","scope":871,"src":"6722:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":846,"name":"uint256","nodeType":"ElementaryTypeName","src":"6722:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":852,"initialValue":{"arguments":[{"id":849,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":842,"src":"6759:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":850,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"6766:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":848,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":744,"src":"6749:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6749:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6722:52:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":854,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"6792:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":855,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"6812:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6792:35:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6829:39:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""},"value":"ERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""}],"id":853,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6784:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":858,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6784:85:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":859,"nodeType":"ExpressionStatement","src":"6784:85:7"},{"id":868,"nodeType":"UncheckedBlock","src":"6879:95:7","statements":[{"expression":{"arguments":[{"id":861,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":842,"src":"6912:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":862,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"6919:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":863,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"6928:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":864,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"6947:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6928:34:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":860,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1123,"src":"6903:8:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6903:60:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":867,"nodeType":"ExpressionStatement","src":"6903:60:7"}]},{"expression":{"hexValue":"74727565","id":869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6991:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":840,"id":870,"nodeType":"Return","src":"6984:11:7"}]},"documentation":{"id":832,"nodeType":"StructuredDocumentation","src":"6094:476:7","text":" @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."},"functionSelector":"a457c2d7","id":872,"implemented":true,"kind":"function","modifiers":[],"name":"decreaseAllowance","nameLocation":"6584:17:7","nodeType":"FunctionDefinition","parameters":{"id":837,"nodeType":"ParameterList","parameters":[{"constant":false,"id":834,"mutability":"mutable","name":"spender","nameLocation":"6610:7:7","nodeType":"VariableDeclaration","scope":872,"src":"6602:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":833,"name":"address","nodeType":"ElementaryTypeName","src":"6602:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":836,"mutability":"mutable","name":"subtractedValue","nameLocation":"6627:15:7","nodeType":"VariableDeclaration","scope":872,"src":"6619:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":835,"name":"uint256","nodeType":"ElementaryTypeName","src":"6619:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6601:42:7"},"returnParameters":{"id":840,"nodeType":"ParameterList","parameters":[{"constant":false,"id":839,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":872,"src":"6668:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":838,"name":"bool","nodeType":"ElementaryTypeName","src":"6668:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6667:6:7"},"scope":1189,"src":"6575:427:7","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":948,"nodeType":"Block","src":"7534:710:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":883,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":875,"src":"7552:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":886,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7568:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":885,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7560:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":884,"name":"address","nodeType":"ElementaryTypeName","src":"7560:7:7","typeDescriptions":{}}},"id":887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7560:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7552:18:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373","id":889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7572:39:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""},"value":"ERC20: transfer from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""}],"id":882,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7544:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":890,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7544:68:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":891,"nodeType":"ExpressionStatement","src":"7544:68:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":893,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"7630:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7644:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":895,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7636:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":894,"name":"address","nodeType":"ElementaryTypeName","src":"7636:7:7","typeDescriptions":{}}},"id":897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7636:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7630:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472657373","id":899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7648:37:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""},"value":"ERC20: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""}],"id":892,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7622:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":900,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7622:64:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":901,"nodeType":"ExpressionStatement","src":"7622:64:7"},{"expression":{"arguments":[{"id":903,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":875,"src":"7718:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":904,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"7724:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":905,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":879,"src":"7728:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":902,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"7697:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7697:38:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":907,"nodeType":"ExpressionStatement","src":"7697:38:7"},{"assignments":[909],"declarations":[{"constant":false,"id":909,"mutability":"mutable","name":"fromBalance","nameLocation":"7754:11:7","nodeType":"VariableDeclaration","scope":948,"src":"7746:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":908,"name":"uint256","nodeType":"ElementaryTypeName","src":"7746:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":913,"initialValue":{"baseExpression":{"id":910,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":618,"src":"7768:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":912,"indexExpression":{"id":911,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":875,"src":"7778:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7768:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7746:37:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":915,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"7801:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":916,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":879,"src":"7816:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7801:21:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365","id":918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7824:40:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""},"value":"ERC20: transfer amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""}],"id":914,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7793:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7793:72:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":920,"nodeType":"ExpressionStatement","src":"7793:72:7"},{"id":935,"nodeType":"UncheckedBlock","src":"7875:273:7","statements":[{"expression":{"id":927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":921,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":618,"src":"7899:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":923,"indexExpression":{"id":922,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":875,"src":"7909:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7899:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":924,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"7917:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":925,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":879,"src":"7931:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7917:20:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7899:38:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":928,"nodeType":"ExpressionStatement","src":"7899:38:7"},{"expression":{"id":933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":929,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":618,"src":"8114:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":931,"indexExpression":{"id":930,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"8124:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8114:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":932,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":879,"src":"8131:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8114:23:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":934,"nodeType":"ExpressionStatement","src":"8114:23:7"}]},{"eventCall":{"arguments":[{"id":937,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":875,"src":"8172:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":938,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"8178:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":939,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":879,"src":"8182:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":936,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1201,"src":"8163:8:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8163:26:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":941,"nodeType":"EmitStatement","src":"8158:31:7"},{"expression":{"arguments":[{"id":943,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":875,"src":"8220:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":944,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"8226:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":945,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":879,"src":"8230:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":942,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1188,"src":"8200:19:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":946,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8200:37:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":947,"nodeType":"ExpressionStatement","src":"8200:37:7"}]},"documentation":{"id":873,"nodeType":"StructuredDocumentation","src":"7008:443:7","text":" @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."},"id":949,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"7465:9:7","nodeType":"FunctionDefinition","parameters":{"id":880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":875,"mutability":"mutable","name":"from","nameLocation":"7483:4:7","nodeType":"VariableDeclaration","scope":949,"src":"7475:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":874,"name":"address","nodeType":"ElementaryTypeName","src":"7475:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":877,"mutability":"mutable","name":"to","nameLocation":"7497:2:7","nodeType":"VariableDeclaration","scope":949,"src":"7489:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":876,"name":"address","nodeType":"ElementaryTypeName","src":"7489:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":879,"mutability":"mutable","name":"amount","nameLocation":"7509:6:7","nodeType":"VariableDeclaration","scope":949,"src":"7501:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":878,"name":"uint256","nodeType":"ElementaryTypeName","src":"7501:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7474:42:7"},"returnParameters":{"id":881,"nodeType":"ParameterList","parameters":[],"src":"7534:0:7"},"scope":1189,"src":"7456:788:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1005,"nodeType":"Block","src":"8585:470:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":958,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":952,"src":"8603:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":961,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8622:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":960,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8614:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":959,"name":"address","nodeType":"ElementaryTypeName","src":"8614:7:7","typeDescriptions":{}}},"id":962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8614:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8603:21:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","id":964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8626:33:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""},"value":"ERC20: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""}],"id":957,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8595:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8595:65:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":966,"nodeType":"ExpressionStatement","src":"8595:65:7"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8700:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":969,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8692:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":968,"name":"address","nodeType":"ElementaryTypeName","src":"8692:7:7","typeDescriptions":{}}},"id":971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8692:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":972,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":952,"src":"8704:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":973,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"8713:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":967,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"8671:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8671:49:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":975,"nodeType":"ExpressionStatement","src":"8671:49:7"},{"expression":{"id":978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":976,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":626,"src":"8731:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":977,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"8747:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8731:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":979,"nodeType":"ExpressionStatement","src":"8731:22:7"},{"id":986,"nodeType":"UncheckedBlock","src":"8763:175:7","statements":[{"expression":{"id":984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":980,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":618,"src":"8899:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":982,"indexExpression":{"id":981,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":952,"src":"8909:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8899:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":983,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"8921:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8899:28:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":985,"nodeType":"ExpressionStatement","src":"8899:28:7"}]},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8969:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":989,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8961:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":988,"name":"address","nodeType":"ElementaryTypeName","src":"8961:7:7","typeDescriptions":{}}},"id":991,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8961:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":992,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":952,"src":"8973:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":993,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"8982:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":987,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1201,"src":"8952:8:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8952:37:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":995,"nodeType":"EmitStatement","src":"8947:42:7"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":999,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9028:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":998,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9020:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":997,"name":"address","nodeType":"ElementaryTypeName","src":"9020:7:7","typeDescriptions":{}}},"id":1000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9020:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1001,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":952,"src":"9032:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1002,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"9041:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":996,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1188,"src":"9000:19:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9000:48:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1004,"nodeType":"ExpressionStatement","src":"9000:48:7"}]},"documentation":{"id":950,"nodeType":"StructuredDocumentation","src":"8250:265:7","text":"@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."},"id":1006,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"8529:5:7","nodeType":"FunctionDefinition","parameters":{"id":955,"nodeType":"ParameterList","parameters":[{"constant":false,"id":952,"mutability":"mutable","name":"account","nameLocation":"8543:7:7","nodeType":"VariableDeclaration","scope":1006,"src":"8535:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":951,"name":"address","nodeType":"ElementaryTypeName","src":"8535:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":954,"mutability":"mutable","name":"amount","nameLocation":"8560:6:7","nodeType":"VariableDeclaration","scope":1006,"src":"8552:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":953,"name":"uint256","nodeType":"ElementaryTypeName","src":"8552:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8534:33:7"},"returnParameters":{"id":956,"nodeType":"ParameterList","parameters":[],"src":"8585:0:7"},"scope":1189,"src":"8520:535:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1077,"nodeType":"Block","src":"9440:594:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1015,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1009,"src":"9458:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9477:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1017,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9469:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1016,"name":"address","nodeType":"ElementaryTypeName","src":"9469:7:7","typeDescriptions":{}}},"id":1019,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9469:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9458:21:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e2066726f6d20746865207a65726f2061646472657373","id":1021,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9481:35:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""},"value":"ERC20: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""}],"id":1014,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9450:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1022,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9450:67:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1023,"nodeType":"ExpressionStatement","src":"9450:67:7"},{"expression":{"arguments":[{"id":1025,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1009,"src":"9549:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9566:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1027,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9558:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1026,"name":"address","nodeType":"ElementaryTypeName","src":"9558:7:7","typeDescriptions":{}}},"id":1029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9558:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1030,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1011,"src":"9570:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1024,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"9528:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9528:49:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1032,"nodeType":"ExpressionStatement","src":"9528:49:7"},{"assignments":[1034],"declarations":[{"constant":false,"id":1034,"mutability":"mutable","name":"accountBalance","nameLocation":"9596:14:7","nodeType":"VariableDeclaration","scope":1077,"src":"9588:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1033,"name":"uint256","nodeType":"ElementaryTypeName","src":"9588:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1038,"initialValue":{"baseExpression":{"id":1035,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":618,"src":"9613:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1037,"indexExpression":{"id":1036,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1009,"src":"9623:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9613:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9588:43:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1040,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"9649:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1041,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1011,"src":"9667:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9649:24:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365","id":1043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9675:36:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""},"value":"ERC20: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""}],"id":1039,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9641:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9641:71:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1045,"nodeType":"ExpressionStatement","src":"9641:71:7"},{"id":1058,"nodeType":"UncheckedBlock","src":"9722:194:7","statements":[{"expression":{"id":1052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1046,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":618,"src":"9746:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1048,"indexExpression":{"id":1047,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1009,"src":"9756:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9746:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1049,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"9767:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1050,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1011,"src":"9784:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9767:23:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9746:44:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1053,"nodeType":"ExpressionStatement","src":"9746:44:7"},{"expression":{"id":1056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1054,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":626,"src":"9883:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":1055,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1011,"src":"9899:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9883:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1057,"nodeType":"ExpressionStatement","src":"9883:22:7"}]},{"eventCall":{"arguments":[{"id":1060,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1009,"src":"9940:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9957:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1062,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9949:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1061,"name":"address","nodeType":"ElementaryTypeName","src":"9949:7:7","typeDescriptions":{}}},"id":1064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9949:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1065,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1011,"src":"9961:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1059,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1201,"src":"9931:8:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9931:37:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1067,"nodeType":"EmitStatement","src":"9926:42:7"},{"expression":{"arguments":[{"id":1069,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1009,"src":"9999:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10016:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1071,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10008:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1070,"name":"address","nodeType":"ElementaryTypeName","src":"10008:7:7","typeDescriptions":{}}},"id":1073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10008:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1074,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1011,"src":"10020:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1068,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1188,"src":"9979:19:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1075,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9979:48:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1076,"nodeType":"ExpressionStatement","src":"9979:48:7"}]},"documentation":{"id":1007,"nodeType":"StructuredDocumentation","src":"9061:309:7","text":" @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."},"id":1078,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"9384:5:7","nodeType":"FunctionDefinition","parameters":{"id":1012,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1009,"mutability":"mutable","name":"account","nameLocation":"9398:7:7","nodeType":"VariableDeclaration","scope":1078,"src":"9390:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1008,"name":"address","nodeType":"ElementaryTypeName","src":"9390:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1011,"mutability":"mutable","name":"amount","nameLocation":"9415:6:7","nodeType":"VariableDeclaration","scope":1078,"src":"9407:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1010,"name":"uint256","nodeType":"ElementaryTypeName","src":"9407:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9389:33:7"},"returnParameters":{"id":1013,"nodeType":"ParameterList","parameters":[],"src":"9440:0:7"},"scope":1189,"src":"9375:659:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1122,"nodeType":"Block","src":"10540:257:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1089,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"10558:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10575:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1091,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10567:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1090,"name":"address","nodeType":"ElementaryTypeName","src":"10567:7:7","typeDescriptions":{}}},"id":1093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10567:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10558:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373","id":1095,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10579:38:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""},"value":"ERC20: approve from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""}],"id":1088,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10550:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1096,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10550:68:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1097,"nodeType":"ExpressionStatement","src":"10550:68:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1099,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1083,"src":"10636:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10655:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1101,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10647:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1100,"name":"address","nodeType":"ElementaryTypeName","src":"10647:7:7","typeDescriptions":{}}},"id":1103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10647:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10636:21:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f2061646472657373","id":1105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10659:36:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""},"value":"ERC20: approve to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""}],"id":1098,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10628:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10628:68:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1107,"nodeType":"ExpressionStatement","src":"10628:68:7"},{"expression":{"id":1114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1108,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":624,"src":"10707:11:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":1111,"indexExpression":{"id":1109,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"10719:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10707:18:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1112,"indexExpression":{"id":1110,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1083,"src":"10726:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10707:27:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1113,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"10737:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10707:36:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1115,"nodeType":"ExpressionStatement","src":"10707:36:7"},{"eventCall":{"arguments":[{"id":1117,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"10767:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1118,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1083,"src":"10774:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1119,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"10783:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1116,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1210,"src":"10758:8:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10758:32:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1121,"nodeType":"EmitStatement","src":"10753:37:7"}]},"documentation":{"id":1079,"nodeType":"StructuredDocumentation","src":"10040:412:7","text":" @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."},"id":1123,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"10466:8:7","nodeType":"FunctionDefinition","parameters":{"id":1086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1081,"mutability":"mutable","name":"owner","nameLocation":"10483:5:7","nodeType":"VariableDeclaration","scope":1123,"src":"10475:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1080,"name":"address","nodeType":"ElementaryTypeName","src":"10475:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1083,"mutability":"mutable","name":"spender","nameLocation":"10498:7:7","nodeType":"VariableDeclaration","scope":1123,"src":"10490:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1082,"name":"address","nodeType":"ElementaryTypeName","src":"10490:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1085,"mutability":"mutable","name":"amount","nameLocation":"10515:6:7","nodeType":"VariableDeclaration","scope":1123,"src":"10507:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1084,"name":"uint256","nodeType":"ElementaryTypeName","src":"10507:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10474:48:7"},"returnParameters":{"id":1087,"nodeType":"ParameterList","parameters":[],"src":"10540:0:7"},"scope":1189,"src":"10457:340:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1165,"nodeType":"Block","src":"11168:321:7","statements":[{"assignments":[1134],"declarations":[{"constant":false,"id":1134,"mutability":"mutable","name":"currentAllowance","nameLocation":"11186:16:7","nodeType":"VariableDeclaration","scope":1165,"src":"11178:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1133,"name":"uint256","nodeType":"ElementaryTypeName","src":"11178:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1139,"initialValue":{"arguments":[{"id":1136,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"11215:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1137,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1128,"src":"11222:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1135,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":744,"src":"11205:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":1138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11205:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11178:52:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1140,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1134,"src":"11244:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":1143,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11269:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1142,"name":"uint256","nodeType":"ElementaryTypeName","src":"11269:7:7","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":1141,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11264:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11264:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":1145,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11278:3:7","memberName":"max","nodeType":"MemberAccess","src":"11264:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11244:37:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1164,"nodeType":"IfStatement","src":"11240:243:7","trueBody":{"id":1163,"nodeType":"Block","src":"11283:200:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1148,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1134,"src":"11305:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1149,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1130,"src":"11325:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11305:26:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","id":1151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11333:31:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""},"value":"ERC20: insufficient allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""}],"id":1147,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11297:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11297:68:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1153,"nodeType":"ExpressionStatement","src":"11297:68:7"},{"id":1162,"nodeType":"UncheckedBlock","src":"11379:94:7","statements":[{"expression":{"arguments":[{"id":1155,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"11416:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1156,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1128,"src":"11423:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1157,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1134,"src":"11432:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1158,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1130,"src":"11451:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11432:25:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1154,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1123,"src":"11407:8:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11407:51:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1161,"nodeType":"ExpressionStatement","src":"11407:51:7"}]}]}}]},"documentation":{"id":1124,"nodeType":"StructuredDocumentation","src":"10803:270:7","text":" @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."},"id":1166,"implemented":true,"kind":"function","modifiers":[],"name":"_spendAllowance","nameLocation":"11087:15:7","nodeType":"FunctionDefinition","parameters":{"id":1131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1126,"mutability":"mutable","name":"owner","nameLocation":"11111:5:7","nodeType":"VariableDeclaration","scope":1166,"src":"11103:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1125,"name":"address","nodeType":"ElementaryTypeName","src":"11103:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1128,"mutability":"mutable","name":"spender","nameLocation":"11126:7:7","nodeType":"VariableDeclaration","scope":1166,"src":"11118:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1127,"name":"address","nodeType":"ElementaryTypeName","src":"11118:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1130,"mutability":"mutable","name":"amount","nameLocation":"11143:6:7","nodeType":"VariableDeclaration","scope":1166,"src":"11135:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1129,"name":"uint256","nodeType":"ElementaryTypeName","src":"11135:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11102:48:7"},"returnParameters":{"id":1132,"nodeType":"ParameterList","parameters":[],"src":"11168:0:7"},"scope":1189,"src":"11078:411:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1176,"nodeType":"Block","src":"12162:2:7","statements":[]},"documentation":{"id":1167,"nodeType":"StructuredDocumentation","src":"11495:573:7","text":" @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1177,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"12082:20:7","nodeType":"FunctionDefinition","parameters":{"id":1174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1169,"mutability":"mutable","name":"from","nameLocation":"12111:4:7","nodeType":"VariableDeclaration","scope":1177,"src":"12103:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1168,"name":"address","nodeType":"ElementaryTypeName","src":"12103:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1171,"mutability":"mutable","name":"to","nameLocation":"12125:2:7","nodeType":"VariableDeclaration","scope":1177,"src":"12117:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1170,"name":"address","nodeType":"ElementaryTypeName","src":"12117:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1173,"mutability":"mutable","name":"amount","nameLocation":"12137:6:7","nodeType":"VariableDeclaration","scope":1177,"src":"12129:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1172,"name":"uint256","nodeType":"ElementaryTypeName","src":"12129:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12102:42:7"},"returnParameters":{"id":1175,"nodeType":"ParameterList","parameters":[],"src":"12162:0:7"},"scope":1189,"src":"12073:91:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1187,"nodeType":"Block","src":"12840:2:7","statements":[]},"documentation":{"id":1178,"nodeType":"StructuredDocumentation","src":"12170:577:7","text":" @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1188,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"12761:19:7","nodeType":"FunctionDefinition","parameters":{"id":1185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1180,"mutability":"mutable","name":"from","nameLocation":"12789:4:7","nodeType":"VariableDeclaration","scope":1188,"src":"12781:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1179,"name":"address","nodeType":"ElementaryTypeName","src":"12781:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1182,"mutability":"mutable","name":"to","nameLocation":"12803:2:7","nodeType":"VariableDeclaration","scope":1188,"src":"12795:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1181,"name":"address","nodeType":"ElementaryTypeName","src":"12795:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1184,"mutability":"mutable","name":"amount","nameLocation":"12815:6:7","nodeType":"VariableDeclaration","scope":1188,"src":"12807:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1183,"name":"uint256","nodeType":"ElementaryTypeName","src":"12807:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12780:42:7"},"returnParameters":{"id":1186,"nodeType":"ParameterList","parameters":[],"src":"12840:0:7"},"scope":1189,"src":"12752:90:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1190,"src":"1532:11312:7","usedErrors":[]}],"src":"105:12740:7"},"id":7},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[1267]},"id":1268,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1191,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:8"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":1192,"nodeType":"StructuredDocumentation","src":"131:70:8","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":1267,"linearizedBaseContracts":[1267],"name":"IERC20","nameLocation":"212:6:8","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1193,"nodeType":"StructuredDocumentation","src":"225:158:8","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1201,"name":"Transfer","nameLocation":"394:8:8","nodeType":"EventDefinition","parameters":{"id":1200,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1195,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:8","nodeType":"VariableDeclaration","scope":1201,"src":"403:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1194,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1197,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:8","nodeType":"VariableDeclaration","scope":1201,"src":"425:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1196,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1199,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:8","nodeType":"VariableDeclaration","scope":1201,"src":"445:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1198,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:8"},"src":"388:72:8"},{"anonymous":false,"documentation":{"id":1202,"nodeType":"StructuredDocumentation","src":"466:148:8","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1210,"name":"Approval","nameLocation":"625:8:8","nodeType":"EventDefinition","parameters":{"id":1209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1204,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:8","nodeType":"VariableDeclaration","scope":1210,"src":"634:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1203,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1206,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:8","nodeType":"VariableDeclaration","scope":1210,"src":"657:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1205,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1208,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:8","nodeType":"VariableDeclaration","scope":1210,"src":"682:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1207,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:8"},"src":"619:78:8"},{"documentation":{"id":1211,"nodeType":"StructuredDocumentation","src":"703:66:8","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":1216,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:8","nodeType":"FunctionDefinition","parameters":{"id":1212,"nodeType":"ParameterList","parameters":[],"src":"794:2:8"},"returnParameters":{"id":1215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1214,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1216,"src":"820:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1213,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:8"},"scope":1267,"src":"774:55:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1217,"nodeType":"StructuredDocumentation","src":"835:72:8","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":1224,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:8","nodeType":"FunctionDefinition","parameters":{"id":1220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1219,"mutability":"mutable","name":"account","nameLocation":"939:7:8","nodeType":"VariableDeclaration","scope":1224,"src":"931:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1218,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:8"},"returnParameters":{"id":1223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1222,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1224,"src":"971:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1221,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:8"},"scope":1267,"src":"912:68:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1225,"nodeType":"StructuredDocumentation","src":"986:202:8","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":1234,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:8","nodeType":"FunctionDefinition","parameters":{"id":1230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1227,"mutability":"mutable","name":"to","nameLocation":"1219:2:8","nodeType":"VariableDeclaration","scope":1234,"src":"1211:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1226,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1229,"mutability":"mutable","name":"amount","nameLocation":"1231:6:8","nodeType":"VariableDeclaration","scope":1234,"src":"1223:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1228,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:8"},"returnParameters":{"id":1233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1232,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1234,"src":"1257:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1231,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:8"},"scope":1267,"src":"1193:70:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1235,"nodeType":"StructuredDocumentation","src":"1269:264:8","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":1244,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:8","nodeType":"FunctionDefinition","parameters":{"id":1240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1237,"mutability":"mutable","name":"owner","nameLocation":"1565:5:8","nodeType":"VariableDeclaration","scope":1244,"src":"1557:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1236,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1239,"mutability":"mutable","name":"spender","nameLocation":"1580:7:8","nodeType":"VariableDeclaration","scope":1244,"src":"1572:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1238,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:8"},"returnParameters":{"id":1243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1242,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1244,"src":"1612:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1241,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:8"},"scope":1267,"src":"1538:83:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1245,"nodeType":"StructuredDocumentation","src":"1627:642:8","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1254,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:8","nodeType":"FunctionDefinition","parameters":{"id":1250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1247,"mutability":"mutable","name":"spender","nameLocation":"2299:7:8","nodeType":"VariableDeclaration","scope":1254,"src":"2291:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1246,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1249,"mutability":"mutable","name":"amount","nameLocation":"2316:6:8","nodeType":"VariableDeclaration","scope":1254,"src":"2308:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1248,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:8"},"returnParameters":{"id":1253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1252,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1254,"src":"2342:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1251,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:8"},"scope":1267,"src":"2274:74:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1255,"nodeType":"StructuredDocumentation","src":"2354:287:8","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1266,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:8","nodeType":"FunctionDefinition","parameters":{"id":1262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1257,"mutability":"mutable","name":"from","nameLocation":"2676:4:8","nodeType":"VariableDeclaration","scope":1266,"src":"2668:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1256,"name":"address","nodeType":"ElementaryTypeName","src":"2668:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1259,"mutability":"mutable","name":"to","nameLocation":"2690:2:8","nodeType":"VariableDeclaration","scope":1266,"src":"2682:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1258,"name":"address","nodeType":"ElementaryTypeName","src":"2682:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1261,"mutability":"mutable","name":"amount","nameLocation":"2702:6:8","nodeType":"VariableDeclaration","scope":1266,"src":"2694:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1260,"name":"uint256","nodeType":"ElementaryTypeName","src":"2694:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:42:8"},"returnParameters":{"id":1265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1264,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1266,"src":"2728:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1263,"name":"bool","nodeType":"ElementaryTypeName","src":"2728:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2727:6:8"},"scope":1267,"src":"2646:88:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1268,"src":"202:2534:8","usedErrors":[]}],"src":"106:2631:8"},"id":8},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","exportedSymbols":{"IERC20":[1267],"IERC20Metadata":[1292]},"id":1293,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1269,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"110:23:9"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":1270,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1293,"sourceUnit":1268,"src":"135:23:9","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1272,"name":"IERC20","nameLocations":["305:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":1267,"src":"305:6:9"},"id":1273,"nodeType":"InheritanceSpecifier","src":"305:6:9"}],"canonicalName":"IERC20Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":1271,"nodeType":"StructuredDocumentation","src":"160:116:9","text":" @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"},"fullyImplemented":false,"id":1292,"linearizedBaseContracts":[1292,1267],"name":"IERC20Metadata","nameLocation":"287:14:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1274,"nodeType":"StructuredDocumentation","src":"318:54:9","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":1279,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"386:4:9","nodeType":"FunctionDefinition","parameters":{"id":1275,"nodeType":"ParameterList","parameters":[],"src":"390:2:9"},"returnParameters":{"id":1278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1277,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1279,"src":"416:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1276,"name":"string","nodeType":"ElementaryTypeName","src":"416:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"415:15:9"},"scope":1292,"src":"377:54:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1280,"nodeType":"StructuredDocumentation","src":"437:56:9","text":" @dev Returns the symbol of the token."},"functionSelector":"95d89b41","id":1285,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"507:6:9","nodeType":"FunctionDefinition","parameters":{"id":1281,"nodeType":"ParameterList","parameters":[],"src":"513:2:9"},"returnParameters":{"id":1284,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1283,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1285,"src":"539:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1282,"name":"string","nodeType":"ElementaryTypeName","src":"539:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"538:15:9"},"scope":1292,"src":"498:56:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1286,"nodeType":"StructuredDocumentation","src":"560:65:9","text":" @dev Returns the decimals places of the token."},"functionSelector":"313ce567","id":1291,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"639:8:9","nodeType":"FunctionDefinition","parameters":{"id":1287,"nodeType":"ParameterList","parameters":[],"src":"647:2:9"},"returnParameters":{"id":1290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1289,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1291,"src":"673:5:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1288,"name":"uint8","nodeType":"ElementaryTypeName","src":"673:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"672:7:9"},"scope":1292,"src":"630:50:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1293,"src":"277:405:9","usedErrors":[]}],"src":"110:573:9"},"id":9},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[1622]},"id":1623,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1294,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:10"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":1295,"nodeType":"StructuredDocumentation","src":"126:67:10","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1622,"linearizedBaseContracts":[1622],"name":"Address","nameLocation":"202:7:10","nodeType":"ContractDefinition","nodes":[{"body":{"id":1309,"nodeType":"Block","src":"1478:254:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1303,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1298,"src":"1702:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1710:4:10","memberName":"code","nodeType":"MemberAccess","src":"1702:12:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1715:6:10","memberName":"length","nodeType":"MemberAccess","src":"1702:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1724:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1702:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1302,"id":1308,"nodeType":"Return","src":"1695:30:10"}]},"documentation":{"id":1296,"nodeType":"StructuredDocumentation","src":"216:1191:10","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1310,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1421:10:10","nodeType":"FunctionDefinition","parameters":{"id":1299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1298,"mutability":"mutable","name":"account","nameLocation":"1440:7:10","nodeType":"VariableDeclaration","scope":1310,"src":"1432:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1297,"name":"address","nodeType":"ElementaryTypeName","src":"1432:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1431:17:10"},"returnParameters":{"id":1302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1301,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1310,"src":"1472:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1300,"name":"bool","nodeType":"ElementaryTypeName","src":"1472:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1471:6:10"},"scope":1622,"src":"1412:320:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1343,"nodeType":"Block","src":"2718:241:10","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1321,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2744:4:10","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1622","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1622","typeString":"library Address"}],"id":1320,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2736:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1319,"name":"address","nodeType":"ElementaryTypeName","src":"2736:7:10","typeDescriptions":{}}},"id":1322,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2736:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2750:7:10","memberName":"balance","nodeType":"MemberAccess","src":"2736:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1324,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1315,"src":"2761:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2736:31:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2769:31:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1318,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2728:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:73:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1328,"nodeType":"ExpressionStatement","src":"2728:73:10"},{"assignments":[1330,null],"declarations":[{"constant":false,"id":1330,"mutability":"mutable","name":"success","nameLocation":"2818:7:10","nodeType":"VariableDeclaration","scope":1343,"src":"2813:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1329,"name":"bool","nodeType":"ElementaryTypeName","src":"2813:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1337,"initialValue":{"arguments":[{"hexValue":"","id":1335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2861:2:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1331,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"2831:9:10","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2841:4:10","memberName":"call","nodeType":"MemberAccess","src":"2831:14:10","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1333,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1315,"src":"2853:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2831:29:10","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1336,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2831:33:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2812:52:10"},{"expression":{"arguments":[{"id":1339,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"2882:7:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2891:60:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1338,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2874:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2874:78:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1342,"nodeType":"ExpressionStatement","src":"2874:78:10"}]},"documentation":{"id":1311,"nodeType":"StructuredDocumentation","src":"1738:904:10","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1344,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2656:9:10","nodeType":"FunctionDefinition","parameters":{"id":1316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1313,"mutability":"mutable","name":"recipient","nameLocation":"2682:9:10","nodeType":"VariableDeclaration","scope":1344,"src":"2666:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1312,"name":"address","nodeType":"ElementaryTypeName","src":"2666:15:10","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1315,"mutability":"mutable","name":"amount","nameLocation":"2701:6:10","nodeType":"VariableDeclaration","scope":1344,"src":"2693:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1314,"name":"uint256","nodeType":"ElementaryTypeName","src":"2693:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2665:43:10"},"returnParameters":{"id":1317,"nodeType":"ParameterList","parameters":[],"src":"2718:0:10"},"scope":1622,"src":"2647:312:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1361,"nodeType":"Block","src":"3790:96:10","statements":[{"expression":{"arguments":[{"id":1355,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1347,"src":"3829:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1356,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1349,"src":"3837:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3843:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1358,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3846:32:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1354,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1402,1446],"referencedDeclaration":1446,"src":"3807:21:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3807:72:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1353,"id":1360,"nodeType":"Return","src":"3800:79:10"}]},"documentation":{"id":1345,"nodeType":"StructuredDocumentation","src":"2965:731:10","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1362,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3710:12:10","nodeType":"FunctionDefinition","parameters":{"id":1350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1347,"mutability":"mutable","name":"target","nameLocation":"3731:6:10","nodeType":"VariableDeclaration","scope":1362,"src":"3723:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1346,"name":"address","nodeType":"ElementaryTypeName","src":"3723:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1349,"mutability":"mutable","name":"data","nameLocation":"3752:4:10","nodeType":"VariableDeclaration","scope":1362,"src":"3739:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1348,"name":"bytes","nodeType":"ElementaryTypeName","src":"3739:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3722:35:10"},"returnParameters":{"id":1353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1352,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1362,"src":"3776:12:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1351,"name":"bytes","nodeType":"ElementaryTypeName","src":"3776:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:14:10"},"scope":1622,"src":"3701:185:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1381,"nodeType":"Block","src":"4255:76:10","statements":[{"expression":{"arguments":[{"id":1375,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1365,"src":"4294:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1376,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1367,"src":"4302:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4308:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1378,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1369,"src":"4311:12:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1374,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1402,1446],"referencedDeclaration":1446,"src":"4272:21:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1379,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:52:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1373,"id":1380,"nodeType":"Return","src":"4265:59:10"}]},"documentation":{"id":1363,"nodeType":"StructuredDocumentation","src":"3892:211:10","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1382,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4117:12:10","nodeType":"FunctionDefinition","parameters":{"id":1370,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1365,"mutability":"mutable","name":"target","nameLocation":"4147:6:10","nodeType":"VariableDeclaration","scope":1382,"src":"4139:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1364,"name":"address","nodeType":"ElementaryTypeName","src":"4139:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1367,"mutability":"mutable","name":"data","nameLocation":"4176:4:10","nodeType":"VariableDeclaration","scope":1382,"src":"4163:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1366,"name":"bytes","nodeType":"ElementaryTypeName","src":"4163:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1369,"mutability":"mutable","name":"errorMessage","nameLocation":"4204:12:10","nodeType":"VariableDeclaration","scope":1382,"src":"4190:26:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1368,"name":"string","nodeType":"ElementaryTypeName","src":"4190:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4129:93:10"},"returnParameters":{"id":1373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1372,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1382,"src":"4241:12:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1371,"name":"bytes","nodeType":"ElementaryTypeName","src":"4241:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4240:14:10"},"scope":1622,"src":"4108:223:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1401,"nodeType":"Block","src":"4806:111:10","statements":[{"expression":{"arguments":[{"id":1395,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"4845:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1396,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"4853:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1397,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"4859:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4866:43:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1394,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1402,1446],"referencedDeclaration":1446,"src":"4823:21:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4823:87:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1393,"id":1400,"nodeType":"Return","src":"4816:94:10"}]},"documentation":{"id":1383,"nodeType":"StructuredDocumentation","src":"4337:351:10","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1402,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4702:21:10","nodeType":"FunctionDefinition","parameters":{"id":1390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1385,"mutability":"mutable","name":"target","nameLocation":"4732:6:10","nodeType":"VariableDeclaration","scope":1402,"src":"4724:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1384,"name":"address","nodeType":"ElementaryTypeName","src":"4724:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1387,"mutability":"mutable","name":"data","nameLocation":"4753:4:10","nodeType":"VariableDeclaration","scope":1402,"src":"4740:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1386,"name":"bytes","nodeType":"ElementaryTypeName","src":"4740:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1389,"mutability":"mutable","name":"value","nameLocation":"4767:5:10","nodeType":"VariableDeclaration","scope":1402,"src":"4759:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1388,"name":"uint256","nodeType":"ElementaryTypeName","src":"4759:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4723:50:10"},"returnParameters":{"id":1393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1392,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1402,"src":"4792:12:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1391,"name":"bytes","nodeType":"ElementaryTypeName","src":"4792:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4791:14:10"},"scope":1622,"src":"4693:224:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1445,"nodeType":"Block","src":"5344:267:10","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1419,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5370:4:10","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1622","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1622","typeString":"library Address"}],"id":1418,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5362:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1417,"name":"address","nodeType":"ElementaryTypeName","src":"5362:7:10","typeDescriptions":{}}},"id":1420,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5362:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5376:7:10","memberName":"balance","nodeType":"MemberAccess","src":"5362:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1422,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1409,"src":"5387:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5362:30:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5394:40:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1416,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5354:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1425,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5354:81:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1426,"nodeType":"ExpressionStatement","src":"5354:81:10"},{"assignments":[1428,1430],"declarations":[{"constant":false,"id":1428,"mutability":"mutable","name":"success","nameLocation":"5451:7:10","nodeType":"VariableDeclaration","scope":1445,"src":"5446:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1427,"name":"bool","nodeType":"ElementaryTypeName","src":"5446:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1430,"mutability":"mutable","name":"returndata","nameLocation":"5473:10:10","nodeType":"VariableDeclaration","scope":1445,"src":"5460:23:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1429,"name":"bytes","nodeType":"ElementaryTypeName","src":"5460:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1437,"initialValue":{"arguments":[{"id":1435,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1407,"src":"5513:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1431,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"5487:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5494:4:10","memberName":"call","nodeType":"MemberAccess","src":"5487:11:10","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1433,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1409,"src":"5506:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5487:25:10","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5487:31:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5445:73:10"},{"expression":{"arguments":[{"id":1439,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"5562:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1440,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1428,"src":"5570:7:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1441,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1430,"src":"5579:10:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1442,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1411,"src":"5591:12:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1438,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1577,"src":"5535:26:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5535:69:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1415,"id":1444,"nodeType":"Return","src":"5528:76:10"}]},"documentation":{"id":1403,"nodeType":"StructuredDocumentation","src":"4923:237:10","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1446,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5174:21:10","nodeType":"FunctionDefinition","parameters":{"id":1412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1405,"mutability":"mutable","name":"target","nameLocation":"5213:6:10","nodeType":"VariableDeclaration","scope":1446,"src":"5205:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1404,"name":"address","nodeType":"ElementaryTypeName","src":"5205:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1407,"mutability":"mutable","name":"data","nameLocation":"5242:4:10","nodeType":"VariableDeclaration","scope":1446,"src":"5229:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1406,"name":"bytes","nodeType":"ElementaryTypeName","src":"5229:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1409,"mutability":"mutable","name":"value","nameLocation":"5264:5:10","nodeType":"VariableDeclaration","scope":1446,"src":"5256:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1408,"name":"uint256","nodeType":"ElementaryTypeName","src":"5256:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1411,"mutability":"mutable","name":"errorMessage","nameLocation":"5293:12:10","nodeType":"VariableDeclaration","scope":1446,"src":"5279:26:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1410,"name":"string","nodeType":"ElementaryTypeName","src":"5279:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5195:116:10"},"returnParameters":{"id":1415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1414,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1446,"src":"5330:12:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1413,"name":"bytes","nodeType":"ElementaryTypeName","src":"5330:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5329:14:10"},"scope":1622,"src":"5165:446:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1462,"nodeType":"Block","src":"5888:97:10","statements":[{"expression":{"arguments":[{"id":1457,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1449,"src":"5924:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1458,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1451,"src":"5932:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5938:39:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1456,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1463,1492],"referencedDeclaration":1492,"src":"5905:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1460,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5905:73:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1455,"id":1461,"nodeType":"Return","src":"5898:80:10"}]},"documentation":{"id":1447,"nodeType":"StructuredDocumentation","src":"5617:166:10","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1463,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5797:18:10","nodeType":"FunctionDefinition","parameters":{"id":1452,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1449,"mutability":"mutable","name":"target","nameLocation":"5824:6:10","nodeType":"VariableDeclaration","scope":1463,"src":"5816:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1448,"name":"address","nodeType":"ElementaryTypeName","src":"5816:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1451,"mutability":"mutable","name":"data","nameLocation":"5845:4:10","nodeType":"VariableDeclaration","scope":1463,"src":"5832:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1450,"name":"bytes","nodeType":"ElementaryTypeName","src":"5832:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5815:35:10"},"returnParameters":{"id":1455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1454,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1463,"src":"5874:12:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1453,"name":"bytes","nodeType":"ElementaryTypeName","src":"5874:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5873:14:10"},"scope":1622,"src":"5788:197:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1491,"nodeType":"Block","src":"6327:168:10","statements":[{"assignments":[1476,1478],"declarations":[{"constant":false,"id":1476,"mutability":"mutable","name":"success","nameLocation":"6343:7:10","nodeType":"VariableDeclaration","scope":1491,"src":"6338:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1475,"name":"bool","nodeType":"ElementaryTypeName","src":"6338:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1478,"mutability":"mutable","name":"returndata","nameLocation":"6365:10:10","nodeType":"VariableDeclaration","scope":1491,"src":"6352:23:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1477,"name":"bytes","nodeType":"ElementaryTypeName","src":"6352:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1483,"initialValue":{"arguments":[{"id":1481,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"6397:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1479,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"6379:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6386:10:10","memberName":"staticcall","nodeType":"MemberAccess","src":"6379:17:10","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6379:23:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6337:65:10"},{"expression":{"arguments":[{"id":1485,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"6446:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1486,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"6454:7:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1487,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"6463:10:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1488,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"6475:12:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1484,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1577,"src":"6419:26:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6419:69:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1474,"id":1490,"nodeType":"Return","src":"6412:76:10"}]},"documentation":{"id":1464,"nodeType":"StructuredDocumentation","src":"5991:173:10","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1492,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6178:18:10","nodeType":"FunctionDefinition","parameters":{"id":1471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1466,"mutability":"mutable","name":"target","nameLocation":"6214:6:10","nodeType":"VariableDeclaration","scope":1492,"src":"6206:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1465,"name":"address","nodeType":"ElementaryTypeName","src":"6206:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1468,"mutability":"mutable","name":"data","nameLocation":"6243:4:10","nodeType":"VariableDeclaration","scope":1492,"src":"6230:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1467,"name":"bytes","nodeType":"ElementaryTypeName","src":"6230:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1470,"mutability":"mutable","name":"errorMessage","nameLocation":"6271:12:10","nodeType":"VariableDeclaration","scope":1492,"src":"6257:26:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1469,"name":"string","nodeType":"ElementaryTypeName","src":"6257:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6196:93:10"},"returnParameters":{"id":1474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1473,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1492,"src":"6313:12:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1472,"name":"bytes","nodeType":"ElementaryTypeName","src":"6313:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6312:14:10"},"scope":1622,"src":"6169:326:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1508,"nodeType":"Block","src":"6771:101:10","statements":[{"expression":{"arguments":[{"id":1503,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"6809:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1504,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1497,"src":"6817:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6823:41:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1502,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1509,1538],"referencedDeclaration":1538,"src":"6788:20:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1506,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6788:77:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1501,"id":1507,"nodeType":"Return","src":"6781:84:10"}]},"documentation":{"id":1493,"nodeType":"StructuredDocumentation","src":"6501:168:10","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1509,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6683:20:10","nodeType":"FunctionDefinition","parameters":{"id":1498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1495,"mutability":"mutable","name":"target","nameLocation":"6712:6:10","nodeType":"VariableDeclaration","scope":1509,"src":"6704:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1494,"name":"address","nodeType":"ElementaryTypeName","src":"6704:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1497,"mutability":"mutable","name":"data","nameLocation":"6733:4:10","nodeType":"VariableDeclaration","scope":1509,"src":"6720:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1496,"name":"bytes","nodeType":"ElementaryTypeName","src":"6720:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6703:35:10"},"returnParameters":{"id":1501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1500,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1509,"src":"6757:12:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1499,"name":"bytes","nodeType":"ElementaryTypeName","src":"6757:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6756:14:10"},"scope":1622,"src":"6674:198:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1537,"nodeType":"Block","src":"7213:170:10","statements":[{"assignments":[1522,1524],"declarations":[{"constant":false,"id":1522,"mutability":"mutable","name":"success","nameLocation":"7229:7:10","nodeType":"VariableDeclaration","scope":1537,"src":"7224:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1521,"name":"bool","nodeType":"ElementaryTypeName","src":"7224:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1524,"mutability":"mutable","name":"returndata","nameLocation":"7251:10:10","nodeType":"VariableDeclaration","scope":1537,"src":"7238:23:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1523,"name":"bytes","nodeType":"ElementaryTypeName","src":"7238:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1529,"initialValue":{"arguments":[{"id":1527,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1514,"src":"7285:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1525,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1512,"src":"7265:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7272:12:10","memberName":"delegatecall","nodeType":"MemberAccess","src":"7265:19:10","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7265:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7223:67:10"},{"expression":{"arguments":[{"id":1531,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1512,"src":"7334:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1532,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1522,"src":"7342:7:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1533,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1524,"src":"7351:10:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1534,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1516,"src":"7363:12:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1530,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1577,"src":"7307:26:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7307:69:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1520,"id":1536,"nodeType":"Return","src":"7300:76:10"}]},"documentation":{"id":1510,"nodeType":"StructuredDocumentation","src":"6878:175:10","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1538,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7067:20:10","nodeType":"FunctionDefinition","parameters":{"id":1517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1512,"mutability":"mutable","name":"target","nameLocation":"7105:6:10","nodeType":"VariableDeclaration","scope":1538,"src":"7097:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1511,"name":"address","nodeType":"ElementaryTypeName","src":"7097:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1514,"mutability":"mutable","name":"data","nameLocation":"7134:4:10","nodeType":"VariableDeclaration","scope":1538,"src":"7121:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1513,"name":"bytes","nodeType":"ElementaryTypeName","src":"7121:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1516,"mutability":"mutable","name":"errorMessage","nameLocation":"7162:12:10","nodeType":"VariableDeclaration","scope":1538,"src":"7148:26:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1515,"name":"string","nodeType":"ElementaryTypeName","src":"7148:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7087:93:10"},"returnParameters":{"id":1520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1519,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1538,"src":"7199:12:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1518,"name":"bytes","nodeType":"ElementaryTypeName","src":"7199:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7198:14:10"},"scope":1622,"src":"7058:325:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1576,"nodeType":"Block","src":"7865:434:10","statements":[{"condition":{"id":1552,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1543,"src":"7879:7:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1574,"nodeType":"Block","src":"8235:58:10","statements":[{"expression":{"arguments":[{"id":1570,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1545,"src":"8257:10:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1571,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1547,"src":"8269:12:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1569,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1621,"src":"8249:7:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8249:33:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1573,"nodeType":"ExpressionStatement","src":"8249:33:10"}]},"id":1575,"nodeType":"IfStatement","src":"7875:418:10","trueBody":{"id":1568,"nodeType":"Block","src":"7888:341:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1553,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1545,"src":"7906:10:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7917:6:10","memberName":"length","nodeType":"MemberAccess","src":"7906:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7927:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7906:22:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1565,"nodeType":"IfStatement","src":"7902:286:10","trueBody":{"id":1564,"nodeType":"Block","src":"7930:258:10","statements":[{"expression":{"arguments":[{"arguments":[{"id":1559,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1541,"src":"8132:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1558,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1310,"src":"8121:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8121:18:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8141:31:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1557,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8113:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1562,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8113:60:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1563,"nodeType":"ExpressionStatement","src":"8113:60:10"}]}},{"expression":{"id":1566,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1545,"src":"8208:10:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1551,"id":1567,"nodeType":"Return","src":"8201:17:10"}]}}]},"documentation":{"id":1539,"nodeType":"StructuredDocumentation","src":"7389:277:10","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1577,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7680:26:10","nodeType":"FunctionDefinition","parameters":{"id":1548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1541,"mutability":"mutable","name":"target","nameLocation":"7724:6:10","nodeType":"VariableDeclaration","scope":1577,"src":"7716:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1540,"name":"address","nodeType":"ElementaryTypeName","src":"7716:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1543,"mutability":"mutable","name":"success","nameLocation":"7745:7:10","nodeType":"VariableDeclaration","scope":1577,"src":"7740:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1542,"name":"bool","nodeType":"ElementaryTypeName","src":"7740:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1545,"mutability":"mutable","name":"returndata","nameLocation":"7775:10:10","nodeType":"VariableDeclaration","scope":1577,"src":"7762:23:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1544,"name":"bytes","nodeType":"ElementaryTypeName","src":"7762:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1547,"mutability":"mutable","name":"errorMessage","nameLocation":"7809:12:10","nodeType":"VariableDeclaration","scope":1577,"src":"7795:26:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1546,"name":"string","nodeType":"ElementaryTypeName","src":"7795:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7706:121:10"},"returnParameters":{"id":1551,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1550,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1577,"src":"7851:12:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1549,"name":"bytes","nodeType":"ElementaryTypeName","src":"7851:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7850:14:10"},"scope":1622,"src":"7671:628:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1600,"nodeType":"Block","src":"8680:135:10","statements":[{"condition":{"id":1589,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1580,"src":"8694:7:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1598,"nodeType":"Block","src":"8751:58:10","statements":[{"expression":{"arguments":[{"id":1594,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1582,"src":"8773:10:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1595,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"8785:12:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1593,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1621,"src":"8765:7:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1596,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8765:33:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1597,"nodeType":"ExpressionStatement","src":"8765:33:10"}]},"id":1599,"nodeType":"IfStatement","src":"8690:119:10","trueBody":{"id":1592,"nodeType":"Block","src":"8703:42:10","statements":[{"expression":{"id":1590,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1582,"src":"8724:10:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1588,"id":1591,"nodeType":"Return","src":"8717:17:10"}]}}]},"documentation":{"id":1578,"nodeType":"StructuredDocumentation","src":"8305:210:10","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1601,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8529:16:10","nodeType":"FunctionDefinition","parameters":{"id":1585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1580,"mutability":"mutable","name":"success","nameLocation":"8560:7:10","nodeType":"VariableDeclaration","scope":1601,"src":"8555:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1579,"name":"bool","nodeType":"ElementaryTypeName","src":"8555:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1582,"mutability":"mutable","name":"returndata","nameLocation":"8590:10:10","nodeType":"VariableDeclaration","scope":1601,"src":"8577:23:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1581,"name":"bytes","nodeType":"ElementaryTypeName","src":"8577:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1584,"mutability":"mutable","name":"errorMessage","nameLocation":"8624:12:10","nodeType":"VariableDeclaration","scope":1601,"src":"8610:26:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1583,"name":"string","nodeType":"ElementaryTypeName","src":"8610:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8545:97:10"},"returnParameters":{"id":1588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1587,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1601,"src":"8666:12:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1586,"name":"bytes","nodeType":"ElementaryTypeName","src":"8666:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8665:14:10"},"scope":1622,"src":"8520:295:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1620,"nodeType":"Block","src":"8904:457:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1608,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1603,"src":"8980:10:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8991:6:10","memberName":"length","nodeType":"MemberAccess","src":"8980:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9000:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8980:21:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1618,"nodeType":"Block","src":"9310:45:10","statements":[{"expression":{"arguments":[{"id":1615,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1605,"src":"9331:12:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1614,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9324:6:10","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9324:20:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1617,"nodeType":"ExpressionStatement","src":"9324:20:10"}]},"id":1619,"nodeType":"IfStatement","src":"8976:379:10","trueBody":{"id":1613,"nodeType":"Block","src":"9003:301:10","statements":[{"AST":{"nodeType":"YulBlock","src":"9161:133:10","statements":[{"nodeType":"YulVariableDeclaration","src":"9179:40:10","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9208:10:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9202:5:10"},"nodeType":"YulFunctionCall","src":"9202:17:10"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9183:15:10","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9247:2:10","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9251:10:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9243:3:10"},"nodeType":"YulFunctionCall","src":"9243:19:10"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9264:15:10"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9236:6:10"},"nodeType":"YulFunctionCall","src":"9236:44:10"},"nodeType":"YulExpressionStatement","src":"9236:44:10"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1603,"isOffset":false,"isSlot":false,"src":"9208:10:10","valueSize":1},{"declaration":1603,"isOffset":false,"isSlot":false,"src":"9251:10:10","valueSize":1}],"id":1612,"nodeType":"InlineAssembly","src":"9152:142:10"}]}}]},"id":1621,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8830:7:10","nodeType":"FunctionDefinition","parameters":{"id":1606,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1603,"mutability":"mutable","name":"returndata","nameLocation":"8851:10:10","nodeType":"VariableDeclaration","scope":1621,"src":"8838:23:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1602,"name":"bytes","nodeType":"ElementaryTypeName","src":"8838:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1605,"mutability":"mutable","name":"errorMessage","nameLocation":"8877:12:10","nodeType":"VariableDeclaration","scope":1621,"src":"8863:26:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1604,"name":"string","nodeType":"ElementaryTypeName","src":"8863:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8837:53:10"},"returnParameters":{"id":1607,"nodeType":"ParameterList","parameters":[],"src":"8904:0:10"},"scope":1622,"src":"8821:540:10","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1623,"src":"194:9169:10","usedErrors":[]}],"src":"101:9263:10"},"id":10},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1644]},"id":1645,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1624,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:11"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":1625,"nodeType":"StructuredDocumentation","src":"111:496:11","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1644,"linearizedBaseContracts":[1644],"name":"Context","nameLocation":"626:7:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":1633,"nodeType":"Block","src":"702:34:11","statements":[{"expression":{"expression":{"id":1630,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:11","memberName":"sender","nodeType":"MemberAccess","src":"719:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1629,"id":1632,"nodeType":"Return","src":"712:17:11"}]},"id":1634,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:11","nodeType":"FunctionDefinition","parameters":{"id":1626,"nodeType":"ParameterList","parameters":[],"src":"659:2:11"},"returnParameters":{"id":1629,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1628,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1634,"src":"693:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1627,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:11"},"scope":1644,"src":"640:96:11","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1642,"nodeType":"Block","src":"809:32:11","statements":[{"expression":{"expression":{"id":1639,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:11","memberName":"data","nodeType":"MemberAccess","src":"826:8:11","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1638,"id":1641,"nodeType":"Return","src":"819:15:11"}]},"id":1643,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:11","nodeType":"FunctionDefinition","parameters":{"id":1635,"nodeType":"ParameterList","parameters":[],"src":"759:2:11"},"returnParameters":{"id":1638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1637,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1643,"src":"793:14:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1636,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:11"},"scope":1644,"src":"742:99:11","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1645,"src":"608:235:11","usedErrors":[]}],"src":"86:758:11"},"id":11},"@openzeppelin/contracts/utils/Create2.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Create2.sol","exportedSymbols":{"Create2":[1725]},"id":1726,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1646,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:12"},{"abstract":false,"baseContracts":[],"canonicalName":"Create2","contractDependencies":[],"contractKind":"library","documentation":{"id":1647,"nodeType":"StructuredDocumentation","src":"126:367:12","text":" @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n `CREATE2` can be used to compute in advance the address where a smart\n contract will be deployed, which allows for interesting new mechanisms known\n as 'counterfactual interactions'.\n See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n information."},"fullyImplemented":true,"id":1725,"linearizedBaseContracts":[1725],"name":"Create2","nameLocation":"502:7:12","nodeType":"ContractDefinition","nodes":[{"body":{"id":1689,"nodeType":"Block","src":"1182:383:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1662,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1208:4:12","typeDescriptions":{"typeIdentifier":"t_contract$_Create2_$1725","typeString":"library Create2"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Create2_$1725","typeString":"library Create2"}],"id":1661,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1200:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1660,"name":"address","nodeType":"ElementaryTypeName","src":"1200:7:12","typeDescriptions":{}}},"id":1663,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1200:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1214:7:12","memberName":"balance","nodeType":"MemberAccess","src":"1200:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1665,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1650,"src":"1225:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1200:31:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"437265617465323a20696e73756666696369656e742062616c616e6365","id":1667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1233:31:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_f94f9c62541b73155a9def26a7988ac5579c2c6b698df8f608ced5572b7d72ca","typeString":"literal_string \"Create2: insufficient balance\""},"value":"Create2: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f94f9c62541b73155a9def26a7988ac5579c2c6b698df8f608ced5572b7d72ca","typeString":"literal_string \"Create2: insufficient balance\""}],"id":1659,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1192:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1192:73:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1669,"nodeType":"ExpressionStatement","src":"1192:73:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1671,"name":"bytecode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1654,"src":"1283:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1292:6:12","memberName":"length","nodeType":"MemberAccess","src":"1283:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1302:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1283:20:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"437265617465323a2062797465636f6465206c656e677468206973207a65726f","id":1675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1305:34:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_124767115c09b0dd37c31c42ddb030d84459c933a30879cc32c4c922ae5928f0","typeString":"literal_string \"Create2: bytecode length is zero\""},"value":"Create2: bytecode length is zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_124767115c09b0dd37c31c42ddb030d84459c933a30879cc32c4c922ae5928f0","typeString":"literal_string \"Create2: bytecode length is zero\""}],"id":1670,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1275:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1275:65:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1677,"nodeType":"ExpressionStatement","src":"1275:65:12"},{"AST":{"nodeType":"YulBlock","src":"1402:91:12","statements":[{"nodeType":"YulAssignment","src":"1416:67:12","value":{"arguments":[{"name":"amount","nodeType":"YulIdentifier","src":"1432:6:12"},{"arguments":[{"name":"bytecode","nodeType":"YulIdentifier","src":"1444:8:12"},{"kind":"number","nodeType":"YulLiteral","src":"1454:4:12","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1440:3:12"},"nodeType":"YulFunctionCall","src":"1440:19:12"},{"arguments":[{"name":"bytecode","nodeType":"YulIdentifier","src":"1467:8:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1461:5:12"},"nodeType":"YulFunctionCall","src":"1461:15:12"},{"name":"salt","nodeType":"YulIdentifier","src":"1478:4:12"}],"functionName":{"name":"create2","nodeType":"YulIdentifier","src":"1424:7:12"},"nodeType":"YulFunctionCall","src":"1424:59:12"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"1416:4:12"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1657,"isOffset":false,"isSlot":false,"src":"1416:4:12","valueSize":1},{"declaration":1650,"isOffset":false,"isSlot":false,"src":"1432:6:12","valueSize":1},{"declaration":1654,"isOffset":false,"isSlot":false,"src":"1444:8:12","valueSize":1},{"declaration":1654,"isOffset":false,"isSlot":false,"src":"1467:8:12","valueSize":1},{"declaration":1652,"isOffset":false,"isSlot":false,"src":"1478:4:12","valueSize":1}],"id":1678,"nodeType":"InlineAssembly","src":"1393:100:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1680,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1657,"src":"1510:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1526:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1682,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1518:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1681,"name":"address","nodeType":"ElementaryTypeName","src":"1518:7:12","typeDescriptions":{}}},"id":1684,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1518:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1510:18:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"437265617465323a204661696c6564206f6e206465706c6f79","id":1686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1530:27:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_87142438d464a3cd804331cca8480b31569380ef25d1f39b80404975699f0676","typeString":"literal_string \"Create2: Failed on deploy\""},"value":"Create2: Failed on deploy"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_87142438d464a3cd804331cca8480b31569380ef25d1f39b80404975699f0676","typeString":"literal_string \"Create2: Failed on deploy\""}],"id":1679,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1502:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1687,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1502:56:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1688,"nodeType":"ExpressionStatement","src":"1502:56:12"}]},"documentation":{"id":1648,"nodeType":"StructuredDocumentation","src":"516:560:12","text":" @dev Deploys a contract using `CREATE2`. The address where the contract\n will be deployed can be known in advance via {computeAddress}.\n The bytecode for a contract can be obtained from Solidity with\n `type(contractName).creationCode`.\n Requirements:\n - `bytecode` must not be empty.\n - `salt` must have not been used for `bytecode` already.\n - the factory must have a balance of at least `amount`.\n - if `amount` is non-zero, `bytecode` must have a `payable` constructor."},"id":1690,"implemented":true,"kind":"function","modifiers":[],"name":"deploy","nameLocation":"1090:6:12","nodeType":"FunctionDefinition","parameters":{"id":1655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1650,"mutability":"mutable","name":"amount","nameLocation":"1105:6:12","nodeType":"VariableDeclaration","scope":1690,"src":"1097:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1649,"name":"uint256","nodeType":"ElementaryTypeName","src":"1097:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1652,"mutability":"mutable","name":"salt","nameLocation":"1121:4:12","nodeType":"VariableDeclaration","scope":1690,"src":"1113:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1651,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1113:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1654,"mutability":"mutable","name":"bytecode","nameLocation":"1140:8:12","nodeType":"VariableDeclaration","scope":1690,"src":"1127:21:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1653,"name":"bytes","nodeType":"ElementaryTypeName","src":"1127:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1096:53:12"},"returnParameters":{"id":1658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1657,"mutability":"mutable","name":"addr","nameLocation":"1176:4:12","nodeType":"VariableDeclaration","scope":1690,"src":"1168:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1656,"name":"address","nodeType":"ElementaryTypeName","src":"1168:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1167:14:12"},"scope":1725,"src":"1081:484:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1709,"nodeType":"Block","src":"1861:73:12","statements":[{"expression":{"arguments":[{"id":1701,"name":"salt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1693,"src":"1893:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1702,"name":"bytecodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1695,"src":"1899:12:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":1705,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1921:4:12","typeDescriptions":{"typeIdentifier":"t_contract$_Create2_$1725","typeString":"library Create2"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Create2_$1725","typeString":"library Create2"}],"id":1704,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1913:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1703,"name":"address","nodeType":"ElementaryTypeName","src":"1913:7:12","typeDescriptions":{}}},"id":1706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1913:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1700,"name":"computeAddress","nodeType":"Identifier","overloadedDeclarations":[1710,1724],"referencedDeclaration":1724,"src":"1878:14:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_address_$returns$_t_address_$","typeString":"function (bytes32,bytes32,address) pure returns (address)"}},"id":1707,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1878:49:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1699,"id":1708,"nodeType":"Return","src":"1871:56:12"}]},"documentation":{"id":1691,"nodeType":"StructuredDocumentation","src":"1571:193:12","text":" @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n `bytecodeHash` or `salt` will result in a new destination address."},"id":1710,"implemented":true,"kind":"function","modifiers":[],"name":"computeAddress","nameLocation":"1778:14:12","nodeType":"FunctionDefinition","parameters":{"id":1696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1693,"mutability":"mutable","name":"salt","nameLocation":"1801:4:12","nodeType":"VariableDeclaration","scope":1710,"src":"1793:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1692,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1793:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1695,"mutability":"mutable","name":"bytecodeHash","nameLocation":"1815:12:12","nodeType":"VariableDeclaration","scope":1710,"src":"1807:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1694,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1807:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1792:36:12"},"returnParameters":{"id":1699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1698,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1710,"src":"1852:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1697,"name":"address","nodeType":"ElementaryTypeName","src":"1852:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1851:9:12"},"scope":1725,"src":"1769:165:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1723,"nodeType":"Block","src":"2292:1657:12","statements":[{"AST":{"nodeType":"YulBlock","src":"2354:1589:12","statements":[{"nodeType":"YulVariableDeclaration","src":"2368:22:12","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2385:4:12","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2379:5:12"},"nodeType":"YulFunctionCall","src":"2379:11:12"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"2372:3:12","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3592:3:12"},{"kind":"number","nodeType":"YulLiteral","src":"3597:4:12","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3588:3:12"},"nodeType":"YulFunctionCall","src":"3588:14:12"},{"name":"bytecodeHash","nodeType":"YulIdentifier","src":"3604:12:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3581:6:12"},"nodeType":"YulFunctionCall","src":"3581:36:12"},"nodeType":"YulExpressionStatement","src":"3581:36:12"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3641:3:12"},{"kind":"number","nodeType":"YulLiteral","src":"3646:4:12","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3637:3:12"},"nodeType":"YulFunctionCall","src":"3637:14:12"},{"name":"salt","nodeType":"YulIdentifier","src":"3653:4:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3630:6:12"},"nodeType":"YulFunctionCall","src":"3630:28:12"},"nodeType":"YulExpressionStatement","src":"3630:28:12"},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3678:3:12"},{"name":"deployer","nodeType":"YulIdentifier","src":"3683:8:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3671:6:12"},"nodeType":"YulFunctionCall","src":"3671:21:12"},"nodeType":"YulExpressionStatement","src":"3671:21:12"},{"nodeType":"YulVariableDeclaration","src":"3754:27:12","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3771:3:12"},{"kind":"number","nodeType":"YulLiteral","src":"3776:4:12","type":"","value":"0x0b"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3767:3:12"},"nodeType":"YulFunctionCall","src":"3767:14:12"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"3758:5:12","type":""}]},{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"3880:5:12"},{"kind":"number","nodeType":"YulLiteral","src":"3887:4:12","type":"","value":"0xff"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"3872:7:12"},"nodeType":"YulFunctionCall","src":"3872:20:12"},"nodeType":"YulExpressionStatement","src":"3872:20:12"},{"nodeType":"YulAssignment","src":"3905:28:12","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"3923:5:12"},{"kind":"number","nodeType":"YulLiteral","src":"3930:2:12","type":"","value":"85"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"3913:9:12"},"nodeType":"YulFunctionCall","src":"3913:20:12"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"3905:4:12"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1720,"isOffset":false,"isSlot":false,"src":"3905:4:12","valueSize":1},{"declaration":1715,"isOffset":false,"isSlot":false,"src":"3604:12:12","valueSize":1},{"declaration":1717,"isOffset":false,"isSlot":false,"src":"3683:8:12","valueSize":1},{"declaration":1713,"isOffset":false,"isSlot":false,"src":"3653:4:12","valueSize":1}],"id":1722,"nodeType":"InlineAssembly","src":"2345:1598:12"}]},"documentation":{"id":1711,"nodeType":"StructuredDocumentation","src":"1940:232:12","text":" @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}."},"id":1724,"implemented":true,"kind":"function","modifiers":[],"name":"computeAddress","nameLocation":"2186:14:12","nodeType":"FunctionDefinition","parameters":{"id":1718,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1713,"mutability":"mutable","name":"salt","nameLocation":"2209:4:12","nodeType":"VariableDeclaration","scope":1724,"src":"2201:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1712,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2201:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1715,"mutability":"mutable","name":"bytecodeHash","nameLocation":"2223:12:12","nodeType":"VariableDeclaration","scope":1724,"src":"2215:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1714,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2215:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1717,"mutability":"mutable","name":"deployer","nameLocation":"2245:8:12","nodeType":"VariableDeclaration","scope":1724,"src":"2237:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1716,"name":"address","nodeType":"ElementaryTypeName","src":"2237:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2200:54:12"},"returnParameters":{"id":1721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1720,"mutability":"mutable","name":"addr","nameLocation":"2286:4:12","nodeType":"VariableDeclaration","scope":1724,"src":"2278:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1719,"name":"address","nodeType":"ElementaryTypeName","src":"2278:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2277:14:12"},"scope":1725,"src":"2177:1772:12","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1726,"src":"494:3457:12","usedErrors":[]}],"src":"101:3851:12"},"id":12},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[1835]},"id":1836,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1727,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"193:23:13"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":1728,"nodeType":"StructuredDocumentation","src":"218:1201:13","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n _Available since v4.9 for `string`, `bytes`._"},"fullyImplemented":true,"id":1835,"linearizedBaseContracts":[1835],"name":"StorageSlot","nameLocation":"1428:11:13","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":1731,"members":[{"constant":false,"id":1730,"mutability":"mutable","name":"value","nameLocation":"1483:5:13","nodeType":"VariableDeclaration","scope":1731,"src":"1475:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1729,"name":"address","nodeType":"ElementaryTypeName","src":"1475:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1453:11:13","nodeType":"StructDefinition","scope":1835,"src":"1446:49:13","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":1734,"members":[{"constant":false,"id":1733,"mutability":"mutable","name":"value","nameLocation":"1535:5:13","nodeType":"VariableDeclaration","scope":1734,"src":"1530:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1732,"name":"bool","nodeType":"ElementaryTypeName","src":"1530:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1508:11:13","nodeType":"StructDefinition","scope":1835,"src":"1501:46:13","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":1737,"members":[{"constant":false,"id":1736,"mutability":"mutable","name":"value","nameLocation":"1590:5:13","nodeType":"VariableDeclaration","scope":1737,"src":"1582:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1735,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1582:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1560:11:13","nodeType":"StructDefinition","scope":1835,"src":"1553:49:13","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":1740,"members":[{"constant":false,"id":1739,"mutability":"mutable","name":"value","nameLocation":"1645:5:13","nodeType":"VariableDeclaration","scope":1740,"src":"1637:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1738,"name":"uint256","nodeType":"ElementaryTypeName","src":"1637:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1615:11:13","nodeType":"StructDefinition","scope":1835,"src":"1608:49:13","visibility":"public"},{"canonicalName":"StorageSlot.StringSlot","id":1743,"members":[{"constant":false,"id":1742,"mutability":"mutable","name":"value","nameLocation":"1698:5:13","nodeType":"VariableDeclaration","scope":1743,"src":"1691:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":1741,"name":"string","nodeType":"ElementaryTypeName","src":"1691:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1670:10:13","nodeType":"StructDefinition","scope":1835,"src":"1663:47:13","visibility":"public"},{"canonicalName":"StorageSlot.BytesSlot","id":1746,"members":[{"constant":false,"id":1745,"mutability":"mutable","name":"value","nameLocation":"1749:5:13","nodeType":"VariableDeclaration","scope":1746,"src":"1743:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1744,"name":"bytes","nodeType":"ElementaryTypeName","src":"1743:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1723:9:13","nodeType":"StructDefinition","scope":1835,"src":"1716:45:13","visibility":"public"},{"body":{"id":1756,"nodeType":"Block","src":"1943:106:13","statements":[{"AST":{"nodeType":"YulBlock","src":"2005:38:13","statements":[{"nodeType":"YulAssignment","src":"2019:14:13","value":{"name":"slot","nodeType":"YulIdentifier","src":"2029:4:13"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2019:6:13"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1753,"isOffset":false,"isSlot":true,"src":"2019:6:13","suffix":"slot","valueSize":1},{"declaration":1749,"isOffset":false,"isSlot":false,"src":"2029:4:13","valueSize":1}],"id":1755,"nodeType":"InlineAssembly","src":"1996:47:13"}]},"documentation":{"id":1747,"nodeType":"StructuredDocumentation","src":"1767:87:13","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":1757,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1868:14:13","nodeType":"FunctionDefinition","parameters":{"id":1750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1749,"mutability":"mutable","name":"slot","nameLocation":"1891:4:13","nodeType":"VariableDeclaration","scope":1757,"src":"1883:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1748,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1883:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1882:14:13"},"returnParameters":{"id":1754,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1753,"mutability":"mutable","name":"r","nameLocation":"1940:1:13","nodeType":"VariableDeclaration","scope":1757,"src":"1920:21:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1731_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":1752,"nodeType":"UserDefinedTypeName","pathNode":{"id":1751,"name":"AddressSlot","nameLocations":["1920:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":1731,"src":"1920:11:13"},"referencedDeclaration":1731,"src":"1920:11:13","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1731_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1919:23:13"},"scope":1835,"src":"1859:190:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1767,"nodeType":"Block","src":"2231:106:13","statements":[{"AST":{"nodeType":"YulBlock","src":"2293:38:13","statements":[{"nodeType":"YulAssignment","src":"2307:14:13","value":{"name":"slot","nodeType":"YulIdentifier","src":"2317:4:13"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2307:6:13"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1764,"isOffset":false,"isSlot":true,"src":"2307:6:13","suffix":"slot","valueSize":1},{"declaration":1760,"isOffset":false,"isSlot":false,"src":"2317:4:13","valueSize":1}],"id":1766,"nodeType":"InlineAssembly","src":"2284:47:13"}]},"documentation":{"id":1758,"nodeType":"StructuredDocumentation","src":"2055:87:13","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":1768,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"2156:14:13","nodeType":"FunctionDefinition","parameters":{"id":1761,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1760,"mutability":"mutable","name":"slot","nameLocation":"2179:4:13","nodeType":"VariableDeclaration","scope":1768,"src":"2171:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1759,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2171:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2170:14:13"},"returnParameters":{"id":1765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1764,"mutability":"mutable","name":"r","nameLocation":"2228:1:13","nodeType":"VariableDeclaration","scope":1768,"src":"2208:21:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1734_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":1763,"nodeType":"UserDefinedTypeName","pathNode":{"id":1762,"name":"BooleanSlot","nameLocations":["2208:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":1734,"src":"2208:11:13"},"referencedDeclaration":1734,"src":"2208:11:13","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1734_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"2207:23:13"},"scope":1835,"src":"2147:190:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1778,"nodeType":"Block","src":"2519:106:13","statements":[{"AST":{"nodeType":"YulBlock","src":"2581:38:13","statements":[{"nodeType":"YulAssignment","src":"2595:14:13","value":{"name":"slot","nodeType":"YulIdentifier","src":"2605:4:13"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2595:6:13"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1775,"isOffset":false,"isSlot":true,"src":"2595:6:13","suffix":"slot","valueSize":1},{"declaration":1771,"isOffset":false,"isSlot":false,"src":"2605:4:13","valueSize":1}],"id":1777,"nodeType":"InlineAssembly","src":"2572:47:13"}]},"documentation":{"id":1769,"nodeType":"StructuredDocumentation","src":"2343:87:13","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":1779,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2444:14:13","nodeType":"FunctionDefinition","parameters":{"id":1772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1771,"mutability":"mutable","name":"slot","nameLocation":"2467:4:13","nodeType":"VariableDeclaration","scope":1779,"src":"2459:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1770,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2459:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2458:14:13"},"returnParameters":{"id":1776,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1775,"mutability":"mutable","name":"r","nameLocation":"2516:1:13","nodeType":"VariableDeclaration","scope":1779,"src":"2496:21:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$1737_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":1774,"nodeType":"UserDefinedTypeName","pathNode":{"id":1773,"name":"Bytes32Slot","nameLocations":["2496:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":1737,"src":"2496:11:13"},"referencedDeclaration":1737,"src":"2496:11:13","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$1737_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2495:23:13"},"scope":1835,"src":"2435:190:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1789,"nodeType":"Block","src":"2807:106:13","statements":[{"AST":{"nodeType":"YulBlock","src":"2869:38:13","statements":[{"nodeType":"YulAssignment","src":"2883:14:13","value":{"name":"slot","nodeType":"YulIdentifier","src":"2893:4:13"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2883:6:13"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1786,"isOffset":false,"isSlot":true,"src":"2883:6:13","suffix":"slot","valueSize":1},{"declaration":1782,"isOffset":false,"isSlot":false,"src":"2893:4:13","valueSize":1}],"id":1788,"nodeType":"InlineAssembly","src":"2860:47:13"}]},"documentation":{"id":1780,"nodeType":"StructuredDocumentation","src":"2631:87:13","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":1790,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2732:14:13","nodeType":"FunctionDefinition","parameters":{"id":1783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1782,"mutability":"mutable","name":"slot","nameLocation":"2755:4:13","nodeType":"VariableDeclaration","scope":1790,"src":"2747:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1781,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2747:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2746:14:13"},"returnParameters":{"id":1787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1786,"mutability":"mutable","name":"r","nameLocation":"2804:1:13","nodeType":"VariableDeclaration","scope":1790,"src":"2784:21:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1740_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":1785,"nodeType":"UserDefinedTypeName","pathNode":{"id":1784,"name":"Uint256Slot","nameLocations":["2784:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":1740,"src":"2784:11:13"},"referencedDeclaration":1740,"src":"2784:11:13","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1740_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2783:23:13"},"scope":1835,"src":"2723:190:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1800,"nodeType":"Block","src":"3092:106:13","statements":[{"AST":{"nodeType":"YulBlock","src":"3154:38:13","statements":[{"nodeType":"YulAssignment","src":"3168:14:13","value":{"name":"slot","nodeType":"YulIdentifier","src":"3178:4:13"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3168:6:13"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1797,"isOffset":false,"isSlot":true,"src":"3168:6:13","suffix":"slot","valueSize":1},{"declaration":1793,"isOffset":false,"isSlot":false,"src":"3178:4:13","valueSize":1}],"id":1799,"nodeType":"InlineAssembly","src":"3145:47:13"}]},"documentation":{"id":1791,"nodeType":"StructuredDocumentation","src":"2919:86:13","text":" @dev Returns an `StringSlot` with member `value` located at `slot`."},"id":1801,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3019:13:13","nodeType":"FunctionDefinition","parameters":{"id":1794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1793,"mutability":"mutable","name":"slot","nameLocation":"3041:4:13","nodeType":"VariableDeclaration","scope":1801,"src":"3033:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1792,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3033:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3032:14:13"},"returnParameters":{"id":1798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1797,"mutability":"mutable","name":"r","nameLocation":"3089:1:13","nodeType":"VariableDeclaration","scope":1801,"src":"3070:20:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1743_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":1796,"nodeType":"UserDefinedTypeName","pathNode":{"id":1795,"name":"StringSlot","nameLocations":["3070:10:13"],"nodeType":"IdentifierPath","referencedDeclaration":1743,"src":"3070:10:13"},"referencedDeclaration":1743,"src":"3070:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1743_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3069:22:13"},"scope":1835,"src":"3010:188:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1811,"nodeType":"Block","src":"3400:112:13","statements":[{"AST":{"nodeType":"YulBlock","src":"3462:44:13","statements":[{"nodeType":"YulAssignment","src":"3476:20:13","value":{"name":"store.slot","nodeType":"YulIdentifier","src":"3486:10:13"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3476:6:13"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1808,"isOffset":false,"isSlot":true,"src":"3476:6:13","suffix":"slot","valueSize":1},{"declaration":1804,"isOffset":false,"isSlot":true,"src":"3486:10:13","suffix":"slot","valueSize":1}],"id":1810,"nodeType":"InlineAssembly","src":"3453:53:13"}]},"documentation":{"id":1802,"nodeType":"StructuredDocumentation","src":"3204:101:13","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":1812,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3319:13:13","nodeType":"FunctionDefinition","parameters":{"id":1805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1804,"mutability":"mutable","name":"store","nameLocation":"3348:5:13","nodeType":"VariableDeclaration","scope":1812,"src":"3333:20:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":1803,"name":"string","nodeType":"ElementaryTypeName","src":"3333:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3332:22:13"},"returnParameters":{"id":1809,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1808,"mutability":"mutable","name":"r","nameLocation":"3397:1:13","nodeType":"VariableDeclaration","scope":1812,"src":"3378:20:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1743_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":1807,"nodeType":"UserDefinedTypeName","pathNode":{"id":1806,"name":"StringSlot","nameLocations":["3378:10:13"],"nodeType":"IdentifierPath","referencedDeclaration":1743,"src":"3378:10:13"},"referencedDeclaration":1743,"src":"3378:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1743_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3377:22:13"},"scope":1835,"src":"3310:202:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1822,"nodeType":"Block","src":"3688:106:13","statements":[{"AST":{"nodeType":"YulBlock","src":"3750:38:13","statements":[{"nodeType":"YulAssignment","src":"3764:14:13","value":{"name":"slot","nodeType":"YulIdentifier","src":"3774:4:13"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3764:6:13"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1819,"isOffset":false,"isSlot":true,"src":"3764:6:13","suffix":"slot","valueSize":1},{"declaration":1815,"isOffset":false,"isSlot":false,"src":"3774:4:13","valueSize":1}],"id":1821,"nodeType":"InlineAssembly","src":"3741:47:13"}]},"documentation":{"id":1813,"nodeType":"StructuredDocumentation","src":"3518:85:13","text":" @dev Returns an `BytesSlot` with member `value` located at `slot`."},"id":1823,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3617:12:13","nodeType":"FunctionDefinition","parameters":{"id":1816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1815,"mutability":"mutable","name":"slot","nameLocation":"3638:4:13","nodeType":"VariableDeclaration","scope":1823,"src":"3630:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1814,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3630:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3629:14:13"},"returnParameters":{"id":1820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1819,"mutability":"mutable","name":"r","nameLocation":"3685:1:13","nodeType":"VariableDeclaration","scope":1823,"src":"3667:19:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$1746_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":1818,"nodeType":"UserDefinedTypeName","pathNode":{"id":1817,"name":"BytesSlot","nameLocations":["3667:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":1746,"src":"3667:9:13"},"referencedDeclaration":1746,"src":"3667:9:13","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$1746_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3666:21:13"},"scope":1835,"src":"3608:186:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1833,"nodeType":"Block","src":"3991:112:13","statements":[{"AST":{"nodeType":"YulBlock","src":"4053:44:13","statements":[{"nodeType":"YulAssignment","src":"4067:20:13","value":{"name":"store.slot","nodeType":"YulIdentifier","src":"4077:10:13"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"4067:6:13"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1830,"isOffset":false,"isSlot":true,"src":"4067:6:13","suffix":"slot","valueSize":1},{"declaration":1826,"isOffset":false,"isSlot":true,"src":"4077:10:13","suffix":"slot","valueSize":1}],"id":1832,"nodeType":"InlineAssembly","src":"4044:53:13"}]},"documentation":{"id":1824,"nodeType":"StructuredDocumentation","src":"3800:99:13","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":1834,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3913:12:13","nodeType":"FunctionDefinition","parameters":{"id":1827,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1826,"mutability":"mutable","name":"store","nameLocation":"3940:5:13","nodeType":"VariableDeclaration","scope":1834,"src":"3926:19:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1825,"name":"bytes","nodeType":"ElementaryTypeName","src":"3926:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3925:21:13"},"returnParameters":{"id":1831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1830,"mutability":"mutable","name":"r","nameLocation":"3988:1:13","nodeType":"VariableDeclaration","scope":1834,"src":"3970:19:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$1746_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":1829,"nodeType":"UserDefinedTypeName","pathNode":{"id":1828,"name":"BytesSlot","nameLocations":["3970:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":1746,"src":"3970:9:13"},"referencedDeclaration":1746,"src":"3970:9:13","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$1746_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3969:21:13"},"scope":1835,"src":"3904:199:13","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1836,"src":"1420:2685:13","usedErrors":[]}],"src":"193:3913:13"},"id":13},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[3296],"SignedMath":[3401],"Strings":[2064]},"id":2065,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1837,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:14"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":1838,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2065,"sourceUnit":3297,"src":"126:25:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":1839,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2065,"sourceUnit":3402,"src":"152:31:14","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":1840,"nodeType":"StructuredDocumentation","src":"185:34:14","text":" @dev String operations."},"fullyImplemented":true,"id":2064,"linearizedBaseContracts":[2064],"name":"Strings","nameLocation":"228:7:14","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1843,"mutability":"constant","name":"_SYMBOLS","nameLocation":"267:8:14","nodeType":"VariableDeclaration","scope":2064,"src":"242:54:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1841,"name":"bytes16","nodeType":"ElementaryTypeName","src":"242:7:14","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"278:18:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1846,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"325:15:14","nodeType":"VariableDeclaration","scope":2064,"src":"302:43:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1844,"name":"uint8","nodeType":"ElementaryTypeName","src":"302:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"343:2:14","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":1893,"nodeType":"Block","src":"518:625:14","statements":[{"id":1892,"nodeType":"UncheckedBlock","src":"528:609:14","statements":[{"assignments":[1855],"declarations":[{"constant":false,"id":1855,"mutability":"mutable","name":"length","nameLocation":"560:6:14","nodeType":"VariableDeclaration","scope":1892,"src":"552:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1854,"name":"uint256","nodeType":"ElementaryTypeName","src":"552:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1862,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1858,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1849,"src":"580:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1856,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3296,"src":"569:4:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3296_$","typeString":"type(library Math)"}},"id":1857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"574:5:14","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":3133,"src":"569:10:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"569:17:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"589:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"569:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"552:38:14"},{"assignments":[1864],"declarations":[{"constant":false,"id":1864,"mutability":"mutable","name":"buffer","nameLocation":"618:6:14","nodeType":"VariableDeclaration","scope":1892,"src":"604:20:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1863,"name":"string","nodeType":"ElementaryTypeName","src":"604:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1869,"initialValue":{"arguments":[{"id":1867,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"638:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1866,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"627:10:14","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1865,"name":"string","nodeType":"ElementaryTypeName","src":"631:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1868,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"627:18:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"604:41:14"},{"assignments":[1871],"declarations":[{"constant":false,"id":1871,"mutability":"mutable","name":"ptr","nameLocation":"667:3:14","nodeType":"VariableDeclaration","scope":1892,"src":"659:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1870,"name":"uint256","nodeType":"ElementaryTypeName","src":"659:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1872,"nodeType":"VariableDeclarationStatement","src":"659:11:14"},{"AST":{"nodeType":"YulBlock","src":"740:67:14","statements":[{"nodeType":"YulAssignment","src":"758:35:14","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"769:6:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"781:2:14","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"785:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"777:3:14"},"nodeType":"YulFunctionCall","src":"777:15:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"765:3:14"},"nodeType":"YulFunctionCall","src":"765:28:14"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"758:3:14"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1864,"isOffset":false,"isSlot":false,"src":"769:6:14","valueSize":1},{"declaration":1855,"isOffset":false,"isSlot":false,"src":"785:6:14","valueSize":1},{"declaration":1871,"isOffset":false,"isSlot":false,"src":"758:3:14","valueSize":1}],"id":1873,"nodeType":"InlineAssembly","src":"731:76:14"},{"body":{"id":1888,"nodeType":"Block","src":"833:267:14","statements":[{"expression":{"id":1876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"851:5:14","subExpression":{"id":1875,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1871,"src":"851:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1877,"nodeType":"ExpressionStatement","src":"851:5:14"},{"AST":{"nodeType":"YulBlock","src":"934:84:14","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"964:3:14"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"978:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"985:2:14","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"974:3:14"},"nodeType":"YulFunctionCall","src":"974:14:14"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"990:8:14"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"969:4:14"},"nodeType":"YulFunctionCall","src":"969:30:14"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"956:7:14"},"nodeType":"YulFunctionCall","src":"956:44:14"},"nodeType":"YulExpressionStatement","src":"956:44:14"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1843,"isOffset":false,"isSlot":false,"src":"990:8:14","valueSize":1},{"declaration":1871,"isOffset":false,"isSlot":false,"src":"964:3:14","valueSize":1},{"declaration":1849,"isOffset":false,"isSlot":false,"src":"978:5:14","valueSize":1}],"id":1878,"nodeType":"InlineAssembly","src":"925:93:14"},{"expression":{"id":1881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1879,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1849,"src":"1035:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1035:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1882,"nodeType":"ExpressionStatement","src":"1035:11:14"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1883,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1849,"src":"1068:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1077:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1068:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1887,"nodeType":"IfStatement","src":"1064:21:14","trueBody":{"id":1886,"nodeType":"Break","src":"1080:5:14"}}]},"condition":{"hexValue":"74727565","id":1874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"827:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1889,"nodeType":"WhileStatement","src":"820:280:14"},{"expression":{"id":1890,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"1120:6:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1853,"id":1891,"nodeType":"Return","src":"1113:13:14"}]}]},"documentation":{"id":1847,"nodeType":"StructuredDocumentation","src":"352:90:14","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1894,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"456:8:14","nodeType":"FunctionDefinition","parameters":{"id":1850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1849,"mutability":"mutable","name":"value","nameLocation":"473:5:14","nodeType":"VariableDeclaration","scope":1894,"src":"465:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1848,"name":"uint256","nodeType":"ElementaryTypeName","src":"465:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"464:15:14"},"returnParameters":{"id":1853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1852,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1894,"src":"503:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1851,"name":"string","nodeType":"ElementaryTypeName","src":"503:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"502:15:14"},"scope":2064,"src":"447:696:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1921,"nodeType":"Block","src":"1313:103:14","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1906,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1897,"src":"1354:5:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1362:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1354:9:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":1910,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1372:2:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":1911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1354:20:14","trueExpression":{"hexValue":"2d","id":1909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1366:3:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":1915,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1897,"src":"1400:5:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":1913,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3401,"src":"1385:10:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$3401_$","typeString":"type(library SignedMath)"}},"id":1914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1396:3:14","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":3400,"src":"1385:14:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":1916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1385:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1912,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[1894,1922],"referencedDeclaration":1894,"src":"1376:8:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1376:31:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1904,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1337:3:14","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1905,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1341:12:14","memberName":"encodePacked","nodeType":"MemberAccess","src":"1337:16:14","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1337:71:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1903,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1330:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1902,"name":"string","nodeType":"ElementaryTypeName","src":"1330:6:14","typeDescriptions":{}}},"id":1919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1330:79:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1901,"id":1920,"nodeType":"Return","src":"1323:86:14"}]},"documentation":{"id":1895,"nodeType":"StructuredDocumentation","src":"1149:89:14","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":1922,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1252:8:14","nodeType":"FunctionDefinition","parameters":{"id":1898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1897,"mutability":"mutable","name":"value","nameLocation":"1268:5:14","nodeType":"VariableDeclaration","scope":1922,"src":"1261:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1896,"name":"int256","nodeType":"ElementaryTypeName","src":"1261:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1260:14:14"},"returnParameters":{"id":1901,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1900,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1922,"src":"1298:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1899,"name":"string","nodeType":"ElementaryTypeName","src":"1298:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1297:15:14"},"scope":2064,"src":"1243:173:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1941,"nodeType":"Block","src":"1595:100:14","statements":[{"id":1940,"nodeType":"UncheckedBlock","src":"1605:84:14","statements":[{"expression":{"arguments":[{"id":1931,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1925,"src":"1648:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1934,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1925,"src":"1667:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1932,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3296,"src":"1655:4:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3296_$","typeString":"type(library Math)"}},"id":1933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1660:6:14","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":3256,"src":"1655:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1935,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1655:18:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1676:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1655:22:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1930,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1942,2018,2038],"referencedDeclaration":2018,"src":"1636:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1938,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1636:42:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1929,"id":1939,"nodeType":"Return","src":"1629:49:14"}]}]},"documentation":{"id":1923,"nodeType":"StructuredDocumentation","src":"1422:94:14","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1942,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1530:11:14","nodeType":"FunctionDefinition","parameters":{"id":1926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1925,"mutability":"mutable","name":"value","nameLocation":"1550:5:14","nodeType":"VariableDeclaration","scope":1942,"src":"1542:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1924,"name":"uint256","nodeType":"ElementaryTypeName","src":"1542:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1541:15:14"},"returnParameters":{"id":1929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1928,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1942,"src":"1580:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1927,"name":"string","nodeType":"ElementaryTypeName","src":"1580:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1579:15:14"},"scope":2064,"src":"1521:174:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2017,"nodeType":"Block","src":"1908:347:14","statements":[{"assignments":[1953],"declarations":[{"constant":false,"id":1953,"mutability":"mutable","name":"buffer","nameLocation":"1931:6:14","nodeType":"VariableDeclaration","scope":2017,"src":"1918:19:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1952,"name":"bytes","nodeType":"ElementaryTypeName","src":"1918:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1962,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1950:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1957,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1947,"src":"1954:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1950:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1963:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1950:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1955,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1940:9:14","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1954,"name":"bytes","nodeType":"ElementaryTypeName","src":"1944:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1940:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1918:47:14"},{"expression":{"id":1967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1963,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"1975:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1965,"indexExpression":{"hexValue":"30","id":1964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1982:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1975:9:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1966,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1987:3:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1975:15:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1968,"nodeType":"ExpressionStatement","src":"1975:15:14"},{"expression":{"id":1973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1969,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"2000:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1971,"indexExpression":{"hexValue":"31","id":1970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2007:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2000:9:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2012:3:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2000:15:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1974,"nodeType":"ExpressionStatement","src":"2000:15:14"},{"body":{"id":2003,"nodeType":"Block","src":"2070:83:14","statements":[{"expression":{"id":1997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1989,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"2084:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1991,"indexExpression":{"id":1990,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1976,"src":"2091:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2084:9:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1992,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1843,"src":"2096:8:14","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1996,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1993,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1945,"src":"2105:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2113:3:14","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2105:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2096:21:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2084:33:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1998,"nodeType":"ExpressionStatement","src":"2084:33:14"},{"expression":{"id":2001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1999,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1945,"src":"2131:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2141:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2131:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2002,"nodeType":"ExpressionStatement","src":"2131:11:14"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1983,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1976,"src":"2058:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1984,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2062:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2058:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2004,"initializationExpression":{"assignments":[1976],"declarations":[{"constant":false,"id":1976,"mutability":"mutable","name":"i","nameLocation":"2038:1:14","nodeType":"VariableDeclaration","scope":2004,"src":"2030:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1975,"name":"uint256","nodeType":"ElementaryTypeName","src":"2030:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1982,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2042:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1978,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1947,"src":"2046:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2042:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2055:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2042:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2030:26:14"},"loopExpression":{"expression":{"id":1987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2065:3:14","subExpression":{"id":1986,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1976,"src":"2067:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1988,"nodeType":"ExpressionStatement","src":"2065:3:14"},"nodeType":"ForStatement","src":"2025:128:14"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2006,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1945,"src":"2170:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2170:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":2009,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2182:34:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":2005,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2162:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2010,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2162:55:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2011,"nodeType":"ExpressionStatement","src":"2162:55:14"},{"expression":{"arguments":[{"id":2014,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"2241:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2013,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2234:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2012,"name":"string","nodeType":"ElementaryTypeName","src":"2234:6:14","typeDescriptions":{}}},"id":2015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2234:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1951,"id":2016,"nodeType":"Return","src":"2227:21:14"}]},"documentation":{"id":1943,"nodeType":"StructuredDocumentation","src":"1701:112:14","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":2018,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1827:11:14","nodeType":"FunctionDefinition","parameters":{"id":1948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1945,"mutability":"mutable","name":"value","nameLocation":"1847:5:14","nodeType":"VariableDeclaration","scope":2018,"src":"1839:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1944,"name":"uint256","nodeType":"ElementaryTypeName","src":"1839:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1947,"mutability":"mutable","name":"length","nameLocation":"1862:6:14","nodeType":"VariableDeclaration","scope":2018,"src":"1854:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1946,"name":"uint256","nodeType":"ElementaryTypeName","src":"1854:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:31:14"},"returnParameters":{"id":1951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1950,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2018,"src":"1893:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1949,"name":"string","nodeType":"ElementaryTypeName","src":"1893:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1892:15:14"},"scope":2064,"src":"1818:437:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2037,"nodeType":"Block","src":"2480:76:14","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":2031,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2021,"src":"2525:4:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2030,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2517:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2029,"name":"uint160","nodeType":"ElementaryTypeName","src":"2517:7:14","typeDescriptions":{}}},"id":2032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2517:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2028,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2027,"name":"uint256","nodeType":"ElementaryTypeName","src":"2509:7:14","typeDescriptions":{}}},"id":2033,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:22:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2034,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1846,"src":"2533:15:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2026,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1942,2018,2038],"referencedDeclaration":2018,"src":"2497:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2497:52:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2025,"id":2036,"nodeType":"Return","src":"2490:59:14"}]},"documentation":{"id":2019,"nodeType":"StructuredDocumentation","src":"2261:141:14","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":2038,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2416:11:14","nodeType":"FunctionDefinition","parameters":{"id":2022,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2021,"mutability":"mutable","name":"addr","nameLocation":"2436:4:14","nodeType":"VariableDeclaration","scope":2038,"src":"2428:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2020,"name":"address","nodeType":"ElementaryTypeName","src":"2428:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2427:14:14"},"returnParameters":{"id":2025,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2024,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2038,"src":"2465:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2023,"name":"string","nodeType":"ElementaryTypeName","src":"2465:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2464:15:14"},"scope":2064,"src":"2407:149:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2062,"nodeType":"Block","src":"2711:66:14","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":2051,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2041,"src":"2744:1:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2050,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2738:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2049,"name":"bytes","nodeType":"ElementaryTypeName","src":"2738:5:14","typeDescriptions":{}}},"id":2052,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2738:8:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2048,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2728:9:14","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:19:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":2057,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"2767:1:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2056,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2761:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2055,"name":"bytes","nodeType":"ElementaryTypeName","src":"2761:5:14","typeDescriptions":{}}},"id":2058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2761:8:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2054,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2751:9:14","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2751:19:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2728:42:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2047,"id":2061,"nodeType":"Return","src":"2721:49:14"}]},"documentation":{"id":2039,"nodeType":"StructuredDocumentation","src":"2562:66:14","text":" @dev Returns true if the two strings are equal."},"id":2063,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2642:5:14","nodeType":"FunctionDefinition","parameters":{"id":2044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2041,"mutability":"mutable","name":"a","nameLocation":"2662:1:14","nodeType":"VariableDeclaration","scope":2063,"src":"2648:15:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2040,"name":"string","nodeType":"ElementaryTypeName","src":"2648:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2043,"mutability":"mutable","name":"b","nameLocation":"2679:1:14","nodeType":"VariableDeclaration","scope":2063,"src":"2665:15:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2042,"name":"string","nodeType":"ElementaryTypeName","src":"2665:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2647:34:14"},"returnParameters":{"id":2047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2046,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2063,"src":"2705:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2045,"name":"bool","nodeType":"ElementaryTypeName","src":"2705:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2704:6:14"},"scope":2064,"src":"2633:144:14","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2065,"src":"220:2559:14","usedErrors":[]}],"src":"101:2679:14"},"id":14},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","exportedSymbols":{"ECDSA":[2430],"Math":[3296],"SignedMath":[3401],"Strings":[2064]},"id":2431,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2066,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:15"},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../Strings.sol","id":2067,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2431,"sourceUnit":2065,"src":"137:24:15","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSA","contractDependencies":[],"contractKind":"library","documentation":{"id":2068,"nodeType":"StructuredDocumentation","src":"163:205:15","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":2430,"linearizedBaseContracts":[2430],"name":"ECDSA","nameLocation":"377:5:15","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSA.RecoverError","id":2074,"members":[{"id":2069,"name":"NoError","nameLocation":"417:7:15","nodeType":"EnumValue","src":"417:7:15"},{"id":2070,"name":"InvalidSignature","nameLocation":"434:16:15","nodeType":"EnumValue","src":"434:16:15"},{"id":2071,"name":"InvalidSignatureLength","nameLocation":"460:22:15","nodeType":"EnumValue","src":"460:22:15"},{"id":2072,"name":"InvalidSignatureS","nameLocation":"492:17:15","nodeType":"EnumValue","src":"492:17:15"},{"id":2073,"name":"InvalidSignatureV","nameLocation":"519:17:15","nodeType":"EnumValue","src":"519:17:15"}],"name":"RecoverError","nameLocation":"394:12:15","nodeType":"EnumDefinition","src":"389:175:15"},{"body":{"id":2117,"nodeType":"Block","src":"624:457:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"},"id":2083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2080,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2077,"src":"638:5:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2081,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2074,"src":"647:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2074_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2082,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"660:7:15","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":2069,"src":"647:20:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"}},"src":"638:29:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"},"id":2089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2086,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2077,"src":"734:5:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2087,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2074,"src":"743:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2074_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2088,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"756:16:15","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":2070,"src":"743:29:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"}},"src":"734:38:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"},"id":2098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2095,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2077,"src":"843:5:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2096,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2074,"src":"852:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2074_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2097,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"865:22:15","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":2071,"src":"852:35:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"}},"src":"843:44:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"},"id":2107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2104,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2077,"src":"965:5:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2105,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2074,"src":"974:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2074_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2106,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"987:17:15","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":2072,"src":"974:30:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"}},"src":"965:39:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2113,"nodeType":"IfStatement","src":"961:114:15","trueBody":{"id":2112,"nodeType":"Block","src":"1006:69:15","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c7565","id":2109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1027:36:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""},"value":"ECDSA: invalid signature 's' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""}],"id":2108,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1020:6:15","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1020:44:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2111,"nodeType":"ExpressionStatement","src":"1020:44:15"}]}},"id":2114,"nodeType":"IfStatement","src":"839:236:15","trueBody":{"id":2103,"nodeType":"Block","src":"889:66:15","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","id":2100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"910:33:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""},"value":"ECDSA: invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""}],"id":2099,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"903:6:15","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2101,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"903:41:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2102,"nodeType":"ExpressionStatement","src":"903:41:15"}]}},"id":2115,"nodeType":"IfStatement","src":"730:345:15","trueBody":{"id":2094,"nodeType":"Block","src":"774:59:15","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","id":2091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"795:26:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""},"value":"ECDSA: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""}],"id":2090,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"788:6:15","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2092,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"788:34:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2093,"nodeType":"ExpressionStatement","src":"788:34:15"}]}},"id":2116,"nodeType":"IfStatement","src":"634:441:15","trueBody":{"id":2085,"nodeType":"Block","src":"669:55:15","statements":[{"functionReturnParameters":2079,"id":2084,"nodeType":"Return","src":"683:7:15"}]}}]},"id":2118,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"579:11:15","nodeType":"FunctionDefinition","parameters":{"id":2078,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2077,"mutability":"mutable","name":"error","nameLocation":"604:5:15","nodeType":"VariableDeclaration","scope":2118,"src":"591:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2076,"nodeType":"UserDefinedTypeName","pathNode":{"id":2075,"name":"RecoverError","nameLocations":["591:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":2074,"src":"591:12:15"},"referencedDeclaration":2074,"src":"591:12:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"590:20:15"},"returnParameters":{"id":2079,"nodeType":"ParameterList","parameters":[],"src":"624:0:15"},"scope":2430,"src":"570:511:15","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":2163,"nodeType":"Block","src":"2249:626:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2131,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2123,"src":"2263:9:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2273:6:15","memberName":"length","nodeType":"MemberAccess","src":"2263:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":2133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2283:2:15","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2263:22:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2161,"nodeType":"Block","src":"2788:81:15","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":2155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2818:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2154,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2810:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2153,"name":"address","nodeType":"ElementaryTypeName","src":"2810:7:15","typeDescriptions":{}}},"id":2156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2810:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2157,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2074,"src":"2822:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2074_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2158,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2835:22:15","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":2071,"src":"2822:35:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"}}],"id":2159,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2809:49:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2074_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":2130,"id":2160,"nodeType":"Return","src":"2802:56:15"}]},"id":2162,"nodeType":"IfStatement","src":"2259:610:15","trueBody":{"id":2152,"nodeType":"Block","src":"2287:495:15","statements":[{"assignments":[2136],"declarations":[{"constant":false,"id":2136,"mutability":"mutable","name":"r","nameLocation":"2309:1:15","nodeType":"VariableDeclaration","scope":2152,"src":"2301:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2135,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2301:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2137,"nodeType":"VariableDeclarationStatement","src":"2301:9:15"},{"assignments":[2139],"declarations":[{"constant":false,"id":2139,"mutability":"mutable","name":"s","nameLocation":"2332:1:15","nodeType":"VariableDeclaration","scope":2152,"src":"2324:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2138,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2324:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2140,"nodeType":"VariableDeclarationStatement","src":"2324:9:15"},{"assignments":[2142],"declarations":[{"constant":false,"id":2142,"mutability":"mutable","name":"v","nameLocation":"2353:1:15","nodeType":"VariableDeclaration","scope":2152,"src":"2347:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2141,"name":"uint8","nodeType":"ElementaryTypeName","src":"2347:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":2143,"nodeType":"VariableDeclarationStatement","src":"2347:7:15"},{"AST":{"nodeType":"YulBlock","src":"2555:171:15","statements":[{"nodeType":"YulAssignment","src":"2573:32:15","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2588:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2599:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2584:3:15"},"nodeType":"YulFunctionCall","src":"2584:20:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2578:5:15"},"nodeType":"YulFunctionCall","src":"2578:27:15"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2573:1:15"}]},{"nodeType":"YulAssignment","src":"2622:32:15","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2637:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2648:4:15","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2633:3:15"},"nodeType":"YulFunctionCall","src":"2633:20:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2627:5:15"},"nodeType":"YulFunctionCall","src":"2627:27:15"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"2622:1:15"}]},{"nodeType":"YulAssignment","src":"2671:41:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2681:1:15","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2694:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2705:4:15","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2690:3:15"},"nodeType":"YulFunctionCall","src":"2690:20:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2684:5:15"},"nodeType":"YulFunctionCall","src":"2684:27:15"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"2676:4:15"},"nodeType":"YulFunctionCall","src":"2676:36:15"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"2671:1:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2136,"isOffset":false,"isSlot":false,"src":"2573:1:15","valueSize":1},{"declaration":2139,"isOffset":false,"isSlot":false,"src":"2622:1:15","valueSize":1},{"declaration":2123,"isOffset":false,"isSlot":false,"src":"2588:9:15","valueSize":1},{"declaration":2123,"isOffset":false,"isSlot":false,"src":"2637:9:15","valueSize":1},{"declaration":2123,"isOffset":false,"isSlot":false,"src":"2694:9:15","valueSize":1},{"declaration":2142,"isOffset":false,"isSlot":false,"src":"2671:1:15","valueSize":1}],"id":2144,"nodeType":"InlineAssembly","src":"2546:180:15"},{"expression":{"arguments":[{"id":2146,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2121,"src":"2757:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2147,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2142,"src":"2763:1:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2148,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2136,"src":"2766:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2149,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"2769:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2145,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2164,2238,2332],"referencedDeclaration":2332,"src":"2746:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2074_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":2150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2746:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2074_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":2130,"id":2151,"nodeType":"Return","src":"2739:32:15"}]}}]},"documentation":{"id":2119,"nodeType":"StructuredDocumentation","src":"1087:1053:15","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"},"id":2164,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2154:10:15","nodeType":"FunctionDefinition","parameters":{"id":2124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2121,"mutability":"mutable","name":"hash","nameLocation":"2173:4:15","nodeType":"VariableDeclaration","scope":2164,"src":"2165:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2120,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2165:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2123,"mutability":"mutable","name":"signature","nameLocation":"2192:9:15","nodeType":"VariableDeclaration","scope":2164,"src":"2179:22:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2122,"name":"bytes","nodeType":"ElementaryTypeName","src":"2179:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2164:38:15"},"returnParameters":{"id":2130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2126,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2164,"src":"2226:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2125,"name":"address","nodeType":"ElementaryTypeName","src":"2226:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2129,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2164,"src":"2235:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2128,"nodeType":"UserDefinedTypeName","pathNode":{"id":2127,"name":"RecoverError","nameLocations":["2235:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":2074,"src":"2235:12:15"},"referencedDeclaration":2074,"src":"2235:12:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"2225:23:15"},"scope":2430,"src":"2145:730:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2190,"nodeType":"Block","src":"3748:140:15","statements":[{"assignments":[2175,2178],"declarations":[{"constant":false,"id":2175,"mutability":"mutable","name":"recovered","nameLocation":"3767:9:15","nodeType":"VariableDeclaration","scope":2190,"src":"3759:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2174,"name":"address","nodeType":"ElementaryTypeName","src":"3759:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2178,"mutability":"mutable","name":"error","nameLocation":"3791:5:15","nodeType":"VariableDeclaration","scope":2190,"src":"3778:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2177,"nodeType":"UserDefinedTypeName","pathNode":{"id":2176,"name":"RecoverError","nameLocations":["3778:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":2074,"src":"3778:12:15"},"referencedDeclaration":2074,"src":"3778:12:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":2183,"initialValue":{"arguments":[{"id":2180,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"3811:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2181,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2169,"src":"3817:9:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2179,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2164,2238,2332],"referencedDeclaration":2164,"src":"3800:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$2074_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError)"}},"id":2182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3800:27:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2074_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"3758:69:15"},{"expression":{"arguments":[{"id":2185,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2178,"src":"3849:5:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"}],"id":2184,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"3837:11:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$2074_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":2186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3837:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2187,"nodeType":"ExpressionStatement","src":"3837:18:15"},{"expression":{"id":2188,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2175,"src":"3872:9:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2173,"id":2189,"nodeType":"Return","src":"3865:16:15"}]},"documentation":{"id":2165,"nodeType":"StructuredDocumentation","src":"2881:775:15","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."},"id":2191,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3670:7:15","nodeType":"FunctionDefinition","parameters":{"id":2170,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2167,"mutability":"mutable","name":"hash","nameLocation":"3686:4:15","nodeType":"VariableDeclaration","scope":2191,"src":"3678:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2166,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3678:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2169,"mutability":"mutable","name":"signature","nameLocation":"3705:9:15","nodeType":"VariableDeclaration","scope":2191,"src":"3692:22:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2168,"name":"bytes","nodeType":"ElementaryTypeName","src":"3692:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3677:38:15"},"returnParameters":{"id":2173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2172,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2191,"src":"3739:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2171,"name":"address","nodeType":"ElementaryTypeName","src":"3739:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3738:9:15"},"scope":2430,"src":"3661:227:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2237,"nodeType":"Block","src":"4245:203:15","statements":[{"assignments":[2207],"declarations":[{"constant":false,"id":2207,"mutability":"mutable","name":"s","nameLocation":"4263:1:15","nodeType":"VariableDeclaration","scope":2237,"src":"4255:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2206,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4255:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2214,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2208,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2198,"src":"4267:2:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":2211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4280:66:15","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":2210,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4272:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2209,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4272:7:15","typeDescriptions":{}}},"id":2212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:75:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4267:80:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4255:92:15"},{"assignments":[2216],"declarations":[{"constant":false,"id":2216,"mutability":"mutable","name":"v","nameLocation":"4363:1:15","nodeType":"VariableDeclaration","scope":2237,"src":"4357:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2215,"name":"uint8","nodeType":"ElementaryTypeName","src":"4357:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":2229,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2221,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2198,"src":"4382:2:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2220,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4374:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2219,"name":"uint256","nodeType":"ElementaryTypeName","src":"4374:7:15","typeDescriptions":{}}},"id":2222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4374:11:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":2223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4389:3:15","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4374:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2225,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4373:20:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":2226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4396:2:15","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4373:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2218,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4367:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2217,"name":"uint8","nodeType":"ElementaryTypeName","src":"4367:5:15","typeDescriptions":{}}},"id":2228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4367:32:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4357:42:15"},{"expression":{"arguments":[{"id":2231,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2194,"src":"4427:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2232,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2216,"src":"4433:1:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2233,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2196,"src":"4436:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2234,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2207,"src":"4439:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2230,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2164,2238,2332],"referencedDeclaration":2332,"src":"4416:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2074_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":2235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4416:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2074_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":2205,"id":2236,"nodeType":"Return","src":"4409:32:15"}]},"documentation":{"id":2192,"nodeType":"StructuredDocumentation","src":"3894:243:15","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"},"id":2238,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4151:10:15","nodeType":"FunctionDefinition","parameters":{"id":2199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2194,"mutability":"mutable","name":"hash","nameLocation":"4170:4:15","nodeType":"VariableDeclaration","scope":2238,"src":"4162:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2193,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4162:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2196,"mutability":"mutable","name":"r","nameLocation":"4184:1:15","nodeType":"VariableDeclaration","scope":2238,"src":"4176:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2195,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4176:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2198,"mutability":"mutable","name":"vs","nameLocation":"4195:2:15","nodeType":"VariableDeclaration","scope":2238,"src":"4187:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2197,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4187:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4161:37:15"},"returnParameters":{"id":2205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2201,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2238,"src":"4222:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2200,"name":"address","nodeType":"ElementaryTypeName","src":"4222:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2204,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2238,"src":"4231:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2203,"nodeType":"UserDefinedTypeName","pathNode":{"id":2202,"name":"RecoverError","nameLocations":["4231:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":2074,"src":"4231:12:15"},"referencedDeclaration":2074,"src":"4231:12:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"4221:23:15"},"scope":2430,"src":"4142:306:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2267,"nodeType":"Block","src":"4699:136:15","statements":[{"assignments":[2251,2254],"declarations":[{"constant":false,"id":2251,"mutability":"mutable","name":"recovered","nameLocation":"4718:9:15","nodeType":"VariableDeclaration","scope":2267,"src":"4710:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2250,"name":"address","nodeType":"ElementaryTypeName","src":"4710:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2254,"mutability":"mutable","name":"error","nameLocation":"4742:5:15","nodeType":"VariableDeclaration","scope":2267,"src":"4729:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2253,"nodeType":"UserDefinedTypeName","pathNode":{"id":2252,"name":"RecoverError","nameLocations":["4729:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":2074,"src":"4729:12:15"},"referencedDeclaration":2074,"src":"4729:12:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":2260,"initialValue":{"arguments":[{"id":2256,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2241,"src":"4762:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2257,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"4768:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2258,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2245,"src":"4771:2:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2255,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2164,2238,2332],"referencedDeclaration":2238,"src":"4751:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2074_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":2259,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4751:23:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2074_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"4709:65:15"},{"expression":{"arguments":[{"id":2262,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"4796:5:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"}],"id":2261,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"4784:11:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$2074_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":2263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4784:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2264,"nodeType":"ExpressionStatement","src":"4784:18:15"},{"expression":{"id":2265,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2251,"src":"4819:9:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2249,"id":2266,"nodeType":"Return","src":"4812:16:15"}]},"documentation":{"id":2239,"nodeType":"StructuredDocumentation","src":"4454:154:15","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"},"id":2268,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4622:7:15","nodeType":"FunctionDefinition","parameters":{"id":2246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2241,"mutability":"mutable","name":"hash","nameLocation":"4638:4:15","nodeType":"VariableDeclaration","scope":2268,"src":"4630:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2240,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4630:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2243,"mutability":"mutable","name":"r","nameLocation":"4652:1:15","nodeType":"VariableDeclaration","scope":2268,"src":"4644:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2242,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4644:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2245,"mutability":"mutable","name":"vs","nameLocation":"4663:2:15","nodeType":"VariableDeclaration","scope":2268,"src":"4655:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2244,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4655:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4629:37:15"},"returnParameters":{"id":2249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2248,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2268,"src":"4690:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2247,"name":"address","nodeType":"ElementaryTypeName","src":"4690:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4689:9:15"},"scope":2430,"src":"4613:222:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2331,"nodeType":"Block","src":"5120:1345:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2287,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2277,"src":"6016:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2286,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6008:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2285,"name":"uint256","nodeType":"ElementaryTypeName","src":"6008:7:15","typeDescriptions":{}}},"id":2288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6008:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":2289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6021:66:15","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6008:79:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2300,"nodeType":"IfStatement","src":"6004:161:15","trueBody":{"id":2299,"nodeType":"Block","src":"6089:76:15","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":2293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6119:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2292,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6111:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2291,"name":"address","nodeType":"ElementaryTypeName","src":"6111:7:15","typeDescriptions":{}}},"id":2294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6111:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2295,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2074,"src":"6123:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2074_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2296,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6136:17:15","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":2072,"src":"6123:30:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"}}],"id":2297,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6110:44:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2074_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":2284,"id":2298,"nodeType":"Return","src":"6103:51:15"}]}},{"assignments":[2302],"declarations":[{"constant":false,"id":2302,"mutability":"mutable","name":"signer","nameLocation":"6267:6:15","nodeType":"VariableDeclaration","scope":2331,"src":"6259:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2301,"name":"address","nodeType":"ElementaryTypeName","src":"6259:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2309,"initialValue":{"arguments":[{"id":2304,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2271,"src":"6286:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2305,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2273,"src":"6292:1:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2306,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2275,"src":"6295:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2307,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2277,"src":"6298:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2303,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6276:9:15","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":2308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6276:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6259:41:15"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2310,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"6314:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6332:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2312,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6324:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2311,"name":"address","nodeType":"ElementaryTypeName","src":"6324:7:15","typeDescriptions":{}}},"id":2314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6324:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6314:20:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2325,"nodeType":"IfStatement","src":"6310:101:15","trueBody":{"id":2324,"nodeType":"Block","src":"6336:75:15","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":2318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6366:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2317,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6358:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2316,"name":"address","nodeType":"ElementaryTypeName","src":"6358:7:15","typeDescriptions":{}}},"id":2319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6358:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2320,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2074,"src":"6370:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2074_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2321,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6383:16:15","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":2070,"src":"6370:29:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"}}],"id":2322,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6357:43:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2074_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":2284,"id":2323,"nodeType":"Return","src":"6350:50:15"}]}},{"expression":{"components":[{"id":2326,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"6429:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2327,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2074,"src":"6437:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2074_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2328,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6450:7:15","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":2069,"src":"6437:20:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"}}],"id":2329,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6428:30:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2074_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":2284,"id":2330,"nodeType":"Return","src":"6421:37:15"}]},"documentation":{"id":2269,"nodeType":"StructuredDocumentation","src":"4841:163:15","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"},"id":2332,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5018:10:15","nodeType":"FunctionDefinition","parameters":{"id":2278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2271,"mutability":"mutable","name":"hash","nameLocation":"5037:4:15","nodeType":"VariableDeclaration","scope":2332,"src":"5029:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2270,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5029:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2273,"mutability":"mutable","name":"v","nameLocation":"5049:1:15","nodeType":"VariableDeclaration","scope":2332,"src":"5043:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2272,"name":"uint8","nodeType":"ElementaryTypeName","src":"5043:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2275,"mutability":"mutable","name":"r","nameLocation":"5060:1:15","nodeType":"VariableDeclaration","scope":2332,"src":"5052:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2274,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5052:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2277,"mutability":"mutable","name":"s","nameLocation":"5071:1:15","nodeType":"VariableDeclaration","scope":2332,"src":"5063:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2276,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5063:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5028:45:15"},"returnParameters":{"id":2284,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2280,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2332,"src":"5097:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2279,"name":"address","nodeType":"ElementaryTypeName","src":"5097:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2283,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2332,"src":"5106:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2282,"nodeType":"UserDefinedTypeName","pathNode":{"id":2281,"name":"RecoverError","nameLocations":["5106:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":2074,"src":"5106:12:15"},"referencedDeclaration":2074,"src":"5106:12:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"5096:23:15"},"scope":2430,"src":"5009:1456:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2364,"nodeType":"Block","src":"6692:138:15","statements":[{"assignments":[2347,2350],"declarations":[{"constant":false,"id":2347,"mutability":"mutable","name":"recovered","nameLocation":"6711:9:15","nodeType":"VariableDeclaration","scope":2364,"src":"6703:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2346,"name":"address","nodeType":"ElementaryTypeName","src":"6703:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2350,"mutability":"mutable","name":"error","nameLocation":"6735:5:15","nodeType":"VariableDeclaration","scope":2364,"src":"6722:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2349,"nodeType":"UserDefinedTypeName","pathNode":{"id":2348,"name":"RecoverError","nameLocations":["6722:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":2074,"src":"6722:12:15"},"referencedDeclaration":2074,"src":"6722:12:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":2357,"initialValue":{"arguments":[{"id":2352,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2335,"src":"6755:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2353,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"6761:1:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2354,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2339,"src":"6764:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2355,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2341,"src":"6767:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2351,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2164,2238,2332],"referencedDeclaration":2332,"src":"6744:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2074_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":2356,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6744:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2074_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"6702:67:15"},{"expression":{"arguments":[{"id":2359,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2350,"src":"6791:5:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$2074","typeString":"enum ECDSA.RecoverError"}],"id":2358,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"6779:11:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$2074_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":2360,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6779:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2361,"nodeType":"ExpressionStatement","src":"6779:18:15"},{"expression":{"id":2362,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2347,"src":"6814:9:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2345,"id":2363,"nodeType":"Return","src":"6807:16:15"}]},"documentation":{"id":2333,"nodeType":"StructuredDocumentation","src":"6471:122:15","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":2365,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6607:7:15","nodeType":"FunctionDefinition","parameters":{"id":2342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2335,"mutability":"mutable","name":"hash","nameLocation":"6623:4:15","nodeType":"VariableDeclaration","scope":2365,"src":"6615:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2334,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6615:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2337,"mutability":"mutable","name":"v","nameLocation":"6635:1:15","nodeType":"VariableDeclaration","scope":2365,"src":"6629:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2336,"name":"uint8","nodeType":"ElementaryTypeName","src":"6629:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2339,"mutability":"mutable","name":"r","nameLocation":"6646:1:15","nodeType":"VariableDeclaration","scope":2365,"src":"6638:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2338,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6638:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2341,"mutability":"mutable","name":"s","nameLocation":"6657:1:15","nodeType":"VariableDeclaration","scope":2365,"src":"6649:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2340,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6649:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6614:45:15"},"returnParameters":{"id":2345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2344,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2365,"src":"6683:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2343,"name":"address","nodeType":"ElementaryTypeName","src":"6683:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6682:9:15"},"scope":2430,"src":"6598:232:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2374,"nodeType":"Block","src":"7206:310:15","statements":[{"AST":{"nodeType":"YulBlock","src":"7362:148:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7383:4:15","type":"","value":"0x00"},{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","kind":"string","nodeType":"YulLiteral","src":"7389:34:15","type":"","value":"\u0019Ethereum Signed Message:\n32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7376:6:15"},"nodeType":"YulFunctionCall","src":"7376:48:15"},"nodeType":"YulExpressionStatement","src":"7376:48:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7444:4:15","type":"","value":"0x1c"},{"name":"hash","nodeType":"YulIdentifier","src":"7450:4:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7437:6:15"},"nodeType":"YulFunctionCall","src":"7437:18:15"},"nodeType":"YulExpressionStatement","src":"7437:18:15"},{"nodeType":"YulAssignment","src":"7468:32:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7489:4:15","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"7495:4:15","type":"","value":"0x3c"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"7479:9:15"},"nodeType":"YulFunctionCall","src":"7479:21:15"},"variableNames":[{"name":"message","nodeType":"YulIdentifier","src":"7468:7:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2368,"isOffset":false,"isSlot":false,"src":"7450:4:15","valueSize":1},{"declaration":2371,"isOffset":false,"isSlot":false,"src":"7468:7:15","valueSize":1}],"id":2373,"nodeType":"InlineAssembly","src":"7353:157:15"}]},"documentation":{"id":2366,"nodeType":"StructuredDocumentation","src":"6836:279:15","text":" @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":2375,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7129:22:15","nodeType":"FunctionDefinition","parameters":{"id":2369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2368,"mutability":"mutable","name":"hash","nameLocation":"7160:4:15","nodeType":"VariableDeclaration","scope":2375,"src":"7152:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2367,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7152:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7151:14:15"},"returnParameters":{"id":2372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2371,"mutability":"mutable","name":"message","nameLocation":"7197:7:15","nodeType":"VariableDeclaration","scope":2375,"src":"7189:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2370,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7189:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7188:17:15"},"scope":2430,"src":"7120:396:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2396,"nodeType":"Block","src":"7881:116:15","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":2386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7925:32:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"expression":{"id":2389,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"7976:1:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7978:6:15","memberName":"length","nodeType":"MemberAccess","src":"7976:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2387,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2064,"src":"7959:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$2064_$","typeString":"type(library Strings)"}},"id":2388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7967:8:15","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1894,"src":"7959:16:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":2391,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7959:26:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2392,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"7987:1:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2384,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7908:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2385,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7912:12:15","memberName":"encodePacked","nodeType":"MemberAccess","src":"7908:16:15","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7908:81:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2383,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7898:9:15","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7898:92:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2382,"id":2395,"nodeType":"Return","src":"7891:99:15"}]},"documentation":{"id":2376,"nodeType":"StructuredDocumentation","src":"7522:274:15","text":" @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":2397,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7810:22:15","nodeType":"FunctionDefinition","parameters":{"id":2379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2378,"mutability":"mutable","name":"s","nameLocation":"7846:1:15","nodeType":"VariableDeclaration","scope":2397,"src":"7833:14:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2377,"name":"bytes","nodeType":"ElementaryTypeName","src":"7833:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7832:16:15"},"returnParameters":{"id":2382,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2381,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2397,"src":"7872:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2380,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7872:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7871:9:15"},"scope":2430,"src":"7801:196:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2408,"nodeType":"Block","src":"8443:290:15","statements":[{"AST":{"nodeType":"YulBlock","src":"8505:222:15","statements":[{"nodeType":"YulVariableDeclaration","src":"8519:22:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8536:4:15","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8530:5:15"},"nodeType":"YulFunctionCall","src":"8530:11:15"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"8523:3:15","type":""}]},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8561:3:15"},{"hexValue":"1901","kind":"string","nodeType":"YulLiteral","src":"8566:10:15","type":"","value":"\u0019\u0001"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8554:6:15"},"nodeType":"YulFunctionCall","src":"8554:23:15"},"nodeType":"YulExpressionStatement","src":"8554:23:15"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8601:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"8606:4:15","type":"","value":"0x02"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8597:3:15"},"nodeType":"YulFunctionCall","src":"8597:14:15"},{"name":"domainSeparator","nodeType":"YulIdentifier","src":"8613:15:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8590:6:15"},"nodeType":"YulFunctionCall","src":"8590:39:15"},"nodeType":"YulExpressionStatement","src":"8590:39:15"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8653:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"8658:4:15","type":"","value":"0x22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8649:3:15"},"nodeType":"YulFunctionCall","src":"8649:14:15"},{"name":"structHash","nodeType":"YulIdentifier","src":"8665:10:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8642:6:15"},"nodeType":"YulFunctionCall","src":"8642:34:15"},"nodeType":"YulExpressionStatement","src":"8642:34:15"},{"nodeType":"YulAssignment","src":"8689:28:15","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8707:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"8712:4:15","type":"","value":"0x42"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"8697:9:15"},"nodeType":"YulFunctionCall","src":"8697:20:15"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"8689:4:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2405,"isOffset":false,"isSlot":false,"src":"8689:4:15","valueSize":1},{"declaration":2400,"isOffset":false,"isSlot":false,"src":"8613:15:15","valueSize":1},{"declaration":2402,"isOffset":false,"isSlot":false,"src":"8665:10:15","valueSize":1}],"id":2407,"nodeType":"InlineAssembly","src":"8496:231:15"}]},"documentation":{"id":2398,"nodeType":"StructuredDocumentation","src":"8003:328:15","text":" @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."},"id":2409,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"8345:15:15","nodeType":"FunctionDefinition","parameters":{"id":2403,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2400,"mutability":"mutable","name":"domainSeparator","nameLocation":"8369:15:15","nodeType":"VariableDeclaration","scope":2409,"src":"8361:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2399,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8361:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2402,"mutability":"mutable","name":"structHash","nameLocation":"8394:10:15","nodeType":"VariableDeclaration","scope":2409,"src":"8386:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2401,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8386:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8360:45:15"},"returnParameters":{"id":2406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2405,"mutability":"mutable","name":"data","nameLocation":"8437:4:15","nodeType":"VariableDeclaration","scope":2409,"src":"8429:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2404,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8429:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8428:14:15"},"scope":2430,"src":"8336:397:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2428,"nodeType":"Block","src":"9048:80:15","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1900","id":2422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9092:10:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},"value":"\u0019\u0000"},{"id":2423,"name":"validator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2412,"src":"9104:9:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2424,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2414,"src":"9115:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2420,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9075:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2421,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9079:12:15","memberName":"encodePacked","nodeType":"MemberAccess","src":"9075:16:15","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2425,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9075:45:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2419,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9065:9:15","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9065:56:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2418,"id":2427,"nodeType":"Return","src":"9058:63:15"}]},"documentation":{"id":2410,"nodeType":"StructuredDocumentation","src":"8739:193:15","text":" @dev Returns an Ethereum Signed Data with intended validator, created from a\n `validator` and `data` according to the version 0 of EIP-191.\n See {recover}."},"id":2429,"implemented":true,"kind":"function","modifiers":[],"name":"toDataWithIntendedValidatorHash","nameLocation":"8946:31:15","nodeType":"FunctionDefinition","parameters":{"id":2415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2412,"mutability":"mutable","name":"validator","nameLocation":"8986:9:15","nodeType":"VariableDeclaration","scope":2429,"src":"8978:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2411,"name":"address","nodeType":"ElementaryTypeName","src":"8978:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2414,"mutability":"mutable","name":"data","nameLocation":"9010:4:15","nodeType":"VariableDeclaration","scope":2429,"src":"8997:17:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2413,"name":"bytes","nodeType":"ElementaryTypeName","src":"8997:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8977:38:15"},"returnParameters":{"id":2418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2417,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2429,"src":"9039:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2416,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9039:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9038:9:15"},"scope":2430,"src":"8937:191:15","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2431,"src":"369:8761:15","usedErrors":[]}],"src":"112:9019:15"},"id":15},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[3296]},"id":3297,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2432,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:16"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":2433,"nodeType":"StructuredDocumentation","src":"128:73:16","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":3296,"linearizedBaseContracts":[3296],"name":"Math","nameLocation":"210:4:16","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":2437,"members":[{"id":2434,"name":"Down","nameLocation":"245:4:16","nodeType":"EnumValue","src":"245:4:16"},{"id":2435,"name":"Up","nameLocation":"287:2:16","nodeType":"EnumValue","src":"287:2:16"},{"id":2436,"name":"Zero","nameLocation":"318:4:16","nodeType":"EnumValue","src":"318:4:16"}],"name":"Rounding","nameLocation":"226:8:16","nodeType":"EnumDefinition","src":"221:122:16"},{"body":{"id":2454,"nodeType":"Block","src":"480:37:16","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2447,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2440,"src":"497:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2448,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"501:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2451,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"509:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:16","trueExpression":{"id":2450,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2440,"src":"505:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2446,"id":2453,"nodeType":"Return","src":"490:20:16"}]},"documentation":{"id":2438,"nodeType":"StructuredDocumentation","src":"349:59:16","text":" @dev Returns the largest of two numbers."},"id":2455,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:16","nodeType":"FunctionDefinition","parameters":{"id":2443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2440,"mutability":"mutable","name":"a","nameLocation":"434:1:16","nodeType":"VariableDeclaration","scope":2455,"src":"426:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2439,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2442,"mutability":"mutable","name":"b","nameLocation":"445:1:16","nodeType":"VariableDeclaration","scope":2455,"src":"437:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2441,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:16"},"returnParameters":{"id":2446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2445,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2455,"src":"471:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2444,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:16"},"scope":3296,"src":"413:104:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2472,"nodeType":"Block","src":"655:37:16","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2465,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2458,"src":"672:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2466,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2460,"src":"676:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2469,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2460,"src":"684:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:16","trueExpression":{"id":2468,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2458,"src":"680:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2464,"id":2471,"nodeType":"Return","src":"665:20:16"}]},"documentation":{"id":2456,"nodeType":"StructuredDocumentation","src":"523:60:16","text":" @dev Returns the smallest of two numbers."},"id":2473,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:16","nodeType":"FunctionDefinition","parameters":{"id":2461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2458,"mutability":"mutable","name":"a","nameLocation":"609:1:16","nodeType":"VariableDeclaration","scope":2473,"src":"601:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2457,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2460,"mutability":"mutable","name":"b","nameLocation":"620:1:16","nodeType":"VariableDeclaration","scope":2473,"src":"612:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2459,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:16"},"returnParameters":{"id":2464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2463,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2473,"src":"646:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2462,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:16"},"scope":3296,"src":"588:104:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2495,"nodeType":"Block","src":"876:82:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2483,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2476,"src":"931:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2484,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2478,"src":"935:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2486,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2487,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2476,"src":"941:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2488,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2478,"src":"945:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2490,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":2491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2482,"id":2494,"nodeType":"Return","src":"923:28:16"}]},"documentation":{"id":2474,"nodeType":"StructuredDocumentation","src":"698:102:16","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":2496,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:16","nodeType":"FunctionDefinition","parameters":{"id":2479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2476,"mutability":"mutable","name":"a","nameLocation":"830:1:16","nodeType":"VariableDeclaration","scope":2496,"src":"822:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2475,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2478,"mutability":"mutable","name":"b","nameLocation":"841:1:16","nodeType":"VariableDeclaration","scope":2496,"src":"833:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2477,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:16"},"returnParameters":{"id":2482,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2481,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2496,"src":"867:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2480,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:16"},"scope":3296,"src":"805:153:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2520,"nodeType":"Block","src":"1228:123:16","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2506,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"1316:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2510,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"1330:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2513,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2514,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2501,"src":"1339:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:16","trueExpression":{"hexValue":"30","id":2509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2505,"id":2519,"nodeType":"Return","src":"1309:35:16"}]},"documentation":{"id":2497,"nodeType":"StructuredDocumentation","src":"964:188:16","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":2521,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:16","nodeType":"FunctionDefinition","parameters":{"id":2502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2499,"mutability":"mutable","name":"a","nameLocation":"1182:1:16","nodeType":"VariableDeclaration","scope":2521,"src":"1174:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2498,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2501,"mutability":"mutable","name":"b","nameLocation":"1193:1:16","nodeType":"VariableDeclaration","scope":2521,"src":"1185:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2500,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:16"},"returnParameters":{"id":2505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2504,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2521,"src":"1219:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2503,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:16"},"scope":3296,"src":"1157:194:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2643,"nodeType":"Block","src":"1765:4115:16","statements":[{"id":2642,"nodeType":"UncheckedBlock","src":"1775:4099:16","statements":[{"assignments":[2534],"declarations":[{"constant":false,"id":2534,"mutability":"mutable","name":"prod0","nameLocation":"2104:5:16","nodeType":"VariableDeclaration","scope":2642,"src":"2096:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2533,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2535,"nodeType":"VariableDeclarationStatement","src":"2096:13:16"},{"assignments":[2537],"declarations":[{"constant":false,"id":2537,"mutability":"mutable","name":"prod1","nameLocation":"2176:5:16","nodeType":"VariableDeclaration","scope":2642,"src":"2168:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2536,"name":"uint256","nodeType":"ElementaryTypeName","src":"2168:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2538,"nodeType":"VariableDeclarationStatement","src":"2168:13:16"},{"AST":{"nodeType":"YulBlock","src":"2248:157:16","statements":[{"nodeType":"YulVariableDeclaration","src":"2266:30:16","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2283:1:16"},{"name":"y","nodeType":"YulIdentifier","src":"2286:1:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2293:1:16","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2289:3:16"},"nodeType":"YulFunctionCall","src":"2289:6:16"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2276:6:16"},"nodeType":"YulFunctionCall","src":"2276:20:16"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2270:2:16","type":""}]},{"nodeType":"YulAssignment","src":"2313:18:16","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2326:1:16"},{"name":"y","nodeType":"YulIdentifier","src":"2329:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2322:3:16"},"nodeType":"YulFunctionCall","src":"2322:9:16"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2313:5:16"}]},{"nodeType":"YulAssignment","src":"2348:43:16","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2365:2:16"},{"name":"prod0","nodeType":"YulIdentifier","src":"2369:5:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2361:3:16"},"nodeType":"YulFunctionCall","src":"2361:14:16"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2380:2:16"},{"name":"prod0","nodeType":"YulIdentifier","src":"2384:5:16"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2377:2:16"},"nodeType":"YulFunctionCall","src":"2377:13:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2357:3:16"},"nodeType":"YulFunctionCall","src":"2357:34:16"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2348:5:16"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2534,"isOffset":false,"isSlot":false,"src":"2313:5:16","valueSize":1},{"declaration":2534,"isOffset":false,"isSlot":false,"src":"2369:5:16","valueSize":1},{"declaration":2534,"isOffset":false,"isSlot":false,"src":"2384:5:16","valueSize":1},{"declaration":2537,"isOffset":false,"isSlot":false,"src":"2348:5:16","valueSize":1},{"declaration":2524,"isOffset":false,"isSlot":false,"src":"2283:1:16","valueSize":1},{"declaration":2524,"isOffset":false,"isSlot":false,"src":"2326:1:16","valueSize":1},{"declaration":2526,"isOffset":false,"isSlot":false,"src":"2286:1:16","valueSize":1},{"declaration":2526,"isOffset":false,"isSlot":false,"src":"2329:1:16","valueSize":1}],"id":2539,"nodeType":"InlineAssembly","src":"2239:166:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2540,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2537,"src":"2486:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2495:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2486:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2548,"nodeType":"IfStatement","src":"2482:368:16","trueBody":{"id":2547,"nodeType":"Block","src":"2498:352:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2543,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2534,"src":"2816:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2544,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"2824:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2816:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2532,"id":2546,"nodeType":"Return","src":"2809:26:16"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2550,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"2960:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2551,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2537,"src":"2974:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2960:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":2553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2981:23:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":2549,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2952:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2554,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2952:53:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2555,"nodeType":"ExpressionStatement","src":"2952:53:16"},{"assignments":[2557],"declarations":[{"constant":false,"id":2557,"mutability":"mutable","name":"remainder","nameLocation":"3269:9:16","nodeType":"VariableDeclaration","scope":2642,"src":"3261:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2556,"name":"uint256","nodeType":"ElementaryTypeName","src":"3261:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2558,"nodeType":"VariableDeclarationStatement","src":"3261:17:16"},{"AST":{"nodeType":"YulBlock","src":"3301:291:16","statements":[{"nodeType":"YulAssignment","src":"3370:38:16","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3390:1:16"},{"name":"y","nodeType":"YulIdentifier","src":"3393:1:16"},{"name":"denominator","nodeType":"YulIdentifier","src":"3396:11:16"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3383:6:16"},"nodeType":"YulFunctionCall","src":"3383:25:16"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3370:9:16"}]},{"nodeType":"YulAssignment","src":"3490:41:16","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3503:5:16"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3513:9:16"},{"name":"prod0","nodeType":"YulIdentifier","src":"3524:5:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3510:2:16"},"nodeType":"YulFunctionCall","src":"3510:20:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3499:3:16"},"nodeType":"YulFunctionCall","src":"3499:32:16"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3490:5:16"}]},{"nodeType":"YulAssignment","src":"3548:30:16","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3561:5:16"},{"name":"remainder","nodeType":"YulIdentifier","src":"3568:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3557:3:16"},"nodeType":"YulFunctionCall","src":"3557:21:16"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3548:5:16"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2528,"isOffset":false,"isSlot":false,"src":"3396:11:16","valueSize":1},{"declaration":2534,"isOffset":false,"isSlot":false,"src":"3524:5:16","valueSize":1},{"declaration":2534,"isOffset":false,"isSlot":false,"src":"3548:5:16","valueSize":1},{"declaration":2534,"isOffset":false,"isSlot":false,"src":"3561:5:16","valueSize":1},{"declaration":2537,"isOffset":false,"isSlot":false,"src":"3490:5:16","valueSize":1},{"declaration":2537,"isOffset":false,"isSlot":false,"src":"3503:5:16","valueSize":1},{"declaration":2557,"isOffset":false,"isSlot":false,"src":"3370:9:16","valueSize":1},{"declaration":2557,"isOffset":false,"isSlot":false,"src":"3513:9:16","valueSize":1},{"declaration":2557,"isOffset":false,"isSlot":false,"src":"3568:9:16","valueSize":1},{"declaration":2524,"isOffset":false,"isSlot":false,"src":"3390:1:16","valueSize":1},{"declaration":2526,"isOffset":false,"isSlot":false,"src":"3393:1:16","valueSize":1}],"id":2559,"nodeType":"InlineAssembly","src":"3292:300:16"},{"assignments":[2561],"declarations":[{"constant":false,"id":2561,"mutability":"mutable","name":"twos","nameLocation":"3907:4:16","nodeType":"VariableDeclaration","scope":2642,"src":"3899:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2560,"name":"uint256","nodeType":"ElementaryTypeName","src":"3899:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2569,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2562,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"3914:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3929:12:16","subExpression":{"id":2563,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"3930:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3944:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3929:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2567,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3928:18:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3914:32:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3899:47:16"},{"AST":{"nodeType":"YulBlock","src":"3969:362:16","statements":[{"nodeType":"YulAssignment","src":"4034:37:16","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"4053:11:16"},{"name":"twos","nodeType":"YulIdentifier","src":"4066:4:16"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4049:3:16"},"nodeType":"YulFunctionCall","src":"4049:22:16"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"4034:11:16"}]},{"nodeType":"YulAssignment","src":"4138:25:16","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"4151:5:16"},{"name":"twos","nodeType":"YulIdentifier","src":"4158:4:16"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4147:3:16"},"nodeType":"YulFunctionCall","src":"4147:16:16"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"4138:5:16"}]},{"nodeType":"YulAssignment","src":"4278:39:16","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4298:1:16","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4301:4:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4294:3:16"},"nodeType":"YulFunctionCall","src":"4294:12:16"},{"name":"twos","nodeType":"YulIdentifier","src":"4308:4:16"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4290:3:16"},"nodeType":"YulFunctionCall","src":"4290:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"4315:1:16","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4286:3:16"},"nodeType":"YulFunctionCall","src":"4286:31:16"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4278:4:16"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2528,"isOffset":false,"isSlot":false,"src":"4034:11:16","valueSize":1},{"declaration":2528,"isOffset":false,"isSlot":false,"src":"4053:11:16","valueSize":1},{"declaration":2534,"isOffset":false,"isSlot":false,"src":"4138:5:16","valueSize":1},{"declaration":2534,"isOffset":false,"isSlot":false,"src":"4151:5:16","valueSize":1},{"declaration":2561,"isOffset":false,"isSlot":false,"src":"4066:4:16","valueSize":1},{"declaration":2561,"isOffset":false,"isSlot":false,"src":"4158:4:16","valueSize":1},{"declaration":2561,"isOffset":false,"isSlot":false,"src":"4278:4:16","valueSize":1},{"declaration":2561,"isOffset":false,"isSlot":false,"src":"4301:4:16","valueSize":1},{"declaration":2561,"isOffset":false,"isSlot":false,"src":"4308:4:16","valueSize":1}],"id":2570,"nodeType":"InlineAssembly","src":"3960:371:16"},{"expression":{"id":2575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2571,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2534,"src":"4397:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2572,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2537,"src":"4406:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2573,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2561,"src":"4414:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4406:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4397:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2576,"nodeType":"ExpressionStatement","src":"4397:21:16"},{"assignments":[2578],"declarations":[{"constant":false,"id":2578,"mutability":"mutable","name":"inverse","nameLocation":"4744:7:16","nodeType":"VariableDeclaration","scope":2642,"src":"4736:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2577,"name":"uint256","nodeType":"ElementaryTypeName","src":"4736:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2585,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":2579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4755:1:16","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2580,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"4759:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4755:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2582,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4754:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":2583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4774:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4754:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4736:39:16"},{"expression":{"id":2592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2586,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"4992:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5003:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2588,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"5007:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2589,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"5021:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5007:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4992:36:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2593,"nodeType":"ExpressionStatement","src":"4992:36:16"},{"expression":{"id":2600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2594,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"5061:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5072:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2596,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"5076:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2597,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"5090:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5076:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5061:36:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2601,"nodeType":"ExpressionStatement","src":"5061:36:16"},{"expression":{"id":2608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2602,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"5131:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5142:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2604,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"5146:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2605,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"5160:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5146:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5131:36:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2609,"nodeType":"ExpressionStatement","src":"5131:36:16"},{"expression":{"id":2616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2610,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"5201:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5212:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2612,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"5216:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2613,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"5230:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5216:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5201:36:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2617,"nodeType":"ExpressionStatement","src":"5201:36:16"},{"expression":{"id":2624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2618,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"5271:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5282:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2620,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"5286:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2621,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"5300:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5286:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5271:36:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2625,"nodeType":"ExpressionStatement","src":"5271:36:16"},{"expression":{"id":2632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2626,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"5342:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5353:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2628,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"5357:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2629,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"5371:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5357:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5342:36:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2633,"nodeType":"ExpressionStatement","src":"5342:36:16"},{"expression":{"id":2638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2634,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"5812:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2635,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2534,"src":"5821:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2636,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"5829:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5821:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5812:24:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2639,"nodeType":"ExpressionStatement","src":"5812:24:16"},{"expression":{"id":2640,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"5857:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2532,"id":2641,"nodeType":"Return","src":"5850:13:16"}]}]},"documentation":{"id":2522,"nodeType":"StructuredDocumentation","src":"1357:305:16","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":2644,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:16","nodeType":"FunctionDefinition","parameters":{"id":2529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2524,"mutability":"mutable","name":"x","nameLocation":"1691:1:16","nodeType":"VariableDeclaration","scope":2644,"src":"1683:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2523,"name":"uint256","nodeType":"ElementaryTypeName","src":"1683:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2526,"mutability":"mutable","name":"y","nameLocation":"1702:1:16","nodeType":"VariableDeclaration","scope":2644,"src":"1694:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2525,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2528,"mutability":"mutable","name":"denominator","nameLocation":"1713:11:16","nodeType":"VariableDeclaration","scope":2644,"src":"1705:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2527,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:43:16"},"returnParameters":{"id":2532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2531,"mutability":"mutable","name":"result","nameLocation":"1757:6:16","nodeType":"VariableDeclaration","scope":2644,"src":"1749:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2530,"name":"uint256","nodeType":"ElementaryTypeName","src":"1749:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1748:16:16"},"scope":3296,"src":"1667:4213:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2687,"nodeType":"Block","src":"6122:189:16","statements":[{"assignments":[2660],"declarations":[{"constant":false,"id":2660,"mutability":"mutable","name":"result","nameLocation":"6140:6:16","nodeType":"VariableDeclaration","scope":2687,"src":"6132:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2659,"name":"uint256","nodeType":"ElementaryTypeName","src":"6132:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2666,"initialValue":{"arguments":[{"id":2662,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2647,"src":"6156:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2663,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2649,"src":"6159:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2664,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2651,"src":"6162:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2661,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2644,2688],"referencedDeclaration":2644,"src":"6149:6:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6149:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6132:42:16"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2437","typeString":"enum Math.Rounding"},"id":2670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2667,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2654,"src":"6188:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2437","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2668,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"6200:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2437_$","typeString":"type(enum Math.Rounding)"}},"id":2669,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6209:2:16","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"6200:11:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2437","typeString":"enum Math.Rounding"}},"src":"6188:23:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2672,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2647,"src":"6222:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2673,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2649,"src":"6225:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2674,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2651,"src":"6228:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2671,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6215:6:16","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2675,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6215:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6243:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6215:29:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6188:56:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2684,"nodeType":"IfStatement","src":"6184:98:16","trueBody":{"id":2683,"nodeType":"Block","src":"6246:36:16","statements":[{"expression":{"id":2681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2679,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2660,"src":"6260:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6270:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6260:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2682,"nodeType":"ExpressionStatement","src":"6260:11:16"}]}},{"expression":{"id":2685,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2660,"src":"6298:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2658,"id":2686,"nodeType":"Return","src":"6291:13:16"}]},"documentation":{"id":2645,"nodeType":"StructuredDocumentation","src":"5886:121:16","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2688,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6021:6:16","nodeType":"FunctionDefinition","parameters":{"id":2655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2647,"mutability":"mutable","name":"x","nameLocation":"6036:1:16","nodeType":"VariableDeclaration","scope":2688,"src":"6028:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2646,"name":"uint256","nodeType":"ElementaryTypeName","src":"6028:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2649,"mutability":"mutable","name":"y","nameLocation":"6047:1:16","nodeType":"VariableDeclaration","scope":2688,"src":"6039:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2648,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2651,"mutability":"mutable","name":"denominator","nameLocation":"6058:11:16","nodeType":"VariableDeclaration","scope":2688,"src":"6050:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2650,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2654,"mutability":"mutable","name":"rounding","nameLocation":"6080:8:16","nodeType":"VariableDeclaration","scope":2688,"src":"6071:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2437","typeString":"enum Math.Rounding"},"typeName":{"id":2653,"nodeType":"UserDefinedTypeName","pathNode":{"id":2652,"name":"Rounding","nameLocations":["6071:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":2437,"src":"6071:8:16"},"referencedDeclaration":2437,"src":"6071:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2437","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"6027:62:16"},"returnParameters":{"id":2658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2657,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2688,"src":"6113:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2656,"name":"uint256","nodeType":"ElementaryTypeName","src":"6113:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6112:9:16"},"scope":3296,"src":"6012:299:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2799,"nodeType":"Block","src":"6587:1585:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2696,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2691,"src":"6601:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6606:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6601:6:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2702,"nodeType":"IfStatement","src":"6597:45:16","trueBody":{"id":2701,"nodeType":"Block","src":"6609:33:16","statements":[{"expression":{"hexValue":"30","id":2699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6630:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2695,"id":2700,"nodeType":"Return","src":"6623:8:16"}]}},{"assignments":[2704],"declarations":[{"constant":false,"id":2704,"mutability":"mutable","name":"result","nameLocation":"7329:6:16","nodeType":"VariableDeclaration","scope":2799,"src":"7321:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2703,"name":"uint256","nodeType":"ElementaryTypeName","src":"7321:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2713,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7338:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2707,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2691,"src":"7349:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2706,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2968,3004],"referencedDeclaration":2968,"src":"7344:4:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7344:7:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7355:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7344:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2711,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7343:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7338:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7321:36:16"},{"id":2798,"nodeType":"UncheckedBlock","src":"7758:408:16","statements":[{"expression":{"id":2723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2714,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"7782:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2715,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"7792:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2716,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2691,"src":"7801:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2717,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"7805:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7801:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7792:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2720,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7791:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7816:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7791:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7782:35:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2724,"nodeType":"ExpressionStatement","src":"7782:35:16"},{"expression":{"id":2734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2725,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"7831:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2726,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"7841:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2727,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2691,"src":"7850:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2728,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"7854:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7850:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7841:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2731,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7840:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2732,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7865:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7840:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7831:35:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2735,"nodeType":"ExpressionStatement","src":"7831:35:16"},{"expression":{"id":2745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2736,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"7880:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2737,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"7890:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2738,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2691,"src":"7899:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2739,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"7903:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7899:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7890:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2742,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7889:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7914:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7889:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7880:35:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2746,"nodeType":"ExpressionStatement","src":"7880:35:16"},{"expression":{"id":2756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2747,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"7929:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2748,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"7939:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2749,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2691,"src":"7948:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2750,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"7952:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7948:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7939:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2753,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7938:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7938:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7929:35:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2757,"nodeType":"ExpressionStatement","src":"7929:35:16"},{"expression":{"id":2767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2758,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"7978:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2759,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"7988:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2760,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2691,"src":"7997:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2761,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"8001:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7997:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7988:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2764,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7987:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8012:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7987:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7978:35:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2768,"nodeType":"ExpressionStatement","src":"7978:35:16"},{"expression":{"id":2778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2769,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"8027:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2770,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"8037:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2771,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2691,"src":"8046:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2772,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"8050:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8046:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8037:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2775,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8036:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8061:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8036:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8027:35:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2779,"nodeType":"ExpressionStatement","src":"8027:35:16"},{"expression":{"id":2789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2780,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"8076:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2781,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"8086:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2782,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2691,"src":"8095:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2783,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"8099:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8095:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8086:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2786,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8085:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8110:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8085:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8076:35:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2790,"nodeType":"ExpressionStatement","src":"8076:35:16"},{"expression":{"arguments":[{"id":2792,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"8136:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2793,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2691,"src":"8144:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2794,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"8148:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8144:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2791,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"8132:3:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:23:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2695,"id":2797,"nodeType":"Return","src":"8125:30:16"}]}]},"documentation":{"id":2689,"nodeType":"StructuredDocumentation","src":"6317:208:16","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2800,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6539:4:16","nodeType":"FunctionDefinition","parameters":{"id":2692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2691,"mutability":"mutable","name":"a","nameLocation":"6552:1:16","nodeType":"VariableDeclaration","scope":2800,"src":"6544:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2690,"name":"uint256","nodeType":"ElementaryTypeName","src":"6544:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6543:11:16"},"returnParameters":{"id":2695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2694,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2800,"src":"6578:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2693,"name":"uint256","nodeType":"ElementaryTypeName","src":"6578:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6577:9:16"},"scope":3296,"src":"6530:1642:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2835,"nodeType":"Block","src":"8348:161:16","statements":[{"id":2834,"nodeType":"UncheckedBlock","src":"8358:145:16","statements":[{"assignments":[2812],"declarations":[{"constant":false,"id":2812,"mutability":"mutable","name":"result","nameLocation":"8390:6:16","nodeType":"VariableDeclaration","scope":2834,"src":"8382:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2811,"name":"uint256","nodeType":"ElementaryTypeName","src":"8382:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2816,"initialValue":{"arguments":[{"id":2814,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2803,"src":"8404:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2813,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2800,2836],"referencedDeclaration":2800,"src":"8399:4:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8399:7:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8382:24:16"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2817,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2812,"src":"8427:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2437","typeString":"enum Math.Rounding"},"id":2821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2818,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2806,"src":"8437:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2437","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2819,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"8449:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2437_$","typeString":"type(enum Math.Rounding)"}},"id":2820,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8458:2:16","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"8449:11:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2437","typeString":"enum Math.Rounding"}},"src":"8437:23:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2822,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2812,"src":"8464:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2823,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2812,"src":"8473:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2825,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2803,"src":"8482:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8437:46:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8490:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:54:16","trueExpression":{"hexValue":"31","id":2828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8486:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2831,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8436:56:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8427:65:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2810,"id":2833,"nodeType":"Return","src":"8420:72:16"}]}]},"documentation":{"id":2801,"nodeType":"StructuredDocumentation","src":"8178:89:16","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2836,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8281:4:16","nodeType":"FunctionDefinition","parameters":{"id":2807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2803,"mutability":"mutable","name":"a","nameLocation":"8294:1:16","nodeType":"VariableDeclaration","scope":2836,"src":"8286:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2802,"name":"uint256","nodeType":"ElementaryTypeName","src":"8286:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2806,"mutability":"mutable","name":"rounding","nameLocation":"8306:8:16","nodeType":"VariableDeclaration","scope":2836,"src":"8297:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2437","typeString":"enum Math.Rounding"},"typeName":{"id":2805,"nodeType":"UserDefinedTypeName","pathNode":{"id":2804,"name":"Rounding","nameLocations":["8297:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":2437,"src":"8297:8:16"},"referencedDeclaration":2437,"src":"8297:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2437","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8285:30:16"},"returnParameters":{"id":2810,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2809,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2836,"src":"8339:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2808,"name":"uint256","nodeType":"ElementaryTypeName","src":"8339:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8338:9:16"},"scope":3296,"src":"8272:237:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2967,"nodeType":"Block","src":"8694:922:16","statements":[{"assignments":[2845],"declarations":[{"constant":false,"id":2845,"mutability":"mutable","name":"result","nameLocation":"8712:6:16","nodeType":"VariableDeclaration","scope":2967,"src":"8704:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2844,"name":"uint256","nodeType":"ElementaryTypeName","src":"8704:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2847,"initialValue":{"hexValue":"30","id":2846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8721:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8704:18:16"},{"id":2964,"nodeType":"UncheckedBlock","src":"8732:855:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2848,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2839,"src":"8760:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8769:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8760:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8775:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8760:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2862,"nodeType":"IfStatement","src":"8756:99:16","trueBody":{"id":2861,"nodeType":"Block","src":"8778:77:16","statements":[{"expression":{"id":2855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2853,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2839,"src":"8796:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2854,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8796:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2856,"nodeType":"ExpressionStatement","src":"8796:13:16"},{"expression":{"id":2859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2857,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2845,"src":"8827:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8837:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8827:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2860,"nodeType":"ExpressionStatement","src":"8827:13:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2863,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2839,"src":"8872:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8881:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8872:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8886:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8872:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2877,"nodeType":"IfStatement","src":"8868:96:16","trueBody":{"id":2876,"nodeType":"Block","src":"8889:75:16","statements":[{"expression":{"id":2870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2868,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2839,"src":"8907:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8917:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8907:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2871,"nodeType":"ExpressionStatement","src":"8907:12:16"},{"expression":{"id":2874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2872,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2845,"src":"8937:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8947:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8937:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2875,"nodeType":"ExpressionStatement","src":"8937:12:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2878,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2839,"src":"8981:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8990:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8981:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2881,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8995:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8981:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2892,"nodeType":"IfStatement","src":"8977:96:16","trueBody":{"id":2891,"nodeType":"Block","src":"8998:75:16","statements":[{"expression":{"id":2885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2883,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2839,"src":"9016:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9026:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9016:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2886,"nodeType":"ExpressionStatement","src":"9016:12:16"},{"expression":{"id":2889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2887,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2845,"src":"9046:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9056:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9046:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2890,"nodeType":"ExpressionStatement","src":"9046:12:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2893,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2839,"src":"9090:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9090:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9104:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9090:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2907,"nodeType":"IfStatement","src":"9086:96:16","trueBody":{"id":2906,"nodeType":"Block","src":"9107:75:16","statements":[{"expression":{"id":2900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2898,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2839,"src":"9125:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9135:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9125:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2901,"nodeType":"ExpressionStatement","src":"9125:12:16"},{"expression":{"id":2904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2902,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2845,"src":"9155:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9165:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9155:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2905,"nodeType":"ExpressionStatement","src":"9155:12:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2908,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2839,"src":"9199:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9208:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9199:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9212:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9199:14:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2922,"nodeType":"IfStatement","src":"9195:93:16","trueBody":{"id":2921,"nodeType":"Block","src":"9215:73:16","statements":[{"expression":{"id":2915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2913,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2839,"src":"9233:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9243:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9233:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2916,"nodeType":"ExpressionStatement","src":"9233:11:16"},{"expression":{"id":2919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2917,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2845,"src":"9262:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9272:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9262:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2920,"nodeType":"ExpressionStatement","src":"9262:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2923,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2839,"src":"9305:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9314:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9305:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2926,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9318:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9305:14:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2937,"nodeType":"IfStatement","src":"9301:93:16","trueBody":{"id":2936,"nodeType":"Block","src":"9321:73:16","statements":[{"expression":{"id":2930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2928,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2839,"src":"9339:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9349:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9339:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2931,"nodeType":"ExpressionStatement","src":"9339:11:16"},{"expression":{"id":2934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2932,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2845,"src":"9368:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9378:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9368:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2935,"nodeType":"ExpressionStatement","src":"9368:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2938,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2839,"src":"9411:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9420:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9411:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2941,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9424:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9411:14:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2952,"nodeType":"IfStatement","src":"9407:93:16","trueBody":{"id":2951,"nodeType":"Block","src":"9427:73:16","statements":[{"expression":{"id":2945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2943,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2839,"src":"9445:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9455:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9445:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2946,"nodeType":"ExpressionStatement","src":"9445:11:16"},{"expression":{"id":2949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2947,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2845,"src":"9474:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9484:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9474:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2950,"nodeType":"ExpressionStatement","src":"9474:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2953,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2839,"src":"9517:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9526:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9517:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9530:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9517:14:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2963,"nodeType":"IfStatement","src":"9513:64:16","trueBody":{"id":2962,"nodeType":"Block","src":"9533:44:16","statements":[{"expression":{"id":2960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2958,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2845,"src":"9551:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9561:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9551:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2961,"nodeType":"ExpressionStatement","src":"9551:11:16"}]}}]},{"expression":{"id":2965,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2845,"src":"9603:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2843,"id":2966,"nodeType":"Return","src":"9596:13:16"}]},"documentation":{"id":2837,"nodeType":"StructuredDocumentation","src":"8515:113:16","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2968,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8642:4:16","nodeType":"FunctionDefinition","parameters":{"id":2840,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2839,"mutability":"mutable","name":"value","nameLocation":"8655:5:16","nodeType":"VariableDeclaration","scope":2968,"src":"8647:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2838,"name":"uint256","nodeType":"ElementaryTypeName","src":"8647:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8646:15:16"},"returnParameters":{"id":2843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2842,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2968,"src":"8685:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2841,"name":"uint256","nodeType":"ElementaryTypeName","src":"8685:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8684:9:16"},"scope":3296,"src":"8633:983:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3003,"nodeType":"Block","src":"9849:165:16","statements":[{"id":3002,"nodeType":"UncheckedBlock","src":"9859:149:16","statements":[{"assignments":[2980],"declarations":[{"constant":false,"id":2980,"mutability":"mutable","name":"result","nameLocation":"9891:6:16","nodeType":"VariableDeclaration","scope":3002,"src":"9883:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2979,"name":"uint256","nodeType":"ElementaryTypeName","src":"9883:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2984,"initialValue":{"arguments":[{"id":2982,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2971,"src":"9905:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2981,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2968,3004],"referencedDeclaration":2968,"src":"9900:4:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9900:11:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9883:28:16"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2985,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2980,"src":"9932:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2437","typeString":"enum Math.Rounding"},"id":2989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2986,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2974,"src":"9942:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2437","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2987,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"9954:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2437_$","typeString":"type(enum Math.Rounding)"}},"id":2988,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9963:2:16","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"9954:11:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2437","typeString":"enum Math.Rounding"}},"src":"9942:23:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9969:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2991,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2980,"src":"9974:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2993,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2971,"src":"9983:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9942:46:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9995:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9942:54:16","trueExpression":{"hexValue":"31","id":2996,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9991:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2999,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9941:56:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9932:65:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2978,"id":3001,"nodeType":"Return","src":"9925:72:16"}]}]},"documentation":{"id":2969,"nodeType":"StructuredDocumentation","src":"9622:142:16","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3004,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9778:4:16","nodeType":"FunctionDefinition","parameters":{"id":2975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2971,"mutability":"mutable","name":"value","nameLocation":"9791:5:16","nodeType":"VariableDeclaration","scope":3004,"src":"9783:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2970,"name":"uint256","nodeType":"ElementaryTypeName","src":"9783:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2974,"mutability":"mutable","name":"rounding","nameLocation":"9807:8:16","nodeType":"VariableDeclaration","scope":3004,"src":"9798:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2437","typeString":"enum Math.Rounding"},"typeName":{"id":2973,"nodeType":"UserDefinedTypeName","pathNode":{"id":2972,"name":"Rounding","nameLocations":["9798:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":2437,"src":"9798:8:16"},"referencedDeclaration":2437,"src":"9798:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2437","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9782:34:16"},"returnParameters":{"id":2978,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2977,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3004,"src":"9840:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2976,"name":"uint256","nodeType":"ElementaryTypeName","src":"9840:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9839:9:16"},"scope":3296,"src":"9769:245:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3132,"nodeType":"Block","src":"10201:854:16","statements":[{"assignments":[3013],"declarations":[{"constant":false,"id":3013,"mutability":"mutable","name":"result","nameLocation":"10219:6:16","nodeType":"VariableDeclaration","scope":3132,"src":"10211:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3012,"name":"uint256","nodeType":"ElementaryTypeName","src":"10211:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3015,"initialValue":{"hexValue":"30","id":3014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10228:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10211:18:16"},{"id":3129,"nodeType":"UncheckedBlock","src":"10239:787:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3016,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3007,"src":"10267:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3019,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3017,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10276:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10282:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10276:8:16","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10267:17:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3032,"nodeType":"IfStatement","src":"10263:103:16","trueBody":{"id":3031,"nodeType":"Block","src":"10286:80:16","statements":[{"expression":{"id":3025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3021,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3007,"src":"10304:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3024,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10313:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3023,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10313:8:16","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10304:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3026,"nodeType":"ExpressionStatement","src":"10304:17:16"},{"expression":{"id":3029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3027,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3013,"src":"10339:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10349:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10339:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3030,"nodeType":"ExpressionStatement","src":"10339:12:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3033,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3007,"src":"10383:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3036,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3034,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10392:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3035,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10398:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10392:8:16","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10383:17:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3049,"nodeType":"IfStatement","src":"10379:103:16","trueBody":{"id":3048,"nodeType":"Block","src":"10402:80:16","statements":[{"expression":{"id":3042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3038,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3007,"src":"10420:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3041,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10435:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10429:8:16","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10420:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3043,"nodeType":"ExpressionStatement","src":"10420:17:16"},{"expression":{"id":3046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3044,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3013,"src":"10455:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10465:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10455:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3047,"nodeType":"ExpressionStatement","src":"10455:12:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3050,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3007,"src":"10499:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3053,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3051,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10508:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10514:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10508:8:16","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10499:17:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3066,"nodeType":"IfStatement","src":"10495:103:16","trueBody":{"id":3065,"nodeType":"Block","src":"10518:80:16","statements":[{"expression":{"id":3059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3055,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3007,"src":"10536:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3058,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3056,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10545:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10551:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10545:8:16","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10536:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3060,"nodeType":"ExpressionStatement","src":"10536:17:16"},{"expression":{"id":3063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3061,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3013,"src":"10571:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10581:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10571:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3064,"nodeType":"ExpressionStatement","src":"10571:12:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3067,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3007,"src":"10615:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3070,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10624:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3069,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10630:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10624:7:16","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10615:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3083,"nodeType":"IfStatement","src":"10611:100:16","trueBody":{"id":3082,"nodeType":"Block","src":"10633:78:16","statements":[{"expression":{"id":3076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3072,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3007,"src":"10651:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3075,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10660:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10666:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10660:7:16","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10651:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3077,"nodeType":"ExpressionStatement","src":"10651:16:16"},{"expression":{"id":3080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3078,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3013,"src":"10685:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10695:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10685:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3081,"nodeType":"ExpressionStatement","src":"10685:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3084,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3007,"src":"10728:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3087,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10737:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10743:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10737:7:16","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10728:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3100,"nodeType":"IfStatement","src":"10724:100:16","trueBody":{"id":3099,"nodeType":"Block","src":"10746:78:16","statements":[{"expression":{"id":3093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3089,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3007,"src":"10764:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3092,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10773:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10779:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10773:7:16","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10764:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3094,"nodeType":"ExpressionStatement","src":"10764:16:16"},{"expression":{"id":3097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3095,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3013,"src":"10798:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10808:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10798:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3098,"nodeType":"ExpressionStatement","src":"10798:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3101,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3007,"src":"10841:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3104,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10850:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10856:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10850:7:16","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10841:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3117,"nodeType":"IfStatement","src":"10837:100:16","trueBody":{"id":3116,"nodeType":"Block","src":"10859:78:16","statements":[{"expression":{"id":3110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3106,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3007,"src":"10877:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3109,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10886:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10892:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10886:7:16","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10877:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3111,"nodeType":"ExpressionStatement","src":"10877:16:16"},{"expression":{"id":3114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3112,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3013,"src":"10911:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3113,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10921:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10911:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3115,"nodeType":"ExpressionStatement","src":"10911:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3118,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3007,"src":"10954:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":3121,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10963:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":3120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10969:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10963:7:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10954:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3128,"nodeType":"IfStatement","src":"10950:66:16","trueBody":{"id":3127,"nodeType":"Block","src":"10972:44:16","statements":[{"expression":{"id":3125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3123,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3013,"src":"10990:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11000:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10990:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3126,"nodeType":"ExpressionStatement","src":"10990:11:16"}]}}]},{"expression":{"id":3130,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3013,"src":"11042:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3011,"id":3131,"nodeType":"Return","src":"11035:13:16"}]},"documentation":{"id":3005,"nodeType":"StructuredDocumentation","src":"10020:114:16","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":3133,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10148:5:16","nodeType":"FunctionDefinition","parameters":{"id":3008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3007,"mutability":"mutable","name":"value","nameLocation":"10162:5:16","nodeType":"VariableDeclaration","scope":3133,"src":"10154:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3006,"name":"uint256","nodeType":"ElementaryTypeName","src":"10154:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10153:15:16"},"returnParameters":{"id":3011,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3010,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3133,"src":"10192:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3009,"name":"uint256","nodeType":"ElementaryTypeName","src":"10192:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10191:9:16"},"scope":3296,"src":"10139:916:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3168,"nodeType":"Block","src":"11290:167:16","statements":[{"id":3167,"nodeType":"UncheckedBlock","src":"11300:151:16","statements":[{"assignments":[3145],"declarations":[{"constant":false,"id":3145,"mutability":"mutable","name":"result","nameLocation":"11332:6:16","nodeType":"VariableDeclaration","scope":3167,"src":"11324:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3144,"name":"uint256","nodeType":"ElementaryTypeName","src":"11324:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3149,"initialValue":{"arguments":[{"id":3147,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3136,"src":"11347:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3146,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[3133,3169],"referencedDeclaration":3133,"src":"11341:5:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11341:12:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11324:29:16"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3150,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3145,"src":"11374:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2437","typeString":"enum Math.Rounding"},"id":3154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3151,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"11384:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2437","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3152,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"11396:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2437_$","typeString":"type(enum Math.Rounding)"}},"id":3153,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11405:2:16","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"11396:11:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2437","typeString":"enum Math.Rounding"}},"src":"11384:23:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11411:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":3156,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3145,"src":"11417:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3158,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3136,"src":"11426:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:20:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11384:47:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11438:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11384:55:16","trueExpression":{"hexValue":"31","id":3161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11434:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3164,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11383:57:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11374:66:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3143,"id":3166,"nodeType":"Return","src":"11367:73:16"}]}]},"documentation":{"id":3134,"nodeType":"StructuredDocumentation","src":"11061:143:16","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3169,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11218:5:16","nodeType":"FunctionDefinition","parameters":{"id":3140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3136,"mutability":"mutable","name":"value","nameLocation":"11232:5:16","nodeType":"VariableDeclaration","scope":3169,"src":"11224:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3135,"name":"uint256","nodeType":"ElementaryTypeName","src":"11224:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3139,"mutability":"mutable","name":"rounding","nameLocation":"11248:8:16","nodeType":"VariableDeclaration","scope":3169,"src":"11239:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2437","typeString":"enum Math.Rounding"},"typeName":{"id":3138,"nodeType":"UserDefinedTypeName","pathNode":{"id":3137,"name":"Rounding","nameLocations":["11239:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":2437,"src":"11239:8:16"},"referencedDeclaration":2437,"src":"11239:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2437","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11223:34:16"},"returnParameters":{"id":3143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3142,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3169,"src":"11281:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3141,"name":"uint256","nodeType":"ElementaryTypeName","src":"11281:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11280:9:16"},"scope":3296,"src":"11209:248:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3255,"nodeType":"Block","src":"11771:600:16","statements":[{"assignments":[3178],"declarations":[{"constant":false,"id":3178,"mutability":"mutable","name":"result","nameLocation":"11789:6:16","nodeType":"VariableDeclaration","scope":3255,"src":"11781:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3177,"name":"uint256","nodeType":"ElementaryTypeName","src":"11781:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3180,"initialValue":{"hexValue":"30","id":3179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11798:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11781:18:16"},{"id":3252,"nodeType":"UncheckedBlock","src":"11809:533:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3181,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3172,"src":"11837:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11846:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11837:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11852:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11837:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3195,"nodeType":"IfStatement","src":"11833:98:16","trueBody":{"id":3194,"nodeType":"Block","src":"11855:76:16","statements":[{"expression":{"id":3188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3186,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3172,"src":"11873:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11883:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11873:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3189,"nodeType":"ExpressionStatement","src":"11873:13:16"},{"expression":{"id":3192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3190,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3178,"src":"11904:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11914:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11904:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3193,"nodeType":"ExpressionStatement","src":"11904:12:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3196,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3172,"src":"11948:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11957:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11948:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11962:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11948:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3210,"nodeType":"IfStatement","src":"11944:95:16","trueBody":{"id":3209,"nodeType":"Block","src":"11965:74:16","statements":[{"expression":{"id":3203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3201,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3172,"src":"11983:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11993:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11983:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3204,"nodeType":"ExpressionStatement","src":"11983:12:16"},{"expression":{"id":3207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3205,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3178,"src":"12013:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12023:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12013:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3208,"nodeType":"ExpressionStatement","src":"12013:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3211,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3172,"src":"12056:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12065:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12056:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12070:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12056:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3225,"nodeType":"IfStatement","src":"12052:95:16","trueBody":{"id":3224,"nodeType":"Block","src":"12073:74:16","statements":[{"expression":{"id":3218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3216,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3172,"src":"12091:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12101:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12091:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3219,"nodeType":"ExpressionStatement","src":"12091:12:16"},{"expression":{"id":3222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3220,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3178,"src":"12121:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12131:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12121:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3223,"nodeType":"ExpressionStatement","src":"12121:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3226,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3172,"src":"12164:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12173:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12164:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12178:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12164:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3240,"nodeType":"IfStatement","src":"12160:95:16","trueBody":{"id":3239,"nodeType":"Block","src":"12181:74:16","statements":[{"expression":{"id":3233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3231,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3172,"src":"12199:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12209:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12199:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3234,"nodeType":"ExpressionStatement","src":"12199:12:16"},{"expression":{"id":3237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3235,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3178,"src":"12229:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12239:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12229:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3238,"nodeType":"ExpressionStatement","src":"12229:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3241,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3172,"src":"12272:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12281:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12272:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12272:14:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3251,"nodeType":"IfStatement","src":"12268:64:16","trueBody":{"id":3250,"nodeType":"Block","src":"12288:44:16","statements":[{"expression":{"id":3248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3246,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3178,"src":"12306:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12316:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12306:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3249,"nodeType":"ExpressionStatement","src":"12306:11:16"}]}}]},{"expression":{"id":3253,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3178,"src":"12358:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3176,"id":3254,"nodeType":"Return","src":"12351:13:16"}]},"documentation":{"id":3170,"nodeType":"StructuredDocumentation","src":"11463:240:16","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":3256,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11717:6:16","nodeType":"FunctionDefinition","parameters":{"id":3173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3172,"mutability":"mutable","name":"value","nameLocation":"11732:5:16","nodeType":"VariableDeclaration","scope":3256,"src":"11724:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3171,"name":"uint256","nodeType":"ElementaryTypeName","src":"11724:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11723:15:16"},"returnParameters":{"id":3176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3175,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3256,"src":"11762:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3174,"name":"uint256","nodeType":"ElementaryTypeName","src":"11762:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11761:9:16"},"scope":3296,"src":"11708:663:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3294,"nodeType":"Block","src":"12608:174:16","statements":[{"id":3293,"nodeType":"UncheckedBlock","src":"12618:158:16","statements":[{"assignments":[3268],"declarations":[{"constant":false,"id":3268,"mutability":"mutable","name":"result","nameLocation":"12650:6:16","nodeType":"VariableDeclaration","scope":3293,"src":"12642:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3267,"name":"uint256","nodeType":"ElementaryTypeName","src":"12642:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3272,"initialValue":{"arguments":[{"id":3270,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"12666:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3269,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[3256,3295],"referencedDeclaration":3256,"src":"12659:6:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3271,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12659:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12642:30:16"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3273,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3268,"src":"12693:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2437","typeString":"enum Math.Rounding"},"id":3277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3274,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"12703:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2437","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3275,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"12715:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2437_$","typeString":"type(enum Math.Rounding)"}},"id":3276,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12724:2:16","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2435,"src":"12715:11:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2437","typeString":"enum Math.Rounding"}},"src":"12703:23:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3278,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12730:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3279,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3268,"src":"12736:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":3280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12746:1:16","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12736:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3282,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12735:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:18:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3284,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"12751:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:26:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12703:53:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12763:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12703:61:16","trueExpression":{"hexValue":"31","id":3287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12759:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3290,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12702:63:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12693:72:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3266,"id":3292,"nodeType":"Return","src":"12686:79:16"}]}]},"documentation":{"id":3257,"nodeType":"StructuredDocumentation","src":"12377:144:16","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3295,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12535:6:16","nodeType":"FunctionDefinition","parameters":{"id":3263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3259,"mutability":"mutable","name":"value","nameLocation":"12550:5:16","nodeType":"VariableDeclaration","scope":3295,"src":"12542:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3258,"name":"uint256","nodeType":"ElementaryTypeName","src":"12542:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3262,"mutability":"mutable","name":"rounding","nameLocation":"12566:8:16","nodeType":"VariableDeclaration","scope":3295,"src":"12557:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2437","typeString":"enum Math.Rounding"},"typeName":{"id":3261,"nodeType":"UserDefinedTypeName","pathNode":{"id":3260,"name":"Rounding","nameLocations":["12557:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":2437,"src":"12557:8:16"},"referencedDeclaration":2437,"src":"12557:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2437","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12541:34:16"},"returnParameters":{"id":3266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3265,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3295,"src":"12599:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3264,"name":"uint256","nodeType":"ElementaryTypeName","src":"12599:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12598:9:16"},"scope":3296,"src":"12526:256:16","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3297,"src":"202:12582:16","usedErrors":[]}],"src":"103:12682:16"},"id":16},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[3401]},"id":3402,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3298,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:17"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":3299,"nodeType":"StructuredDocumentation","src":"134:80:17","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":3401,"linearizedBaseContracts":[3401],"name":"SignedMath","nameLocation":"223:10:17","nodeType":"ContractDefinition","nodes":[{"body":{"id":3316,"nodeType":"Block","src":"375:37:17","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3309,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3302,"src":"392:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3310,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3304,"src":"396:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"392:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3313,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3304,"src":"404:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"392:13:17","trueExpression":{"id":3312,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3302,"src":"400:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3308,"id":3315,"nodeType":"Return","src":"385:20:17"}]},"documentation":{"id":3300,"nodeType":"StructuredDocumentation","src":"240:66:17","text":" @dev Returns the largest of two signed numbers."},"id":3317,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"320:3:17","nodeType":"FunctionDefinition","parameters":{"id":3305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3302,"mutability":"mutable","name":"a","nameLocation":"331:1:17","nodeType":"VariableDeclaration","scope":3317,"src":"324:8:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3301,"name":"int256","nodeType":"ElementaryTypeName","src":"324:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3304,"mutability":"mutable","name":"b","nameLocation":"341:1:17","nodeType":"VariableDeclaration","scope":3317,"src":"334:8:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3303,"name":"int256","nodeType":"ElementaryTypeName","src":"334:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"323:20:17"},"returnParameters":{"id":3308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3307,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3317,"src":"367:6:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3306,"name":"int256","nodeType":"ElementaryTypeName","src":"367:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"366:8:17"},"scope":3401,"src":"311:101:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3334,"nodeType":"Block","src":"554:37:17","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3327,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3320,"src":"571:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3328,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3322,"src":"575:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"571:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3331,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3322,"src":"583:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"571:13:17","trueExpression":{"id":3330,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3320,"src":"579:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3326,"id":3333,"nodeType":"Return","src":"564:20:17"}]},"documentation":{"id":3318,"nodeType":"StructuredDocumentation","src":"418:67:17","text":" @dev Returns the smallest of two signed numbers."},"id":3335,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"499:3:17","nodeType":"FunctionDefinition","parameters":{"id":3323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3320,"mutability":"mutable","name":"a","nameLocation":"510:1:17","nodeType":"VariableDeclaration","scope":3335,"src":"503:8:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3319,"name":"int256","nodeType":"ElementaryTypeName","src":"503:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3322,"mutability":"mutable","name":"b","nameLocation":"520:1:17","nodeType":"VariableDeclaration","scope":3335,"src":"513:8:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3321,"name":"int256","nodeType":"ElementaryTypeName","src":"513:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"502:20:17"},"returnParameters":{"id":3326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3325,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3335,"src":"546:6:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3324,"name":"int256","nodeType":"ElementaryTypeName","src":"546:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"545:8:17"},"scope":3401,"src":"490:101:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3378,"nodeType":"Block","src":"796:162:17","statements":[{"assignments":[3346],"declarations":[{"constant":false,"id":3346,"mutability":"mutable","name":"x","nameLocation":"865:1:17","nodeType":"VariableDeclaration","scope":3378,"src":"858:8:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3345,"name":"int256","nodeType":"ElementaryTypeName","src":"858:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3359,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3347,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3338,"src":"870:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3348,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3340,"src":"874:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:5:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3350,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"869:7:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3351,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3338,"src":"881:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3352,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3340,"src":"885:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3354,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"891:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"880:12:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3357,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"879:14:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"869:24:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"858:35:17"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3360,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3346,"src":"910:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3365,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3346,"src":"930:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3364,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"922:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3363,"name":"uint256","nodeType":"ElementaryTypeName","src":"922:7:17","typeDescriptions":{}}},"id":3366,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"922:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":3367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"936:3:17","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"922:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3362,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"915:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":3361,"name":"int256","nodeType":"ElementaryTypeName","src":"915:6:17","typeDescriptions":{}}},"id":3369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"915:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3370,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3338,"src":"944:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3371,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3340,"src":"948:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"944:5:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3373,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"943:7:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"915:35:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3375,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"914:37:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"910:41:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3344,"id":3377,"nodeType":"Return","src":"903:48:17"}]},"documentation":{"id":3336,"nodeType":"StructuredDocumentation","src":"597:126:17","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":3379,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"737:7:17","nodeType":"FunctionDefinition","parameters":{"id":3341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3338,"mutability":"mutable","name":"a","nameLocation":"752:1:17","nodeType":"VariableDeclaration","scope":3379,"src":"745:8:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3337,"name":"int256","nodeType":"ElementaryTypeName","src":"745:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3340,"mutability":"mutable","name":"b","nameLocation":"762:1:17","nodeType":"VariableDeclaration","scope":3379,"src":"755:8:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3339,"name":"int256","nodeType":"ElementaryTypeName","src":"755:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"744:20:17"},"returnParameters":{"id":3344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3343,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3379,"src":"788:6:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3342,"name":"int256","nodeType":"ElementaryTypeName","src":"788:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"787:8:17"},"scope":3401,"src":"728:230:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3399,"nodeType":"Block","src":"1102:158:17","statements":[{"id":3398,"nodeType":"UncheckedBlock","src":"1112:142:17","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3389,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3382,"src":"1227:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":3390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1232:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1227:6:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1240:2:17","subExpression":{"id":3393,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3382,"src":"1241:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1227:15:17","trueExpression":{"id":3392,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3382,"src":"1236:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3388,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1219:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3387,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:17","typeDescriptions":{}}},"id":3396,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1219:24:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3386,"id":3397,"nodeType":"Return","src":"1212:31:17"}]}]},"documentation":{"id":3380,"nodeType":"StructuredDocumentation","src":"964:78:17","text":" @dev Returns the absolute unsigned value of a signed value."},"id":3400,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1056:3:17","nodeType":"FunctionDefinition","parameters":{"id":3383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3382,"mutability":"mutable","name":"n","nameLocation":"1067:1:17","nodeType":"VariableDeclaration","scope":3400,"src":"1060:8:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3381,"name":"int256","nodeType":"ElementaryTypeName","src":"1060:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1059:10:17"},"returnParameters":{"id":3386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3385,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3400,"src":"1093:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3384,"name":"uint256","nodeType":"ElementaryTypeName","src":"1093:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1092:9:17"},"scope":3401,"src":"1047:213:17","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3402,"src":"215:1047:17","usedErrors":[]}],"src":"109:1154:17"},"id":17},"contracts/Lock.sol":{"ast":{"absolutePath":"contracts/Lock.sol","exportedSymbols":{"Lock":[3432]},"id":3433,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":3403,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"39:23:18"},{"abstract":false,"baseContracts":[],"canonicalName":"Lock","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3432,"linearizedBaseContracts":[3432],"name":"Lock","nameLocation":"149:4:18","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"8da5cb5b","id":3405,"mutability":"mutable","name":"owner","nameLocation":"183:5:18","nodeType":"VariableDeclaration","scope":3432,"src":"160:28:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3404,"name":"address","nodeType":"ElementaryTypeName","src":"160:15:18","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"public"},{"body":{"id":3416,"nodeType":"Block","src":"209:44:18","statements":[{"expression":{"id":3414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3408,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3405,"src":"219:5:18","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":3411,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"235:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"239:6:18","memberName":"sender","nodeType":"MemberAccess","src":"235:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3410,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"227:8:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":3409,"name":"address","nodeType":"ElementaryTypeName","src":"227:8:18","stateMutability":"payable","typeDescriptions":{}}},"id":3413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"227:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"219:27:18","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3415,"nodeType":"ExpressionStatement","src":"219:27:18"}]},"id":3417,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3406,"nodeType":"ParameterList","parameters":[],"src":"206:2:18"},"returnParameters":{"id":3407,"nodeType":"ParameterList","parameters":[],"src":"209:0:18"},"scope":3432,"src":"195:58:18","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3430,"nodeType":"Block","src":"286:260:18","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":3425,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"525:4:18","typeDescriptions":{"typeIdentifier":"t_contract$_Lock_$3432","typeString":"contract Lock"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Lock_$3432","typeString":"contract Lock"}],"id":3424,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"517:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3423,"name":"address","nodeType":"ElementaryTypeName","src":"517:7:18","typeDescriptions":{}}},"id":3426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"517:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"531:7:18","memberName":"balance","nodeType":"MemberAccess","src":"517:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3420,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3405,"src":"502:5:18","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"508:8:18","memberName":"transfer","nodeType":"MemberAccess","src":"502:14:18","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":3428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"502:37:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3429,"nodeType":"ExpressionStatement","src":"502:37:18"}]},"functionSelector":"3ccfd60b","id":3431,"implemented":true,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"268:8:18","nodeType":"FunctionDefinition","parameters":{"id":3418,"nodeType":"ParameterList","parameters":[],"src":"276:2:18"},"returnParameters":{"id":3419,"nodeType":"ParameterList","parameters":[],"src":"286:0:18"},"scope":3432,"src":"259:287:18","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":3433,"src":"140:408:18","usedErrors":[]}],"src":"39:510:18"},"id":18},"contracts/aa/Account.sol":{"ast":{"absolutePath":"contracts/aa/Account.sol","exportedSymbols":{"Account":[4096],"Address":[1622],"Base64":[4483],"ECDSA":[2430],"Initializable":[602],"JPoint":[4499],"Math":[3296],"PassKeyId":[4492],"Secp256r1":[5260],"SignedMath":[3401],"Strings":[2064],"UserOp":[5271],"UserOpLib":[5332]},"id":4097,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":3434,"literals":["solidity","^","0.8",".19"],"nodeType":"PragmaDirective","src":"36:24:19"},{"absolutePath":"contracts/aa/utils/UserOp.sol","file":"./utils/UserOp.sol","id":3435,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4097,"sourceUnit":5333,"src":"62:28:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/aa/utils/Secp256r1.sol","file":"./utils/Secp256r1.sol","id":3436,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4097,"sourceUnit":5261,"src":"91:31:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/aa/utils/Base64.sol","file":"./utils/Base64.sol","id":3437,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4097,"sourceUnit":4484,"src":"123:28:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts/proxy/utils/Initializable.sol","id":3438,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4097,"sourceUnit":603,"src":"153:63:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","file":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","id":3439,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4097,"sourceUnit":2431,"src":"217:62:19","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3440,"name":"Initializable","nameLocations":["301:13:19"],"nodeType":"IdentifierPath","referencedDeclaration":602,"src":"301:13:19"},"id":3441,"nodeType":"InheritanceSpecifier","src":"301:13:19"}],"canonicalName":"Account","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4096,"linearizedBaseContracts":[4096,602],"name":"Account","nameLocation":"290:7:19","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3445,"libraryName":{"id":3442,"name":"UserOpLib","nameLocations":["327:9:19"],"nodeType":"IdentifierPath","referencedDeclaration":5332,"src":"327:9:19"},"nodeType":"UsingForDirective","src":"321:27:19","typeName":{"id":3444,"nodeType":"UserDefinedTypeName","pathNode":{"id":3443,"name":"UserOp","nameLocations":["341:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":5271,"src":"341:6:19"},"referencedDeclaration":5271,"src":"341:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOp_$5271_storage_ptr","typeString":"struct UserOp"}}},{"global":false,"id":3448,"libraryName":{"id":3446,"name":"ECDSA","nameLocations":["359:5:19"],"nodeType":"IdentifierPath","referencedDeclaration":2430,"src":"359:5:19"},"nodeType":"UsingForDirective","src":"353:24:19","typeName":{"id":3447,"name":"bytes32","nodeType":"ElementaryTypeName","src":"369:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"constant":false,"id":3450,"mutability":"mutable","name":"addressOwner","nameLocation":"391:12:19","nodeType":"VariableDeclaration","scope":4096,"src":"383:20:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3449,"name":"address","nodeType":"ElementaryTypeName","src":"383:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3453,"mutability":"mutable","name":"passKeyOwner","nameLocation":"419:12:19","nodeType":"VariableDeclaration","scope":4096,"src":"409:22:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_storage","typeString":"struct PassKeyId"},"typeName":{"id":3452,"nodeType":"UserDefinedTypeName","pathNode":{"id":3451,"name":"PassKeyId","nameLocations":["409:9:19"],"nodeType":"IdentifierPath","referencedDeclaration":4492,"src":"409:9:19"},"referencedDeclaration":4492,"src":"409:9:19","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_storage_ptr","typeString":"struct PassKeyId"}},"visibility":"internal"},{"constant":false,"id":3455,"mutability":"mutable","name":"isPassKeyOwnerEnabled","nameLocation":"443:21:19","nodeType":"VariableDeclaration","scope":4096,"src":"438:26:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3454,"name":"bool","nodeType":"ElementaryTypeName","src":"438:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3457,"mutability":"mutable","name":"nonce","nameLocation":"479:5:19","nodeType":"VariableDeclaration","scope":4096,"src":"471:13:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3456,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"body":{"id":3463,"nodeType":"Block","src":"505:39:19","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3460,"name":"_disableInitializers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":583,"src":"515:20:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3461,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"515:22:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3462,"nodeType":"ExpressionStatement","src":"515:22:19"}]},"id":3464,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3458,"nodeType":"ParameterList","parameters":[],"src":"502:2:19"},"returnParameters":{"id":3459,"nodeType":"ParameterList","parameters":[],"src":"505:0:19"},"scope":4096,"src":"491:53:19","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3471,"nodeType":"Block","src":"631:36:19","statements":[{"expression":{"id":3469,"name":"addressOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3450,"src":"648:12:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3468,"id":3470,"nodeType":"Return","src":"641:19:19"}]},"functionSelector":"b627e20f","id":3472,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressOwner","nameLocation":"583:15:19","nodeType":"FunctionDefinition","parameters":{"id":3465,"nodeType":"ParameterList","parameters":[],"src":"598:2:19"},"returnParameters":{"id":3468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3467,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3472,"src":"622:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3466,"name":"address","nodeType":"ElementaryTypeName","src":"622:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"621:9:19"},"scope":4096,"src":"574:93:19","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3480,"nodeType":"Block","src":"739:36:19","statements":[{"expression":{"id":3478,"name":"passKeyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3453,"src":"756:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_storage","typeString":"struct PassKeyId storage ref"}},"functionReturnParameters":3477,"id":3479,"nodeType":"Return","src":"749:19:19"}]},"functionSelector":"8fb41072","id":3481,"implemented":true,"kind":"function","modifiers":[],"name":"getPassKeyOwner","nameLocation":"682:15:19","nodeType":"FunctionDefinition","parameters":{"id":3473,"nodeType":"ParameterList","parameters":[],"src":"697:2:19"},"returnParameters":{"id":3477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3476,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3481,"src":"721:16:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId"},"typeName":{"id":3475,"nodeType":"UserDefinedTypeName","pathNode":{"id":3474,"name":"PassKeyId","nameLocations":["721:9:19"],"nodeType":"IdentifierPath","referencedDeclaration":4492,"src":"721:9:19"},"referencedDeclaration":4492,"src":"721:9:19","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_storage_ptr","typeString":"struct PassKeyId"}},"visibility":"internal"}],"src":"720:18:19"},"scope":4096,"src":"673:102:19","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3488,"nodeType":"Block","src":"839:45:19","statements":[{"expression":{"id":3486,"name":"isPassKeyOwnerEnabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3455,"src":"856:21:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3485,"id":3487,"nodeType":"Return","src":"849:28:19"}]},"functionSelector":"be9ef843","id":3489,"implemented":true,"kind":"function","modifiers":[],"name":"passKeyOwnerEnabled","nameLocation":"790:19:19","nodeType":"FunctionDefinition","parameters":{"id":3482,"nodeType":"ParameterList","parameters":[],"src":"809:2:19"},"returnParameters":{"id":3485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3484,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3489,"src":"833:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3483,"name":"bool","nodeType":"ElementaryTypeName","src":"833:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"832:6:19"},"scope":4096,"src":"781:103:19","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3496,"nodeType":"Block","src":"940:29:19","statements":[{"expression":{"id":3494,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3457,"src":"957:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3493,"id":3495,"nodeType":"Return","src":"950:12:19"}]},"functionSelector":"d087d288","id":3497,"implemented":true,"kind":"function","modifiers":[],"name":"getNonce","nameLocation":"899:8:19","nodeType":"FunctionDefinition","parameters":{"id":3490,"nodeType":"ParameterList","parameters":[],"src":"907:2:19"},"returnParameters":{"id":3493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3492,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3497,"src":"931:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3491,"name":"uint256","nodeType":"ElementaryTypeName","src":"931:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"930:9:19"},"scope":4096,"src":"890:79:19","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3529,"nodeType":"Block","src":"1040:426:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3503,"name":"isPassKeyOwnerEnabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3455,"src":"1071:21:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"74727565","id":3504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1096:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1071:29:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4163636f756e743a20416c72656164792061646472657373206f776e657220656e61626c6564","id":3506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1114:40:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_d6ea98b2aade4ee56b047f7fad4ff7b21701dfa2d616d441c124a19b48144b6c","typeString":"literal_string \"Account: Already address owner enabled\""},"value":"Account: Already address owner enabled"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d6ea98b2aade4ee56b047f7fad4ff7b21701dfa2d616d441c124a19b48144b6c","typeString":"literal_string \"Account: Already address owner enabled\""}],"id":3502,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1050:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1050:114:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3508,"nodeType":"ExpressionStatement","src":"1050:114:19"},{"assignments":[3510],"declarations":[{"constant":false,"id":3510,"mutability":"mutable","name":"newOwner","nameLocation":"1245:8:19","nodeType":"VariableDeclaration","scope":3529,"src":"1237:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3509,"name":"address","nodeType":"ElementaryTypeName","src":"1237:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3511,"nodeType":"VariableDeclarationStatement","src":"1237:16:19"},{"AST":{"nodeType":"YulBlock","src":"1272:60:19","statements":[{"nodeType":"YulAssignment","src":"1286:36:19","value":{"arguments":[{"arguments":[{"name":"argument","nodeType":"YulIdentifier","src":"1308:8:19"},{"kind":"number","nodeType":"YulLiteral","src":"1318:2:19","type":"","value":"20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1304:3:19"},"nodeType":"YulFunctionCall","src":"1304:17:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1298:5:19"},"nodeType":"YulFunctionCall","src":"1298:24:19"},"variableNames":[{"name":"newOwner","nodeType":"YulIdentifier","src":"1286:8:19"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3499,"isOffset":false,"isSlot":false,"src":"1308:8:19","valueSize":1},{"declaration":3510,"isOffset":false,"isSlot":false,"src":"1286:8:19","valueSize":1}],"id":3512,"nodeType":"InlineAssembly","src":"1263:69:19"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":3515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1371:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":3516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1374:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"","id":3517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1377:2:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":3514,"name":"PassKeyId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4492,"src":"1361:9:19","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_PassKeyId_$4492_storage_ptr_$","typeString":"type(struct PassKeyId storage pointer)"}},"id":3518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1361:19:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId memory"}],"id":3513,"name":"_changePassKeyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3596,"src":"1341:19:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_PassKeyId_$4492_memory_ptr_$returns$__$","typeString":"function (struct PassKeyId memory)"}},"id":3519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1341:40:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3520,"nodeType":"ExpressionStatement","src":"1341:40:19"},{"expression":{"arguments":[{"id":3522,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"1411:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3521,"name":"_changeAddressOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3606,"src":"1391:19:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1391:29:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3524,"nodeType":"ExpressionStatement","src":"1391:29:19"},{"expression":{"id":3527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3525,"name":"isPassKeyOwnerEnabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3455,"src":"1430:21:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":3526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1454:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1430:29:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3528,"nodeType":"ExpressionStatement","src":"1430:29:19"}]},"id":3530,"implemented":true,"kind":"function","modifiers":[],"name":"changeOwnershipToAddress","nameLocation":"984:24:19","nodeType":"FunctionDefinition","parameters":{"id":3500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3499,"mutability":"mutable","name":"argument","nameLocation":"1022:8:19","nodeType":"VariableDeclaration","scope":3530,"src":"1009:21:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3498,"name":"bytes","nodeType":"ElementaryTypeName","src":"1009:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1008:23:19"},"returnParameters":{"id":3501,"nodeType":"ParameterList","parameters":[],"src":"1040:0:19"},"scope":4096,"src":"975:491:19","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":3584,"nodeType":"Block","src":"1544:472:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3536,"name":"isPassKeyOwnerEnabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3455,"src":"1575:21:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"66616c7365","id":3537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1600:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1575:30:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4163636f756e743a20416c726561647920706173736b6579206f776e657220656e61626c6564","id":3539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1619:40:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_ade28ecbe05afbe0a16abe84a19982c52fced354a615b5ddebee48b939e04297","typeString":"literal_string \"Account: Already passkey owner enabled\""},"value":"Account: Already passkey owner enabled"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ade28ecbe05afbe0a16abe84a19982c52fced354a615b5ddebee48b939e04297","typeString":"literal_string \"Account: Already passkey owner enabled\""}],"id":3535,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1554:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1554:115:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3541,"nodeType":"ExpressionStatement","src":"1554:115:19"},{"assignments":[3543,3545,3547],"declarations":[{"constant":false,"id":3543,"mutability":"mutable","name":"pubKeyX","nameLocation":"1688:7:19","nodeType":"VariableDeclaration","scope":3584,"src":"1680:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3542,"name":"uint256","nodeType":"ElementaryTypeName","src":"1680:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3545,"mutability":"mutable","name":"pubKeyY","nameLocation":"1705:7:19","nodeType":"VariableDeclaration","scope":3584,"src":"1697:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3544,"name":"uint256","nodeType":"ElementaryTypeName","src":"1697:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3547,"mutability":"mutable","name":"keyId","nameLocation":"1728:5:19","nodeType":"VariableDeclaration","scope":3584,"src":"1714:19:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3546,"name":"string","nodeType":"ElementaryTypeName","src":"1714:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":3559,"initialValue":{"arguments":[{"id":3550,"name":"argument","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3532,"src":"1761:8:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":3552,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1784:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3551,"name":"uint256","nodeType":"ElementaryTypeName","src":"1784:7:19","typeDescriptions":{}}},{"id":3554,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1793:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3553,"name":"uint256","nodeType":"ElementaryTypeName","src":"1793:7:19","typeDescriptions":{}}},{"id":3556,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1802:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3555,"name":"string","nodeType":"ElementaryTypeName","src":"1802:6:19","typeDescriptions":{}}}],"id":3557,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1783:26:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_uint256_$_$_t_type$_t_uint256_$_$_t_type$_t_string_storage_ptr_$_$","typeString":"tuple(type(uint256),type(uint256),type(string storage pointer))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_uint256_$_$_t_type$_t_uint256_$_$_t_type$_t_string_storage_ptr_$_$","typeString":"tuple(type(uint256),type(uint256),type(string storage pointer))"}],"expression":{"id":3548,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1737:3:19","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3549,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1741:6:19","memberName":"decode","nodeType":"MemberAccess","src":"1737:10:19","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1737:82:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$","typeString":"tuple(uint256,uint256,string memory)"}},"nodeType":"VariableDeclarationStatement","src":"1679:140:19"},{"assignments":[3562],"declarations":[{"constant":false,"id":3562,"mutability":"mutable","name":"newOwner","nameLocation":"1846:8:19","nodeType":"VariableDeclaration","scope":3584,"src":"1829:25:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId"},"typeName":{"id":3561,"nodeType":"UserDefinedTypeName","pathNode":{"id":3560,"name":"PassKeyId","nameLocations":["1829:9:19"],"nodeType":"IdentifierPath","referencedDeclaration":4492,"src":"1829:9:19"},"referencedDeclaration":4492,"src":"1829:9:19","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_storage_ptr","typeString":"struct PassKeyId"}},"visibility":"internal"}],"id":3568,"initialValue":{"arguments":[{"id":3564,"name":"pubKeyX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3543,"src":"1867:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3565,"name":"pubKeyY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3545,"src":"1876:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3566,"name":"keyId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3547,"src":"1885:5:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3563,"name":"PassKeyId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4492,"src":"1857:9:19","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_PassKeyId_$4492_storage_ptr_$","typeString":"type(struct PassKeyId storage pointer)"}},"id":3567,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1857:34:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId memory"}},"nodeType":"VariableDeclarationStatement","src":"1829:62:19"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":3572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1929:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3571,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1921:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3570,"name":"address","nodeType":"ElementaryTypeName","src":"1921:7:19","typeDescriptions":{}}},"id":3573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1921:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3569,"name":"_changeAddressOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3606,"src":"1901:19:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1901:31:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3575,"nodeType":"ExpressionStatement","src":"1901:31:19"},{"expression":{"arguments":[{"id":3577,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"1962:8:19","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId memory"}],"id":3576,"name":"_changePassKeyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3596,"src":"1942:19:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_PassKeyId_$4492_memory_ptr_$returns$__$","typeString":"function (struct PassKeyId memory)"}},"id":3578,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1942:29:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3579,"nodeType":"ExpressionStatement","src":"1942:29:19"},{"expression":{"id":3582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3580,"name":"isPassKeyOwnerEnabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3455,"src":"1981:21:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2005:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1981:28:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3583,"nodeType":"ExpressionStatement","src":"1981:28:19"}]},"id":3585,"implemented":true,"kind":"function","modifiers":[],"name":"changeOwnershipToPassKeyAddress","nameLocation":"1481:31:19","nodeType":"FunctionDefinition","parameters":{"id":3533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3532,"mutability":"mutable","name":"argument","nameLocation":"1526:8:19","nodeType":"VariableDeclaration","scope":3585,"src":"1513:21:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3531,"name":"bytes","nodeType":"ElementaryTypeName","src":"1513:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1512:23:19"},"returnParameters":{"id":3534,"nodeType":"ParameterList","parameters":[],"src":"1544:0:19"},"scope":4096,"src":"1472:544:19","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":3595,"nodeType":"Block","src":"2129:40:19","statements":[{"expression":{"id":3593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3591,"name":"passKeyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3453,"src":"2139:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_storage","typeString":"struct PassKeyId storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3592,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3588,"src":"2154:8:19","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId memory"}},"src":"2139:23:19","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_storage","typeString":"struct PassKeyId storage ref"}},"id":3594,"nodeType":"ExpressionStatement","src":"2139:23:19"}]},"id":3596,"implemented":true,"kind":"function","modifiers":[],"name":"_changePassKeyOwner","nameLocation":"2074:19:19","nodeType":"FunctionDefinition","parameters":{"id":3589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3588,"mutability":"mutable","name":"newOwner","nameLocation":"2111:8:19","nodeType":"VariableDeclaration","scope":3596,"src":"2094:25:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId"},"typeName":{"id":3587,"nodeType":"UserDefinedTypeName","pathNode":{"id":3586,"name":"PassKeyId","nameLocations":["2094:9:19"],"nodeType":"IdentifierPath","referencedDeclaration":4492,"src":"2094:9:19"},"referencedDeclaration":4492,"src":"2094:9:19","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_storage_ptr","typeString":"struct PassKeyId"}},"visibility":"internal"}],"src":"2093:27:19"},"returnParameters":{"id":3590,"nodeType":"ParameterList","parameters":[],"src":"2129:0:19"},"scope":4096,"src":"2065:104:19","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":3605,"nodeType":"Block","src":"2230:40:19","statements":[{"expression":{"id":3603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3601,"name":"addressOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3450,"src":"2240:12:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3602,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3598,"src":"2255:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2240:23:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3604,"nodeType":"ExpressionStatement","src":"2240:23:19"}]},"id":3606,"implemented":true,"kind":"function","modifiers":[],"name":"_changeAddressOwner","nameLocation":"2184:19:19","nodeType":"FunctionDefinition","parameters":{"id":3599,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3598,"mutability":"mutable","name":"newOwner","nameLocation":"2212:8:19","nodeType":"VariableDeclaration","scope":3606,"src":"2204:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3597,"name":"address","nodeType":"ElementaryTypeName","src":"2204:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2203:18:19"},"returnParameters":{"id":3600,"nodeType":"ParameterList","parameters":[],"src":"2230:0:19"},"scope":4096,"src":"2175:95:19","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":3622,"nodeType":"Block","src":"2349:75:19","statements":[{"expression":{"id":3616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3614,"name":"isPassKeyOwnerEnabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3455,"src":"2359:21:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2383:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2359:28:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3617,"nodeType":"ExpressionStatement","src":"2359:28:19"},{"expression":{"arguments":[{"id":3619,"name":"anOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3609,"src":"2409:7:19","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId memory"}],"id":3618,"name":"_initialize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"2397:11:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_PassKeyId_$4492_memory_ptr_$returns$__$","typeString":"function (struct PassKeyId memory)"}},"id":3620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2397:20:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3621,"nodeType":"ExpressionStatement","src":"2397:20:19"}]},"functionSelector":"759a68c0","id":3623,"implemented":true,"kind":"function","modifiers":[{"id":3612,"kind":"modifierInvocation","modifierName":{"id":3611,"name":"initializer","nameLocations":["2337:11:19"],"nodeType":"IdentifierPath","referencedDeclaration":504,"src":"2337:11:19"},"nodeType":"ModifierInvocation","src":"2337:11:19"}],"name":"initialize","nameLocation":"2285:10:19","nodeType":"FunctionDefinition","parameters":{"id":3610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3609,"mutability":"mutable","name":"anOwner","nameLocation":"2313:7:19","nodeType":"VariableDeclaration","scope":3623,"src":"2296:24:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId"},"typeName":{"id":3608,"nodeType":"UserDefinedTypeName","pathNode":{"id":3607,"name":"PassKeyId","nameLocations":["2296:9:19"],"nodeType":"IdentifierPath","referencedDeclaration":4492,"src":"2296:9:19"},"referencedDeclaration":4492,"src":"2296:9:19","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_storage_ptr","typeString":"struct PassKeyId"}},"visibility":"internal"}],"src":"2295:26:19"},"returnParameters":{"id":3613,"nodeType":"ParameterList","parameters":[],"src":"2349:0:19"},"scope":4096,"src":"2276:148:19","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":3633,"nodeType":"Block","src":"2494:39:19","statements":[{"expression":{"id":3631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3629,"name":"passKeyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3453,"src":"2504:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_storage","typeString":"struct PassKeyId storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3630,"name":"anOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3626,"src":"2519:7:19","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId memory"}},"src":"2504:22:19","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_storage","typeString":"struct PassKeyId storage ref"}},"id":3632,"nodeType":"ExpressionStatement","src":"2504:22:19"}]},"id":3634,"implemented":true,"kind":"function","modifiers":[],"name":"_initialize","nameLocation":"2439:11:19","nodeType":"FunctionDefinition","parameters":{"id":3627,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3626,"mutability":"mutable","name":"anOwner","nameLocation":"2468:7:19","nodeType":"VariableDeclaration","scope":3634,"src":"2451:24:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId"},"typeName":{"id":3625,"nodeType":"UserDefinedTypeName","pathNode":{"id":3624,"name":"PassKeyId","nameLocations":["2451:9:19"],"nodeType":"IdentifierPath","referencedDeclaration":4492,"src":"2451:9:19"},"referencedDeclaration":4492,"src":"2451:9:19","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_storage_ptr","typeString":"struct PassKeyId"}},"visibility":"internal"}],"src":"2450:26:19"},"returnParameters":{"id":3628,"nodeType":"ParameterList","parameters":[],"src":"2494:0:19"},"scope":4096,"src":"2430:103:19","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3717,"nodeType":"Block","src":"2636:809:19","statements":[{"assignments":[3641],"declarations":[{"constant":false,"id":3641,"mutability":"mutable","name":"sigVerification","nameLocation":"2691:15:19","nodeType":"VariableDeclaration","scope":3717,"src":"2683:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3640,"name":"uint256","nodeType":"ElementaryTypeName","src":"2683:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3645,"initialValue":{"arguments":[{"id":3643,"name":"userop","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3637,"src":"2725:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOp_$5271_calldata_ptr","typeString":"struct UserOp calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_UserOp_$5271_calldata_ptr","typeString":"struct UserOp calldata"}],"id":3642,"name":"_validateUserOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3937,"src":"2709:15:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_UserOp_$5271_calldata_ptr_$returns$_t_uint256_$","typeString":"function (struct UserOp calldata) view returns (uint256)"}},"id":3644,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2709:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2683:49:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3647,"name":"sigVerification","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3641,"src":"2750:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2769:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2750:20:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4163636f756e743a205369676e617475726520766572696669636174696f6e206661696c6564","id":3650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2772:40:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_e1d770bf5c1432fdc1f1cdef4b574f4afc7ec7d461e8909e9c76b9d3d064d3ee","typeString":"literal_string \"Account: Signature verification failed\""},"value":"Account: Signature verification failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e1d770bf5c1432fdc1f1cdef4b574f4afc7ec7d461e8909e9c76b9d3d064d3ee","typeString":"literal_string \"Account: Signature verification failed\""}],"id":3646,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2742:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2742:71:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3652,"nodeType":"ExpressionStatement","src":"2742:71:19"},{"assignments":[3654],"declarations":[{"constant":false,"id":3654,"mutability":"mutable","name":"nonceVerification","nameLocation":"2857:17:19","nodeType":"VariableDeclaration","scope":3717,"src":"2849:25:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3653,"name":"uint256","nodeType":"ElementaryTypeName","src":"2849:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3658,"initialValue":{"arguments":[{"id":3656,"name":"userop","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3637,"src":"2892:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOp_$5271_calldata_ptr","typeString":"struct UserOp calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_UserOp_$5271_calldata_ptr","typeString":"struct UserOp calldata"}],"id":3655,"name":"_validateNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"2877:14:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_UserOp_$5271_calldata_ptr_$returns$_t_uint256_$","typeString":"function (struct UserOp calldata) view returns (uint256)"}},"id":3657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2877:22:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2849:50:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3660,"name":"nonceVerification","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3654,"src":"2917:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2938:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2917:22:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4163636f756e743a204e6f6e636520766572696669636174696f6e206661696c6564","id":3663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2941:36:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_9c85fa2bd6d894dd5c3a5d7983fc412dc7e09fddeef87c1fb3533b2261ee92cb","typeString":"literal_string \"Account: Nonce verification failed\""},"value":"Account: Nonce verification failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9c85fa2bd6d894dd5c3a5d7983fc412dc7e09fddeef87c1fb3533b2261ee92cb","typeString":"literal_string \"Account: Nonce verification failed\""}],"id":3659,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2909:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3664,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2909:69:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3665,"nodeType":"ExpressionStatement","src":"2909:69:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3666,"name":"userop","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3637,"src":"3011:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOp_$5271_calldata_ptr","typeString":"struct UserOp calldata"}},"id":3667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3018:12:19","memberName":"functionType","nodeType":"MemberAccess","referencedDeclaration":5264,"src":"3011:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3034:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3011:24:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3676,"nodeType":"IfStatement","src":"3007:79:19","trueBody":{"id":3675,"nodeType":"Block","src":"3037:49:19","statements":[{"expression":{"arguments":[{"expression":{"id":3671,"name":"userop","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3637,"src":"3059:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOp_$5271_calldata_ptr","typeString":"struct UserOp calldata"}},"id":3672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3066:8:19","memberName":"argument","nodeType":"MemberAccess","referencedDeclaration":5266,"src":"3059:15:19","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":3670,"name":"execute","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3749,"src":"3051:7:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory)"}},"id":3673,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3051:24:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3674,"nodeType":"ExpressionStatement","src":"3051:24:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3677,"name":"userop","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3637,"src":"3099:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOp_$5271_calldata_ptr","typeString":"struct UserOp calldata"}},"id":3678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3106:12:19","memberName":"functionType","nodeType":"MemberAccess","referencedDeclaration":5264,"src":"3099:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":3679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3122:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3099:24:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3687,"nodeType":"IfStatement","src":"3095:84:19","trueBody":{"id":3686,"nodeType":"Block","src":"3125:54:19","statements":[{"expression":{"arguments":[{"expression":{"id":3682,"name":"userop","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3637,"src":"3152:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOp_$5271_calldata_ptr","typeString":"struct UserOp calldata"}},"id":3683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3159:8:19","memberName":"argument","nodeType":"MemberAccess","referencedDeclaration":5266,"src":"3152:15:19","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":3681,"name":"executeBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3858,"src":"3139:12:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory)"}},"id":3684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3139:29:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3685,"nodeType":"ExpressionStatement","src":"3139:29:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3688,"name":"userop","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3637,"src":"3192:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOp_$5271_calldata_ptr","typeString":"struct UserOp calldata"}},"id":3689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3199:12:19","memberName":"functionType","nodeType":"MemberAccess","referencedDeclaration":5264,"src":"3192:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"32","id":3690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3215:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"3192:24:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3698,"nodeType":"IfStatement","src":"3188:96:19","trueBody":{"id":3697,"nodeType":"Block","src":"3218:66:19","statements":[{"expression":{"arguments":[{"expression":{"id":3693,"name":"userop","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3637,"src":"3257:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOp_$5271_calldata_ptr","typeString":"struct UserOp calldata"}},"id":3694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3264:8:19","memberName":"argument","nodeType":"MemberAccess","referencedDeclaration":5266,"src":"3257:15:19","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":3692,"name":"changeOwnershipToAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3530,"src":"3232:24:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory)"}},"id":3695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3232:41:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3696,"nodeType":"ExpressionStatement","src":"3232:41:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3699,"name":"userop","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3637,"src":"3297:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOp_$5271_calldata_ptr","typeString":"struct UserOp calldata"}},"id":3700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3304:12:19","memberName":"functionType","nodeType":"MemberAccess","referencedDeclaration":5264,"src":"3297:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"33","id":3701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3320:1:19","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"3297:24:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3709,"nodeType":"IfStatement","src":"3293:103:19","trueBody":{"id":3708,"nodeType":"Block","src":"3323:73:19","statements":[{"expression":{"arguments":[{"expression":{"id":3704,"name":"userop","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3637,"src":"3369:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOp_$5271_calldata_ptr","typeString":"struct UserOp calldata"}},"id":3705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3376:8:19","memberName":"argument","nodeType":"MemberAccess","referencedDeclaration":5266,"src":"3369:15:19","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":3703,"name":"changeOwnershipToPassKeyAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3585,"src":"3337:31:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory)"}},"id":3706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3337:48:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3707,"nodeType":"ExpressionStatement","src":"3337:48:19"}]}},{"expression":{"id":3714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3710,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3457,"src":"3405:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3711,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3457,"src":"3413:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3421:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3413:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3405:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3715,"nodeType":"ExpressionStatement","src":"3405:17:19"},{"functionReturnParameters":3639,"id":3716,"nodeType":"Return","src":"3432:7:19"}]},"functionSelector":"f0f05cef","id":3718,"implemented":true,"kind":"function","modifiers":[],"name":"entrypoint","nameLocation":"2594:10:19","nodeType":"FunctionDefinition","parameters":{"id":3638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3637,"mutability":"mutable","name":"userop","nameLocation":"2621:6:19","nodeType":"VariableDeclaration","scope":3718,"src":"2605:22:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOp_$5271_calldata_ptr","typeString":"struct UserOp"},"typeName":{"id":3636,"nodeType":"UserDefinedTypeName","pathNode":{"id":3635,"name":"UserOp","nameLocations":["2605:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":5271,"src":"2605:6:19"},"referencedDeclaration":5271,"src":"2605:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOp_$5271_storage_ptr","typeString":"struct UserOp"}},"visibility":"internal"}],"src":"2604:24:19"},"returnParameters":{"id":3639,"nodeType":"ParameterList","parameters":[],"src":"2636:0:19"},"scope":4096,"src":"2585:860:19","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3748,"nodeType":"Block","src":"3591:183:19","statements":[{"assignments":[3725,3727,3729],"declarations":[{"constant":false,"id":3725,"mutability":"mutable","name":"dest","nameLocation":"3610:4:19","nodeType":"VariableDeclaration","scope":3748,"src":"3602:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3724,"name":"address","nodeType":"ElementaryTypeName","src":"3602:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3727,"mutability":"mutable","name":"value","nameLocation":"3624:5:19","nodeType":"VariableDeclaration","scope":3748,"src":"3616:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3726,"name":"uint256","nodeType":"ElementaryTypeName","src":"3616:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3729,"mutability":"mutable","name":"func","nameLocation":"3644:4:19","nodeType":"VariableDeclaration","scope":3748,"src":"3631:17:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3728,"name":"bytes","nodeType":"ElementaryTypeName","src":"3631:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3741,"initialValue":{"arguments":[{"id":3732,"name":"argument","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3721,"src":"3676:8:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":3734,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3699:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3733,"name":"address","nodeType":"ElementaryTypeName","src":"3699:7:19","typeDescriptions":{}}},{"id":3736,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3708:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3735,"name":"uint256","nodeType":"ElementaryTypeName","src":"3708:7:19","typeDescriptions":{}}},{"id":3738,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3717:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3737,"name":"bytes","nodeType":"ElementaryTypeName","src":"3717:5:19","typeDescriptions":{}}}],"id":3739,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3698:25:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_address_$_$_t_type$_t_uint256_$_$_t_type$_t_bytes_storage_ptr_$_$","typeString":"tuple(type(address),type(uint256),type(bytes storage pointer))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_address_$_$_t_type$_t_uint256_$_$_t_type$_t_bytes_storage_ptr_$_$","typeString":"tuple(type(address),type(uint256),type(bytes storage pointer))"}],"expression":{"id":3730,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3652:3:19","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3731,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3656:6:19","memberName":"decode","nodeType":"MemberAccess","src":"3652:10:19","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3652:81:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_payable_$_t_uint256_$_t_bytes_memory_ptr_$","typeString":"tuple(address payable,uint256,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3601:132:19"},{"expression":{"arguments":[{"id":3743,"name":"dest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3725,"src":"3749:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3744,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"3755:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3745,"name":"func","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"3762:4:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3742,"name":"_call","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3884,"src":"3743:5:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":3746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3743:24:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3747,"nodeType":"ExpressionStatement","src":"3743:24:19"}]},"documentation":{"id":3719,"nodeType":"StructuredDocumentation","src":"3451:87:19","text":" execute a transaction (called directly from owner, or by entryPoint)"},"id":3749,"implemented":true,"kind":"function","modifiers":[],"name":"execute","nameLocation":"3552:7:19","nodeType":"FunctionDefinition","parameters":{"id":3722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3721,"mutability":"mutable","name":"argument","nameLocation":"3573:8:19","nodeType":"VariableDeclaration","scope":3749,"src":"3560:21:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3720,"name":"bytes","nodeType":"ElementaryTypeName","src":"3560:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3559:23:19"},"returnParameters":{"id":3723,"nodeType":"ParameterList","parameters":[],"src":"3591:0:19"},"scope":4096,"src":"3543:231:19","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":3857,"nodeType":"Block","src":"4001:654:19","statements":[{"assignments":[3759,3762,3765],"declarations":[{"constant":false,"id":3759,"mutability":"mutable","name":"dest","nameLocation":"4042:4:19","nodeType":"VariableDeclaration","scope":3857,"src":"4025:21:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3757,"name":"address","nodeType":"ElementaryTypeName","src":"4025:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3758,"nodeType":"ArrayTypeName","src":"4025:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":3762,"mutability":"mutable","name":"value","nameLocation":"4077:5:19","nodeType":"VariableDeclaration","scope":3857,"src":"4060:22:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3760,"name":"uint256","nodeType":"ElementaryTypeName","src":"4060:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3761,"nodeType":"ArrayTypeName","src":"4060:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3765,"mutability":"mutable","name":"func","nameLocation":"4111:4:19","nodeType":"VariableDeclaration","scope":3857,"src":"4096:19:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":3763,"name":"bytes","nodeType":"ElementaryTypeName","src":"4096:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":3764,"nodeType":"ArrayTypeName","src":"4096:7:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"id":3780,"initialValue":{"arguments":[{"id":3768,"name":"argument","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3752,"src":"4139:8:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"baseExpression":{"id":3770,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4150:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3769,"name":"address","nodeType":"ElementaryTypeName","src":"4150:7:19","typeDescriptions":{}}},"id":3771,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"4150:9:19","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"type(address[] memory)"}},{"baseExpression":{"id":3773,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4161:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3772,"name":"uint256","nodeType":"ElementaryTypeName","src":"4161:7:19","typeDescriptions":{}}},"id":3774,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"4161:9:19","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"type(uint256[] memory)"}},{"baseExpression":{"id":3776,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4172:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3775,"name":"bytes","nodeType":"ElementaryTypeName","src":"4172:5:19","typeDescriptions":{}}},"id":3777,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"4172:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$","typeString":"type(bytes memory[] memory)"}}],"id":3778,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4149:31:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_array$_t_address_$dyn_memory_ptr_$_$_t_type$_t_array$_t_uint256_$dyn_memory_ptr_$_$_t_type$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$_$","typeString":"tuple(type(address[] memory),type(uint256[] memory),type(bytes memory[] memory))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_array$_t_address_$dyn_memory_ptr_$_$_t_type$_t_array$_t_uint256_$dyn_memory_ptr_$_$_t_type$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$_$","typeString":"tuple(type(address[] memory),type(uint256[] memory),type(bytes memory[] memory))"}],"expression":{"id":3766,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4128:3:19","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3767,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4132:6:19","memberName":"decode","nodeType":"MemberAccess","src":"4128:10:19","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4128:53:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_address_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$","typeString":"tuple(address[] memory,uint256[] memory,bytes memory[] memory)"}},"nodeType":"VariableDeclarationStatement","src":"4011:170:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3782,"name":"dest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"4212:4:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4217:6:19","memberName":"length","nodeType":"MemberAccess","src":"4212:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3784,"name":"func","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3765,"src":"4227:4:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":3785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4232:6:19","memberName":"length","nodeType":"MemberAccess","src":"4227:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4212:26:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3787,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3762,"src":"4259:5:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4265:6:19","memberName":"length","nodeType":"MemberAccess","src":"4259:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3789,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4275:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4259:17:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3791,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3762,"src":"4280:5:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4286:6:19","memberName":"length","nodeType":"MemberAccess","src":"4280:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3793,"name":"func","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3765,"src":"4296:4:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":3794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4301:6:19","memberName":"length","nodeType":"MemberAccess","src":"4296:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4280:27:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4259:48:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3797,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4258:50:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4212:96:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"77726f6e67206172726179206c656e67746873","id":3799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4322:21:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_046f63b53432b31c38dcec6b5f05e3d65602d684f9163a89310aaaf94e08558e","typeString":"literal_string \"wrong array lengths\""},"value":"wrong array lengths"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_046f63b53432b31c38dcec6b5f05e3d65602d684f9163a89310aaaf94e08558e","typeString":"literal_string \"wrong array lengths\""}],"id":3781,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4191:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3800,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4191:162:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3801,"nodeType":"ExpressionStatement","src":"4191:162:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3802,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3762,"src":"4367:5:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4373:6:19","memberName":"length","nodeType":"MemberAccess","src":"4367:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4383:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4367:17:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3855,"nodeType":"Block","src":"4517:132:19","statements":[{"body":{"id":3853,"nodeType":"Block","src":"4573:66:19","statements":[{"expression":{"arguments":[{"baseExpression":{"id":3842,"name":"dest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"4597:4:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3844,"indexExpression":{"id":3843,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3831,"src":"4602:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4597:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":3845,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3762,"src":"4606:5:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3847,"indexExpression":{"id":3846,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3831,"src":"4612:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4606:8:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":3848,"name":"func","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3765,"src":"4616:4:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":3850,"indexExpression":{"id":3849,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3831,"src":"4621:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4616:7:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3841,"name":"_call","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3884,"src":"4591:5:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":3851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4591:33:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3852,"nodeType":"ExpressionStatement","src":"4591:33:19"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3834,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3831,"src":"4551:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3835,"name":"dest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"4555:4:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4560:6:19","memberName":"length","nodeType":"MemberAccess","src":"4555:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4551:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3854,"initializationExpression":{"assignments":[3831],"declarations":[{"constant":false,"id":3831,"mutability":"mutable","name":"i","nameLocation":"4544:1:19","nodeType":"VariableDeclaration","scope":3854,"src":"4536:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3830,"name":"uint256","nodeType":"ElementaryTypeName","src":"4536:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3833,"initialValue":{"hexValue":"30","id":3832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4548:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4536:13:19"},"loopExpression":{"expression":{"id":3839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4568:3:19","subExpression":{"id":3838,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3831,"src":"4568:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3840,"nodeType":"ExpressionStatement","src":"4568:3:19"},"nodeType":"ForStatement","src":"4531:108:19"}]},"id":3856,"nodeType":"IfStatement","src":"4363:286:19","trueBody":{"id":3829,"nodeType":"Block","src":"4386:125:19","statements":[{"body":{"id":3827,"nodeType":"Block","src":"4442:59:19","statements":[{"expression":{"arguments":[{"baseExpression":{"id":3818,"name":"dest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"4466:4:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3820,"indexExpression":{"id":3819,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"4471:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4466:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":3821,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4475:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"baseExpression":{"id":3822,"name":"func","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3765,"src":"4478:4:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":3824,"indexExpression":{"id":3823,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"4483:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4478:7:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3817,"name":"_call","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3884,"src":"4460:5:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":3825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4460:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3826,"nodeType":"ExpressionStatement","src":"4460:26:19"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3810,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"4420:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3811,"name":"dest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"4424:4:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4429:6:19","memberName":"length","nodeType":"MemberAccess","src":"4424:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4420:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3828,"initializationExpression":{"assignments":[3807],"declarations":[{"constant":false,"id":3807,"mutability":"mutable","name":"i","nameLocation":"4413:1:19","nodeType":"VariableDeclaration","scope":3828,"src":"4405:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3806,"name":"uint256","nodeType":"ElementaryTypeName","src":"4405:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3809,"initialValue":{"hexValue":"30","id":3808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4417:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4405:13:19"},"loopExpression":{"expression":{"id":3815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4437:3:19","subExpression":{"id":3814,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"4437:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3816,"nodeType":"ExpressionStatement","src":"4437:3:19"},"nodeType":"ForStatement","src":"4400:101:19"}]}}]},"documentation":{"id":3750,"nodeType":"StructuredDocumentation","src":"3780:163:19","text":" execute a sequence of transactions\n @dev to reduce gas consumption for trivial case (no value), use a zero-length array to mean zero value"},"id":3858,"implemented":true,"kind":"function","modifiers":[],"name":"executeBatch","nameLocation":"3957:12:19","nodeType":"FunctionDefinition","parameters":{"id":3753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3752,"mutability":"mutable","name":"argument","nameLocation":"3983:8:19","nodeType":"VariableDeclaration","scope":3858,"src":"3970:21:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3751,"name":"bytes","nodeType":"ElementaryTypeName","src":"3970:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3969:23:19"},"returnParameters":{"id":3754,"nodeType":"ParameterList","parameters":[],"src":"4001:0:19"},"scope":4096,"src":"3948:707:19","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":3883,"nodeType":"Block","src":"4735:212:19","statements":[{"assignments":[3868,3870],"declarations":[{"constant":false,"id":3868,"mutability":"mutable","name":"success","nameLocation":"4751:7:19","nodeType":"VariableDeclaration","scope":3883,"src":"4746:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3867,"name":"bool","nodeType":"ElementaryTypeName","src":"4746:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3870,"mutability":"mutable","name":"result","nameLocation":"4773:6:19","nodeType":"VariableDeclaration","scope":3883,"src":"4760:19:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3869,"name":"bytes","nodeType":"ElementaryTypeName","src":"4760:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3877,"initialValue":{"arguments":[{"id":3875,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3864,"src":"4809:4:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3871,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3860,"src":"4783:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4790:4:19","memberName":"call","nodeType":"MemberAccess","src":"4783:11:19","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3873,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3862,"src":"4802:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"4783:25:19","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4783:31:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4745:69:19"},{"condition":{"id":3879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4828:8:19","subExpression":{"id":3878,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3868,"src":"4829:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3882,"nodeType":"IfStatement","src":"4824:117:19","trueBody":{"id":3881,"nodeType":"Block","src":"4838:103:19","statements":[{"AST":{"nodeType":"YulBlock","src":"4861:70:19","statements":[{"expression":{"arguments":[{"arguments":[{"name":"result","nodeType":"YulIdentifier","src":"4890:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"4898:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4886:3:19"},"nodeType":"YulFunctionCall","src":"4886:15:19"},{"arguments":[{"name":"result","nodeType":"YulIdentifier","src":"4909:6:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4903:5:19"},"nodeType":"YulFunctionCall","src":"4903:13:19"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4879:6:19"},"nodeType":"YulFunctionCall","src":"4879:38:19"},"nodeType":"YulExpressionStatement","src":"4879:38:19"}]},"evmVersion":"paris","externalReferences":[{"declaration":3870,"isOffset":false,"isSlot":false,"src":"4890:6:19","valueSize":1},{"declaration":3870,"isOffset":false,"isSlot":false,"src":"4909:6:19","valueSize":1}],"id":3880,"nodeType":"InlineAssembly","src":"4852:79:19"}]}}]},"id":3884,"implemented":true,"kind":"function","modifiers":[],"name":"_call","nameLocation":"4670:5:19","nodeType":"FunctionDefinition","parameters":{"id":3865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3860,"mutability":"mutable","name":"target","nameLocation":"4684:6:19","nodeType":"VariableDeclaration","scope":3884,"src":"4676:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3859,"name":"address","nodeType":"ElementaryTypeName","src":"4676:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3862,"mutability":"mutable","name":"value","nameLocation":"4700:5:19","nodeType":"VariableDeclaration","scope":3884,"src":"4692:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3861,"name":"uint256","nodeType":"ElementaryTypeName","src":"4692:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3864,"mutability":"mutable","name":"data","nameLocation":"4720:4:19","nodeType":"VariableDeclaration","scope":3884,"src":"4707:17:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3863,"name":"bytes","nodeType":"ElementaryTypeName","src":"4707:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4675:50:19"},"returnParameters":{"id":3866,"nodeType":"ParameterList","parameters":[],"src":"4735:0:19"},"scope":4096,"src":"4661:286:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3936,"nodeType":"Block","src":"5102:500:19","statements":[{"assignments":[3893],"declarations":[{"constant":false,"id":3893,"mutability":"mutable","name":"userOpHash","nameLocation":"5120:10:19","nodeType":"VariableDeclaration","scope":3936,"src":"5112:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3892,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5112:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3897,"initialValue":{"arguments":[{"id":3895,"name":"userop","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"5147:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOp_$5271_calldata_ptr","typeString":"struct UserOp calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_UserOp_$5271_calldata_ptr","typeString":"struct UserOp calldata"}],"id":3894,"name":"getUserOpHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4091,"src":"5133:13:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_UserOp_$5271_calldata_ptr_$returns$_t_bytes32_$","typeString":"function (struct UserOp calldata) view returns (bytes32)"}},"id":3896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5133:21:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5112:42:19"},{"condition":{"id":3898,"name":"isPassKeyOwnerEnabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3455,"src":"5168:21:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3934,"nodeType":"Block","src":"5425:171:19","statements":[{"assignments":[3917],"declarations":[{"constant":false,"id":3917,"mutability":"mutable","name":"hash","nameLocation":"5447:4:19","nodeType":"VariableDeclaration","scope":3934,"src":"5439:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3916,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5439:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3921,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3918,"name":"userOpHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"5454:10:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5465:22:19","memberName":"toEthSignedMessageHash","nodeType":"MemberAccess","referencedDeclaration":2375,"src":"5454:33:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_bytes32_$attached_to$_t_bytes32_$","typeString":"function (bytes32) pure returns (bytes32)"}},"id":3920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5454:35:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5439:50:19"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3922,"name":"addressOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3450,"src":"5507:12:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"expression":{"id":3925,"name":"userop","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"5536:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOp_$5271_calldata_ptr","typeString":"struct UserOp calldata"}},"id":3926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5543:9:19","memberName":"signature","nodeType":"MemberAccess","referencedDeclaration":5270,"src":"5536:16:19","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"id":3923,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3917,"src":"5523:4:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5528:7:19","memberName":"recover","nodeType":"MemberAccess","referencedDeclaration":2191,"src":"5523:12:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$attached_to$_t_bytes32_$","typeString":"function (bytes32,bytes memory) pure returns (address)"}},"id":3927,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5523:30:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5507:46:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3931,"nodeType":"IfStatement","src":"5503:60:19","trueBody":{"expression":{"hexValue":"31","id":3929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5562:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"functionReturnParameters":3891,"id":3930,"nodeType":"Return","src":"5555:8:19"}},{"expression":{"hexValue":"30","id":3932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5584:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3891,"id":3933,"nodeType":"Return","src":"5577:8:19"}]},"id":3935,"nodeType":"IfStatement","src":"5164:432:19","trueBody":{"id":3915,"nodeType":"Block","src":"5191:228:19","statements":[{"assignments":[3900],"declarations":[{"constant":false,"id":3900,"mutability":"mutable","name":"isSigValid","nameLocation":"5210:10:19","nodeType":"VariableDeclaration","scope":3915,"src":"5205:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3899,"name":"bool","nodeType":"ElementaryTypeName","src":"5205:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3907,"initialValue":{"arguments":[{"expression":{"id":3902,"name":"userop","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"5259:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOp_$5271_calldata_ptr","typeString":"struct UserOp calldata"}},"id":3903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5266:9:19","memberName":"signature","nodeType":"MemberAccess","referencedDeclaration":5270,"src":"5259:16:19","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":3904,"name":"userOpHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"5293:10:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3905,"name":"passKeyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3453,"src":"5321:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_storage","typeString":"struct PassKeyId storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_struct$_PassKeyId_$4492_storage","typeString":"struct PassKeyId storage ref"}],"id":3901,"name":"validatePassKeySig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4067,"src":"5223:18:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$_t_bytes32_$_t_struct$_PassKeyId_$4492_memory_ptr_$returns$_t_bool_$","typeString":"function (bytes memory,bytes32,struct PassKeyId memory) view returns (bool)"}},"id":3906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5223:124:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"5205:142:19"},{"condition":{"id":3909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5365:11:19","subExpression":{"id":3908,"name":"isSigValid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3900,"src":"5366:10:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3912,"nodeType":"IfStatement","src":"5361:25:19","trueBody":{"expression":{"hexValue":"31","id":3910,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5385:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"functionReturnParameters":3891,"id":3911,"nodeType":"Return","src":"5378:8:19"}},{"expression":{"hexValue":"30","id":3913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5407:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3891,"id":3914,"nodeType":"Return","src":"5400:8:19"}]}}]},"id":3937,"implemented":true,"kind":"function","modifiers":[],"name":"_validateUserOp","nameLocation":"5016:15:19","nodeType":"FunctionDefinition","parameters":{"id":3888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3887,"mutability":"mutable","name":"userop","nameLocation":"5057:6:19","nodeType":"VariableDeclaration","scope":3937,"src":"5041:22:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOp_$5271_calldata_ptr","typeString":"struct UserOp"},"typeName":{"id":3886,"nodeType":"UserDefinedTypeName","pathNode":{"id":3885,"name":"UserOp","nameLocations":["5041:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":5271,"src":"5041:6:19"},"referencedDeclaration":5271,"src":"5041:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOp_$5271_storage_ptr","typeString":"struct UserOp"}},"visibility":"internal"}],"src":"5031:38:19"},"returnParameters":{"id":3891,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3890,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3937,"src":"5093:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3889,"name":"uint256","nodeType":"ElementaryTypeName","src":"5093:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5092:9:19"},"scope":4096,"src":"5007:595:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3954,"nodeType":"Block","src":"5745:70:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3945,"name":"userop","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3940,"src":"5759:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOp_$5271_calldata_ptr","typeString":"struct UserOp calldata"}},"id":3946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5766:5:19","memberName":"nonce","nodeType":"MemberAccess","referencedDeclaration":5268,"src":"5759:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3947,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3457,"src":"5775:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5759:21:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3951,"nodeType":"IfStatement","src":"5755:35:19","trueBody":{"expression":{"hexValue":"30","id":3949,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5789:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3944,"id":3950,"nodeType":"Return","src":"5782:8:19"}},{"expression":{"hexValue":"31","id":3952,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5807:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"functionReturnParameters":3944,"id":3953,"nodeType":"Return","src":"5800:8:19"}]},"id":3955,"implemented":true,"kind":"function","modifiers":[],"name":"_validateNonce","nameLocation":"5660:14:19","nodeType":"FunctionDefinition","parameters":{"id":3941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3940,"mutability":"mutable","name":"userop","nameLocation":"5700:6:19","nodeType":"VariableDeclaration","scope":3955,"src":"5684:22:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOp_$5271_calldata_ptr","typeString":"struct UserOp"},"typeName":{"id":3939,"nodeType":"UserDefinedTypeName","pathNode":{"id":3938,"name":"UserOp","nameLocations":["5684:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":5271,"src":"5684:6:19"},"referencedDeclaration":5271,"src":"5684:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOp_$5271_storage_ptr","typeString":"struct UserOp"}},"visibility":"internal"}],"src":"5674:38:19"},"returnParameters":{"id":3944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3943,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3955,"src":"5736:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3942,"name":"uint256","nodeType":"ElementaryTypeName","src":"5736:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5735:9:19"},"scope":4096,"src":"5651:164:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4066,"nodeType":"Block","src":"5976:987:19","statements":[{"assignments":[3968,3970,3972,3974,3976,3978],"declarations":[{"constant":false,"id":3968,"mutability":"mutable","name":"keyHash","nameLocation":"6008:7:19","nodeType":"VariableDeclaration","scope":4066,"src":"6000:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3967,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6000:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3970,"mutability":"mutable","name":"sigx","nameLocation":"6037:4:19","nodeType":"VariableDeclaration","scope":4066,"src":"6029:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3969,"name":"uint256","nodeType":"ElementaryTypeName","src":"6029:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3972,"mutability":"mutable","name":"sigy","nameLocation":"6063:4:19","nodeType":"VariableDeclaration","scope":4066,"src":"6055:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3971,"name":"uint256","nodeType":"ElementaryTypeName","src":"6055:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3974,"mutability":"mutable","name":"authenticatorData","nameLocation":"6094:17:19","nodeType":"VariableDeclaration","scope":4066,"src":"6081:30:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3973,"name":"bytes","nodeType":"ElementaryTypeName","src":"6081:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3976,"mutability":"mutable","name":"clientDataJSONPre","nameLocation":"6139:17:19","nodeType":"VariableDeclaration","scope":4066,"src":"6125:31:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3975,"name":"string","nodeType":"ElementaryTypeName","src":"6125:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3978,"mutability":"mutable","name":"clientDataJSONPost","nameLocation":"6184:18:19","nodeType":"VariableDeclaration","scope":4066,"src":"6170:32:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3977,"name":"string","nodeType":"ElementaryTypeName","src":"6170:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":3996,"initialValue":{"arguments":[{"id":3981,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3957,"src":"6243:9:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":3983,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6271:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3982,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6271:7:19","typeDescriptions":{}}},{"id":3985,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6280:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3984,"name":"uint256","nodeType":"ElementaryTypeName","src":"6280:7:19","typeDescriptions":{}}},{"id":3987,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6289:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3986,"name":"uint256","nodeType":"ElementaryTypeName","src":"6289:7:19","typeDescriptions":{}}},{"id":3989,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6298:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3988,"name":"bytes","nodeType":"ElementaryTypeName","src":"6298:5:19","typeDescriptions":{}}},{"id":3991,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6305:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3990,"name":"string","nodeType":"ElementaryTypeName","src":"6305:6:19","typeDescriptions":{}}},{"id":3993,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6313:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3992,"name":"string","nodeType":"ElementaryTypeName","src":"6313:6:19","typeDescriptions":{}}}],"id":3994,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6270:50:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_bytes32_$_$_t_type$_t_uint256_$_$_t_type$_t_uint256_$_$_t_type$_t_bytes_storage_ptr_$_$_t_type$_t_string_storage_ptr_$_$_t_type$_t_string_storage_ptr_$_$","typeString":"tuple(type(bytes32),type(uint256),type(uint256),type(bytes storage pointer),type(string storage pointer),type(string storage pointer))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_bytes32_$_$_t_type$_t_uint256_$_$_t_type$_t_uint256_$_$_t_type$_t_bytes_storage_ptr_$_$_t_type$_t_string_storage_ptr_$_$_t_type$_t_string_storage_ptr_$_$","typeString":"tuple(type(bytes32),type(uint256),type(uint256),type(bytes storage pointer),type(string storage pointer),type(string storage pointer))"}],"expression":{"id":3979,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6215:3:19","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3980,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6219:6:19","memberName":"decode","nodeType":"MemberAccess","src":"6215:10:19","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6215:119:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$","typeString":"tuple(bytes32,uint256,uint256,bytes memory,string memory,string memory)"}},"nodeType":"VariableDeclarationStatement","src":"5986:348:19"},{"assignments":[3998],"declarations":[{"constant":false,"id":3998,"mutability":"mutable","name":"execHashBase64","nameLocation":"6359:14:19","nodeType":"VariableDeclaration","scope":4066,"src":"6345:28:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3997,"name":"string","nodeType":"ElementaryTypeName","src":"6345:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":4007,"initialValue":{"arguments":[{"arguments":[{"id":4004,"name":"execHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3959,"src":"6403:8:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4002,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6390:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4001,"name":"bytes","nodeType":"ElementaryTypeName","src":"6390:5:19","typeDescriptions":{}}},"id":4003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6396:6:19","memberName":"concat","nodeType":"MemberAccess","src":"6390:12:19","typeDescriptions":{"typeIdentifier":"t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4005,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6390:22:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3999,"name":"Base64","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4483,"src":"6376:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Base64_$4483_$","typeString":"type(library Base64)"}},"id":4000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6383:6:19","memberName":"encode","nodeType":"MemberAccess","referencedDeclaration":4482,"src":"6376:13:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (bytes memory) pure returns (string memory)"}},"id":4006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6376:37:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"6345:68:19"},{"assignments":[4009],"declarations":[{"constant":false,"id":4009,"mutability":"mutable","name":"clientDataJSON","nameLocation":"6437:14:19","nodeType":"VariableDeclaration","scope":4066,"src":"6423:28:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4008,"name":"string","nodeType":"ElementaryTypeName","src":"6423:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":4017,"initialValue":{"arguments":[{"id":4013,"name":"clientDataJSONPre","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3976,"src":"6481:17:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":4014,"name":"execHashBase64","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3998,"src":"6512:14:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":4015,"name":"clientDataJSONPost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3978,"src":"6540:18:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":4011,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6454:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":4010,"name":"string","nodeType":"ElementaryTypeName","src":"6454:6:19","typeDescriptions":{}}},"id":4012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6461:6:19","memberName":"concat","nodeType":"MemberAccess","src":"6454:13:19","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":4016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6454:114:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"6423:145:19"},{"assignments":[4019],"declarations":[{"constant":false,"id":4019,"mutability":"mutable","name":"clientHash","nameLocation":"6586:10:19","nodeType":"VariableDeclaration","scope":4066,"src":"6578:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4018,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6578:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4026,"initialValue":{"arguments":[{"arguments":[{"id":4023,"name":"clientDataJSON","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4009,"src":"6612:14:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4022,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6606:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4021,"name":"bytes","nodeType":"ElementaryTypeName","src":"6606:5:19","typeDescriptions":{}}},"id":4024,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6606:21:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4020,"name":"sha256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-22,"src":"6599:6:19","typeDescriptions":{"typeIdentifier":"t_function_sha256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4025,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6599:29:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6578:50:19"},{"assignments":[4028],"declarations":[{"constant":false,"id":4028,"mutability":"mutable","name":"sigHash","nameLocation":"6646:7:19","nodeType":"VariableDeclaration","scope":4066,"src":"6638:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4027,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6638:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4037,"initialValue":{"arguments":[{"arguments":[{"id":4033,"name":"authenticatorData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3974,"src":"6676:17:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4034,"name":"clientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4019,"src":"6695:10:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4031,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6663:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4030,"name":"bytes","nodeType":"ElementaryTypeName","src":"6663:5:19","typeDescriptions":{}}},"id":4032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6669:6:19","memberName":"concat","nodeType":"MemberAccess","src":"6663:12:19","typeDescriptions":{"typeIdentifier":"t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6663:43:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4029,"name":"sha256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-22,"src":"6656:6:19","typeDescriptions":{"typeIdentifier":"t_function_sha256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6656:51:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6638:69:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4039,"name":"passkey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3962,"src":"6726:7:19","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId memory"}},"id":4040,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6734:7:19","memberName":"pubKeyY","nodeType":"MemberAccess","referencedDeclaration":4489,"src":"6726:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6745:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6726:20:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4043,"name":"passkey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3962,"src":"6750:7:19","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId memory"}},"id":4044,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6758:7:19","memberName":"pubKeyY","nodeType":"MemberAccess","referencedDeclaration":4489,"src":"6750:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6769:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6750:20:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6726:44:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4b6579206e6f7420666f756e64","id":4048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6772:15:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_a43b9424b10eeb4f05b3c31f20ae9b500023c8e0afaacb897d48553eb53545b4","typeString":"literal_string \"Key not found\""},"value":"Key not found"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a43b9424b10eeb4f05b3c31f20ae9b500023c8e0afaacb897d48553eb53545b4","typeString":"literal_string \"Key not found\""}],"id":4038,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6718:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6718:70:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4050,"nodeType":"ExpressionStatement","src":"6718:70:19"},{"assignments":[4052],"declarations":[{"constant":false,"id":4052,"mutability":"mutable","name":"isSigValid","nameLocation":"6803:10:19","nodeType":"VariableDeclaration","scope":4066,"src":"6798:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4051,"name":"bool","nodeType":"ElementaryTypeName","src":"6798:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":4063,"initialValue":{"arguments":[{"id":4055,"name":"passkey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3962,"src":"6846:7:19","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId memory"}},{"id":4056,"name":"sigx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3970,"src":"6867:4:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4057,"name":"sigy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"6885:4:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":4060,"name":"sigHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4028,"src":"6911:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4059,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6903:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4058,"name":"uint256","nodeType":"ElementaryTypeName","src":"6903:7:19","typeDescriptions":{}}},"id":4061,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6903:16:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4053,"name":"Secp256r1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5260,"src":"6816:9:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Secp256r1_$5260_$","typeString":"type(library Secp256r1)"}},"id":4054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6826:6:19","memberName":"Verify","nodeType":"MemberAccess","referencedDeclaration":4571,"src":"6816:16:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_PassKeyId_$4492_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$","typeString":"function (struct PassKeyId memory,uint256,uint256,uint256) view returns (bool)"}},"id":4062,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6816:113:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"6798:131:19"},{"expression":{"id":4064,"name":"isSigValid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4052,"src":"6946:10:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3966,"id":4065,"nodeType":"Return","src":"6939:17:19"}]},"id":4067,"implemented":true,"kind":"function","modifiers":[],"name":"validatePassKeySig","nameLocation":"5830:18:19","nodeType":"FunctionDefinition","parameters":{"id":3963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3957,"mutability":"mutable","name":"signature","nameLocation":"5871:9:19","nodeType":"VariableDeclaration","scope":4067,"src":"5858:22:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3956,"name":"bytes","nodeType":"ElementaryTypeName","src":"5858:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3959,"mutability":"mutable","name":"execHash","nameLocation":"5898:8:19","nodeType":"VariableDeclaration","scope":4067,"src":"5890:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3958,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5890:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3962,"mutability":"mutable","name":"passkey","nameLocation":"5933:7:19","nodeType":"VariableDeclaration","scope":4067,"src":"5916:24:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId"},"typeName":{"id":3961,"nodeType":"UserDefinedTypeName","pathNode":{"id":3960,"name":"PassKeyId","nameLocations":["5916:9:19"],"nodeType":"IdentifierPath","referencedDeclaration":4492,"src":"5916:9:19"},"referencedDeclaration":4492,"src":"5916:9:19","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_storage_ptr","typeString":"struct PassKeyId"}},"visibility":"internal"}],"src":"5848:98:19"},"returnParameters":{"id":3966,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3965,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4067,"src":"5970:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3964,"name":"bool","nodeType":"ElementaryTypeName","src":"5970:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5969:6:19"},"scope":4096,"src":"5821:1142:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4090,"nodeType":"Block","src":"7088:102:19","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4078,"name":"userop","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4070,"src":"7138:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOp_$5271_calldata_ptr","typeString":"struct UserOp calldata"}},"id":4079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7145:4:19","memberName":"hash","nodeType":"MemberAccess","referencedDeclaration":5321,"src":"7138:11:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_UserOp_$5271_calldata_ptr_$returns$_t_bytes32_$attached_to$_t_struct$_UserOp_$5271_calldata_ptr_$","typeString":"function (struct UserOp calldata) pure returns (bytes32)"}},"id":4080,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7138:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":4083,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"7161:4:19","typeDescriptions":{"typeIdentifier":"t_contract$_Account_$4096","typeString":"contract Account"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Account_$4096","typeString":"contract Account"}],"id":4082,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7153:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4081,"name":"address","nodeType":"ElementaryTypeName","src":"7153:7:19","typeDescriptions":{}}},"id":4084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7153:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":4085,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"7168:5:19","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7174:7:19","memberName":"chainid","nodeType":"MemberAccess","src":"7168:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4076,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7127:3:19","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4077,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7131:6:19","memberName":"encode","nodeType":"MemberAccess","src":"7127:10:19","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4087,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7127:55:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4075,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7117:9:19","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7117:66:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4074,"id":4089,"nodeType":"Return","src":"7098:85:19"}]},"functionSelector":"fd5c8d72","id":4091,"implemented":true,"kind":"function","modifiers":[],"name":"getUserOpHash","nameLocation":"7006:13:19","nodeType":"FunctionDefinition","parameters":{"id":4071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4070,"mutability":"mutable","name":"userop","nameLocation":"7045:6:19","nodeType":"VariableDeclaration","scope":4091,"src":"7029:22:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOp_$5271_calldata_ptr","typeString":"struct UserOp"},"typeName":{"id":4069,"nodeType":"UserDefinedTypeName","pathNode":{"id":4068,"name":"UserOp","nameLocations":["7029:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":5271,"src":"7029:6:19"},"referencedDeclaration":5271,"src":"7029:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOp_$5271_storage_ptr","typeString":"struct UserOp"}},"visibility":"internal"}],"src":"7019:38:19"},"returnParameters":{"id":4074,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4073,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4091,"src":"7079:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4072,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7079:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7078:9:19"},"scope":4096,"src":"6997:193:19","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4094,"nodeType":"Block","src":"7272:2:19","statements":[]},"id":4095,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4092,"nodeType":"ParameterList","parameters":[],"src":"7252:2:19"},"returnParameters":{"id":4093,"nodeType":"ParameterList","parameters":[],"src":"7272:0:19"},"scope":4096,"src":"7245:29:19","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":4097,"src":"281:6995:19","usedErrors":[]}],"src":"36:7241:19"},"id":19},"contracts/aa/AccountFactory.sol":{"ast":{"absolutePath":"contracts/aa/AccountFactory.sol","exportedSymbols":{"Account":[4096],"AccountFactory":[4252],"Address":[1622],"Base64":[4483],"Create2":[1725],"ECDSA":[2430],"ERC1967Proxy":[67],"ERC1967Upgrade":[371],"IBeacon":[433],"IERC1822Proxiable":[30],"IERC1967":[20],"Initializable":[602],"JPoint":[4499],"Math":[3296],"PassKeyId":[4492],"Proxy":[423],"Secp256r1":[5260],"SignedMath":[3401],"StorageSlot":[1835],"Strings":[2064],"UserOp":[5271],"UserOpLib":[5332]},"id":4253,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":4098,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"36:24:20"},{"absolutePath":"@openzeppelin/contracts/utils/Create2.sol","file":"@openzeppelin/contracts/utils/Create2.sol","id":4099,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4253,"sourceUnit":1726,"src":"62:51:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol","file":"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol","id":4100,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4253,"sourceUnit":68,"src":"114:64:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/aa/Account.sol","file":"./Account.sol","id":4101,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4253,"sourceUnit":4097,"src":"180:23:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/aa/utils/Secp256r1.sol","file":"./utils/Secp256r1.sol","id":4102,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4253,"sourceUnit":5261,"src":"204:31:20","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"AccountFactory","contractDependencies":[67,4096],"contractKind":"contract","fullyImplemented":true,"id":4252,"linearizedBaseContracts":[4252],"name":"AccountFactory","nameLocation":"246:14:20","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"11464fbe","id":4105,"mutability":"immutable","name":"accountImplementation","nameLocation":"292:21:20","nodeType":"VariableDeclaration","scope":4252,"src":"267:46:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_Account_$4096","typeString":"contract Account"},"typeName":{"id":4104,"nodeType":"UserDefinedTypeName","pathNode":{"id":4103,"name":"Account","nameLocations":["267:7:20"],"nodeType":"IdentifierPath","referencedDeclaration":4096,"src":"267:7:20"},"referencedDeclaration":4096,"src":"267:7:20","typeDescriptions":{"typeIdentifier":"t_contract$_Account_$4096","typeString":"contract Account"}},"visibility":"public"},{"body":{"id":4115,"nodeType":"Block","src":"334:54:20","statements":[{"expression":{"id":4113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4108,"name":"accountImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4105,"src":"344:21:20","typeDescriptions":{"typeIdentifier":"t_contract$_Account_$4096","typeString":"contract Account"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"id":4111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"NewExpression","src":"368:11:20","typeDescriptions":{"typeIdentifier":"t_function_creation_nonpayable$__$returns$_t_contract$_Account_$4096_$","typeString":"function () returns (contract Account)"},"typeName":{"id":4110,"nodeType":"UserDefinedTypeName","pathNode":{"id":4109,"name":"Account","nameLocations":["372:7:20"],"nodeType":"IdentifierPath","referencedDeclaration":4096,"src":"372:7:20"},"referencedDeclaration":4096,"src":"372:7:20","typeDescriptions":{"typeIdentifier":"t_contract$_Account_$4096","typeString":"contract Account"}}},"id":4112,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"368:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Account_$4096","typeString":"contract Account"}},"src":"344:37:20","typeDescriptions":{"typeIdentifier":"t_contract$_Account_$4096","typeString":"contract Account"}},"id":4114,"nodeType":"ExpressionStatement","src":"344:37:20"}]},"id":4116,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4106,"nodeType":"ParameterList","parameters":[],"src":"331:2:20"},"returnParameters":{"id":4107,"nodeType":"ParameterList","parameters":[],"src":"334:0:20"},"scope":4252,"src":"320:68:20","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4195,"nodeType":"Block","src":"927:523:20","statements":[{"assignments":[4133],"declarations":[{"constant":false,"id":4133,"mutability":"mutable","name":"owner","nameLocation":"954:5:20","nodeType":"VariableDeclaration","scope":4195,"src":"937:22:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId"},"typeName":{"id":4132,"nodeType":"UserDefinedTypeName","pathNode":{"id":4131,"name":"PassKeyId","nameLocations":["937:9:20"],"nodeType":"IdentifierPath","referencedDeclaration":4492,"src":"937:9:20"},"referencedDeclaration":4492,"src":"937:9:20","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_storage_ptr","typeString":"struct PassKeyId"}},"visibility":"internal"}],"id":4139,"initialValue":{"arguments":[{"id":4135,"name":"pubKeyX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4119,"src":"972:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4136,"name":"pubKeyY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4121,"src":"981:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4137,"name":"keyId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4123,"src":"990:5:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4134,"name":"PassKeyId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4492,"src":"962:9:20","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_PassKeyId_$4492_storage_ptr_$","typeString":"type(struct PassKeyId storage pointer)"}},"id":4138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"962:34:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId memory"}},"nodeType":"VariableDeclarationStatement","src":"937:59:20"},{"assignments":[4141],"declarations":[{"constant":false,"id":4141,"mutability":"mutable","name":"addr","nameLocation":"1014:4:20","nodeType":"VariableDeclaration","scope":4195,"src":"1006:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4140,"name":"address","nodeType":"ElementaryTypeName","src":"1006:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4148,"initialValue":{"arguments":[{"id":4143,"name":"pubKeyX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4119,"src":"1032:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4144,"name":"pubKeyY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4121,"src":"1041:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4145,"name":"keyId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4123,"src":"1050:5:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":4146,"name":"salt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4125,"src":"1057:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4142,"name":"getAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4251,"src":"1021:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$_t_uint256_$returns$_t_address_$","typeString":"function (uint256,uint256,string memory,uint256) view returns (address)"}},"id":4147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1021:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1006:56:20"},{"assignments":[4150],"declarations":[{"constant":false,"id":4150,"mutability":"mutable","name":"codeSize","nameLocation":"1077:8:20","nodeType":"VariableDeclaration","scope":4195,"src":"1072:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4149,"name":"uint","nodeType":"ElementaryTypeName","src":"1072:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4154,"initialValue":{"expression":{"expression":{"id":4151,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4141,"src":"1088:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1093:4:20","memberName":"code","nodeType":"MemberAccess","src":"1088:9:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1098:6:20","memberName":"length","nodeType":"MemberAccess","src":"1088:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1072:32:20"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4155,"name":"codeSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4150,"src":"1118:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1129:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1118:12:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4166,"nodeType":"IfStatement","src":"1114:72:20","trueBody":{"id":4165,"nodeType":"Block","src":"1132:54:20","statements":[{"expression":{"arguments":[{"arguments":[{"id":4161,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4141,"src":"1169:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4160,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1161:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":4159,"name":"address","nodeType":"ElementaryTypeName","src":"1161:8:20","stateMutability":"payable","typeDescriptions":{}}},"id":4162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1161:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":4158,"name":"Account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4096,"src":"1153:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Account_$4096_$","typeString":"type(contract Account)"}},"id":4163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1153:22:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Account_$4096","typeString":"contract Account"}},"functionReturnParameters":4130,"id":4164,"nodeType":"Return","src":"1146:29:20"}]}},{"expression":{"id":4193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4167,"name":"ret","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4129,"src":"1195:3:20","typeDescriptions":{"typeIdentifier":"t_contract$_Account_$4096","typeString":"contract Account"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"id":4181,"name":"accountImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4105,"src":"1314:21:20","typeDescriptions":{"typeIdentifier":"t_contract$_Account_$4096","typeString":"contract Account"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Account_$4096","typeString":"contract Account"}],"id":4180,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1306:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4179,"name":"address","nodeType":"ElementaryTypeName","src":"1306:7:20","typeDescriptions":{}}},"id":4182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1306:30:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"expression":{"id":4185,"name":"Account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4096,"src":"1373:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Account_$4096_$","typeString":"type(contract Account)"}},"id":4186,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1381:10:20","memberName":"initialize","nodeType":"MemberAccess","referencedDeclaration":3623,"src":"1373:18:20","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_struct$_PassKeyId_$4492_memory_ptr_$returns$__$","typeString":"function Account.initialize(struct PassKeyId memory)"}},{"components":[{"id":4187,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4133,"src":"1394:5:20","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId memory"}}],"id":4188,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1393:7:20","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_declaration_nonpayable$_t_struct$_PassKeyId_$4492_memory_ptr_$returns$__$","typeString":"function Account.initialize(struct PassKeyId memory)"},{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId memory"}],"expression":{"id":4183,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1358:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4184,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1362:10:20","memberName":"encodeCall","nodeType":"MemberAccess","src":"1358:14:20","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1358:43:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"NewExpression","src":"1247:16:20","typeDescriptions":{"typeIdentifier":"t_function_creation_payable$_t_address_$_t_bytes_memory_ptr_$returns$_t_contract$_ERC1967Proxy_$67_$","typeString":"function (address,bytes memory) payable returns (contract ERC1967Proxy)"},"typeName":{"id":4172,"nodeType":"UserDefinedTypeName","pathNode":{"id":4171,"name":"ERC1967Proxy","nameLocations":["1251:12:20"],"nodeType":"IdentifierPath","referencedDeclaration":67,"src":"1251:12:20"},"referencedDeclaration":67,"src":"1251:12:20","typeDescriptions":{"typeIdentifier":"t_contract$_ERC1967Proxy_$67","typeString":"contract ERC1967Proxy"}}},"id":4178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["salt"],"nodeType":"FunctionCallOptions","options":[{"arguments":[{"id":4176,"name":"salt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4125,"src":"1278:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4175,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1270:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4174,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1270:7:20","typeDescriptions":{}}},"id":4177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1270:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"src":"1247:37:20","typeDescriptions":{"typeIdentifier":"t_function_creation_payable$_t_address_$_t_bytes_memory_ptr_$returns$_t_contract$_ERC1967Proxy_$67_$salt","typeString":"function (address,bytes memory) payable returns (contract ERC1967Proxy)"}},"id":4190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1247:172:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ERC1967Proxy_$67","typeString":"contract ERC1967Proxy"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ERC1967Proxy_$67","typeString":"contract ERC1967Proxy"}],"id":4170,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1222:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":4169,"name":"address","nodeType":"ElementaryTypeName","src":"1222:8:20","stateMutability":"payable","typeDescriptions":{}}},"id":4191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1222:211:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":4168,"name":"Account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4096,"src":"1201:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Account_$4096_$","typeString":"type(contract Account)"}},"id":4192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1201:242:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Account_$4096","typeString":"contract Account"}},"src":"1195:248:20","typeDescriptions":{"typeIdentifier":"t_contract$_Account_$4096","typeString":"contract Account"}},"id":4194,"nodeType":"ExpressionStatement","src":"1195:248:20"}]},"documentation":{"id":4117,"nodeType":"StructuredDocumentation","src":"394:369:20","text":" create an account, and return its address.\n returns the address even if the account is already deployed.\n Note that during UserOperation execution, this method is called only if the account is not deployed.\n This method returns an existing account address so that entryPoint.getSenderAddress() would work even after account creation"},"functionSelector":"c8cb55ae","id":4196,"implemented":true,"kind":"function","modifiers":[],"name":"createAccount","nameLocation":"777:13:20","nodeType":"FunctionDefinition","parameters":{"id":4126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4119,"mutability":"mutable","name":"pubKeyX","nameLocation":"808:7:20","nodeType":"VariableDeclaration","scope":4196,"src":"800:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4118,"name":"uint256","nodeType":"ElementaryTypeName","src":"800:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4121,"mutability":"mutable","name":"pubKeyY","nameLocation":"833:7:20","nodeType":"VariableDeclaration","scope":4196,"src":"825:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4120,"name":"uint256","nodeType":"ElementaryTypeName","src":"825:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4123,"mutability":"mutable","name":"keyId","nameLocation":"864:5:20","nodeType":"VariableDeclaration","scope":4196,"src":"850:19:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4122,"name":"string","nodeType":"ElementaryTypeName","src":"850:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4125,"mutability":"mutable","name":"salt","nameLocation":"887:4:20","nodeType":"VariableDeclaration","scope":4196,"src":"879:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4124,"name":"uint256","nodeType":"ElementaryTypeName","src":"879:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"790:107:20"},"returnParameters":{"id":4130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4129,"mutability":"mutable","name":"ret","nameLocation":"922:3:20","nodeType":"VariableDeclaration","scope":4196,"src":"914:11:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_Account_$4096","typeString":"contract Account"},"typeName":{"id":4128,"nodeType":"UserDefinedTypeName","pathNode":{"id":4127,"name":"Account","nameLocations":["914:7:20"],"nodeType":"IdentifierPath","referencedDeclaration":4096,"src":"914:7:20"},"referencedDeclaration":4096,"src":"914:7:20","typeDescriptions":{"typeIdentifier":"t_contract$_Account_$4096","typeString":"contract Account"}},"visibility":"internal"}],"src":"913:13:20"},"scope":4252,"src":"768:682:20","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4250,"nodeType":"Block","src":"1732:530:20","statements":[{"assignments":[4212],"declarations":[{"constant":false,"id":4212,"mutability":"mutable","name":"owner","nameLocation":"1759:5:20","nodeType":"VariableDeclaration","scope":4250,"src":"1742:22:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId"},"typeName":{"id":4211,"nodeType":"UserDefinedTypeName","pathNode":{"id":4210,"name":"PassKeyId","nameLocations":["1742:9:20"],"nodeType":"IdentifierPath","referencedDeclaration":4492,"src":"1742:9:20"},"referencedDeclaration":4492,"src":"1742:9:20","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_storage_ptr","typeString":"struct PassKeyId"}},"visibility":"internal"}],"id":4218,"initialValue":{"arguments":[{"id":4214,"name":"pubKeyX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4199,"src":"1777:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4215,"name":"pubKeyY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"1786:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4216,"name":"keyId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4203,"src":"1795:5:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4213,"name":"PassKeyId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4492,"src":"1767:9:20","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_PassKeyId_$4492_storage_ptr_$","typeString":"type(struct PassKeyId storage pointer)"}},"id":4217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1767:34:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId memory"}},"nodeType":"VariableDeclarationStatement","src":"1742:59:20"},{"expression":{"arguments":[{"arguments":[{"id":4223,"name":"salt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4205,"src":"1879:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4222,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1871:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4221,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1871:7:20","typeDescriptions":{}}},"id":4224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1871:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"arguments":[{"expression":{"arguments":[{"id":4229,"name":"ERC1967Proxy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"1980:12:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1967Proxy_$67_$","typeString":"type(contract ERC1967Proxy)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_ERC1967Proxy_$67_$","typeString":"type(contract ERC1967Proxy)"}],"id":4228,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1975:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1975:18:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_ERC1967Proxy_$67","typeString":"type(contract ERC1967Proxy)"}},"id":4231,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1994:12:20","memberName":"creationCode","nodeType":"MemberAccess","src":"1975:31:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"arguments":[{"arguments":[{"id":4236,"name":"accountImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4105,"src":"2080:21:20","typeDescriptions":{"typeIdentifier":"t_contract$_Account_$4096","typeString":"contract Account"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Account_$4096","typeString":"contract Account"}],"id":4235,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2072:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4234,"name":"address","nodeType":"ElementaryTypeName","src":"2072:7:20","typeDescriptions":{}}},"id":4237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2072:30:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"expression":{"id":4240,"name":"Account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4096,"src":"2147:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Account_$4096_$","typeString":"type(contract Account)"}},"id":4241,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2155:10:20","memberName":"initialize","nodeType":"MemberAccess","referencedDeclaration":3623,"src":"2147:18:20","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_struct$_PassKeyId_$4492_memory_ptr_$returns$__$","typeString":"function Account.initialize(struct PassKeyId memory)"}},{"components":[{"id":4242,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4212,"src":"2168:5:20","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId memory"}}],"id":4243,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2167:7:20","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_declaration_nonpayable$_t_struct$_PassKeyId_$4492_memory_ptr_$returns$__$","typeString":"function Account.initialize(struct PassKeyId memory)"},{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId memory"}],"expression":{"id":4238,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2132:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4239,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2136:10:20","memberName":"encodeCall","nodeType":"MemberAccess","src":"2132:14:20","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2132:43:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4232,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2032:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4233,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2036:6:20","memberName":"encode","nodeType":"MemberAccess","src":"2032:10:20","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2032:169:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4226,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1933:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4227,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1937:12:20","memberName":"encodePacked","nodeType":"MemberAccess","src":"1933:16:20","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1933:290:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4225,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1902:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1902:339:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4219,"name":"Create2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1725,"src":"1831:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Create2_$1725_$","typeString":"type(library Create2)"}},"id":4220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1839:14:20","memberName":"computeAddress","nodeType":"MemberAccess","referencedDeclaration":1710,"src":"1831:22:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,bytes32) view returns (address)"}},"id":4248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1831:424:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4209,"id":4249,"nodeType":"Return","src":"1812:443:20"}]},"documentation":{"id":4197,"nodeType":"StructuredDocumentation","src":"1456:114:20","text":" calculate the counterfactual address of this account as it would be returned by createAccount()"},"functionSelector":"cac8cfc2","id":4251,"implemented":true,"kind":"function","modifiers":[],"name":"getAddress","nameLocation":"1584:10:20","nodeType":"FunctionDefinition","parameters":{"id":4206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4199,"mutability":"mutable","name":"pubKeyX","nameLocation":"1612:7:20","nodeType":"VariableDeclaration","scope":4251,"src":"1604:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4198,"name":"uint256","nodeType":"ElementaryTypeName","src":"1604:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4201,"mutability":"mutable","name":"pubKeyY","nameLocation":"1637:7:20","nodeType":"VariableDeclaration","scope":4251,"src":"1629:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4200,"name":"uint256","nodeType":"ElementaryTypeName","src":"1629:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4203,"mutability":"mutable","name":"keyId","nameLocation":"1668:5:20","nodeType":"VariableDeclaration","scope":4251,"src":"1654:19:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4202,"name":"string","nodeType":"ElementaryTypeName","src":"1654:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4205,"mutability":"mutable","name":"salt","nameLocation":"1691:4:20","nodeType":"VariableDeclaration","scope":4251,"src":"1683:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4204,"name":"uint256","nodeType":"ElementaryTypeName","src":"1683:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1594:107:20"},"returnParameters":{"id":4209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4208,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4251,"src":"1723:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4207,"name":"address","nodeType":"ElementaryTypeName","src":"1723:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1722:9:20"},"scope":4252,"src":"1575:687:20","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":4253,"src":"237:2027:20","usedErrors":[]}],"src":"36:2229:20"},"id":20},"contracts/aa/BUSD.sol":{"ast":{"absolutePath":"contracts/aa/BUSD.sol","exportedSymbols":{"BUSD":[4274],"Context":[1644],"ERC20":[1189],"IERC20":[1267],"IERC20Metadata":[1292]},"id":4275,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4254,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:21"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","file":"@openzeppelin/contracts/token/ERC20/ERC20.sol","id":4255,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4275,"sourceUnit":1190,"src":"57:55:21","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4256,"name":"ERC20","nameLocations":["131:5:21"],"nodeType":"IdentifierPath","referencedDeclaration":1189,"src":"131:5:21"},"id":4257,"nodeType":"InheritanceSpecifier","src":"131:5:21"}],"canonicalName":"BUSD","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4274,"linearizedBaseContracts":[4274,1189,1292,1267,1644],"name":"BUSD","nameLocation":"123:4:21","nodeType":"ContractDefinition","nodes":[{"body":{"id":4272,"nodeType":"Block","src":"179:44:21","statements":[{"expression":{"arguments":[{"expression":{"id":4265,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"195:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"199:6:21","memberName":"sender","nodeType":"MemberAccess","src":"195:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000_by_1","typeString":"int_const 100000000000000000000000000"},"id":4269,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"207:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3236","id":4268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"213:2:21","typeDescriptions":{"typeIdentifier":"t_rational_26_by_1","typeString":"int_const 26"},"value":"26"},"src":"207:8:21","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000_by_1","typeString":"int_const 100000000000000000000000000"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_100000000000000000000000000_by_1","typeString":"int_const 100000000000000000000000000"}],"id":4264,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"189:5:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"189:27:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4271,"nodeType":"ExpressionStatement","src":"189:27:21"}]},"id":4273,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"42555344","id":4260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"163:6:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_54c512ac779647672b8d02e2fe2dc10f79bbf19f719d887221696215fd24e9f1","typeString":"literal_string \"BUSD\""},"value":"BUSD"},{"hexValue":"42555344","id":4261,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"171:6:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_54c512ac779647672b8d02e2fe2dc10f79bbf19f719d887221696215fd24e9f1","typeString":"literal_string \"BUSD\""},"value":"BUSD"}],"id":4262,"kind":"baseConstructorSpecifier","modifierName":{"id":4259,"name":"ERC20","nameLocations":["157:5:21"],"nodeType":"IdentifierPath","referencedDeclaration":1189,"src":"157:5:21"},"nodeType":"ModifierInvocation","src":"157:21:21"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4258,"nodeType":"ParameterList","parameters":[],"src":"154:2:21"},"returnParameters":{"id":4263,"nodeType":"ParameterList","parameters":[],"src":"179:0:21"},"scope":4274,"src":"143:80:21","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":4275,"src":"114:111:21","usedErrors":[]}],"src":"32:194:21"},"id":21},"contracts/aa/Swapper.sol":{"ast":{"absolutePath":"contracts/aa/Swapper.sol","exportedSymbols":{"BUSD":[4274],"Context":[1644],"ERC20":[1189],"IERC20":[1267],"IERC20Metadata":[1292],"Swapper":[4424]},"id":4425,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4276,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:22"},{"absolutePath":"contracts/aa/BUSD.sol","file":"./BUSD.sol","id":4277,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4425,"sourceUnit":4275,"src":"57:20:22","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Swapper","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4424,"linearizedBaseContracts":[4424],"name":"Swapper","nameLocation":"88:7:22","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":4279,"mutability":"mutable","name":"owner","nameLocation":"110:5:22","nodeType":"VariableDeclaration","scope":4424,"src":"102:13:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4278,"name":"address","nodeType":"ElementaryTypeName","src":"102:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4282,"mutability":"mutable","name":"busdToken","nameLocation":"126:9:22","nodeType":"VariableDeclaration","scope":4424,"src":"121:14:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_BUSD_$4274","typeString":"contract BUSD"},"typeName":{"id":4281,"nodeType":"UserDefinedTypeName","pathNode":{"id":4280,"name":"BUSD","nameLocations":["121:4:22"],"nodeType":"IdentifierPath","referencedDeclaration":4274,"src":"121:4:22"},"referencedDeclaration":4274,"src":"121:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_BUSD_$4274","typeString":"contract BUSD"}},"visibility":"internal"},{"body":{"id":4298,"nodeType":"Block","src":"168:67:22","statements":[{"expression":{"id":4290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4287,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4279,"src":"178:5:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":4288,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"186:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"190:6:22","memberName":"sender","nodeType":"MemberAccess","src":"186:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"178:18:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4291,"nodeType":"ExpressionStatement","src":"178:18:22"},{"expression":{"id":4296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4292,"name":"busdToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4282,"src":"206:9:22","typeDescriptions":{"typeIdentifier":"t_contract$_BUSD_$4274","typeString":"contract BUSD"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4294,"name":"busd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"223:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4293,"name":"BUSD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4274,"src":"218:4:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_BUSD_$4274_$","typeString":"type(contract BUSD)"}},"id":4295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"218:10:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_BUSD_$4274","typeString":"contract BUSD"}},"src":"206:22:22","typeDescriptions":{"typeIdentifier":"t_contract$_BUSD_$4274","typeString":"contract BUSD"}},"id":4297,"nodeType":"ExpressionStatement","src":"206:22:22"}]},"id":4299,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4284,"mutability":"mutable","name":"busd","nameLocation":"162:4:22","nodeType":"VariableDeclaration","scope":4299,"src":"154:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4283,"name":"address","nodeType":"ElementaryTypeName","src":"154:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"153:14:22"},"returnParameters":{"id":4286,"nodeType":"ParameterList","parameters":[],"src":"168:0:22"},"scope":4424,"src":"142:93:22","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4331,"nodeType":"Block","src":"367:213:22","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4307,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"385:2:22","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":4308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"388:6:22","memberName":"origin","nodeType":"MemberAccess","src":"385:9:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4309,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4279,"src":"398:5:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"385:18:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537761707065723a205478206e6f7420696e69746961746564206279206f776e6572","id":4311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"405:36:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_c20905464aaaf8a2c66160533e5361f04cc6291c49b6eb3841f73542d74d44ac","typeString":"literal_string \"Swapper: Tx not initiated by owner\""},"value":"Swapper: Tx not initiated by owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c20905464aaaf8a2c66160533e5361f04cc6291c49b6eb3841f73542d74d44ac","typeString":"literal_string \"Swapper: Tx not initiated by owner\""}],"id":4306,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"377:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"377:65:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4313,"nodeType":"ExpressionStatement","src":"377:65:22"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4315,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"460:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"464:5:22","memberName":"value","nodeType":"MemberAccess","src":"460:9:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4317,"name":"amountBNB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4301,"src":"473:9:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"460:22:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c6964205472616e7366657220616d6f756e74","id":4319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"484:25:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_4f798c5ab53c3d656962cb303ae419807fb3d61c8c2a90f2bca42d224831bdd9","typeString":"literal_string \"Invalid Transfer amount\""},"value":"Invalid Transfer amount"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4f798c5ab53c3d656962cb303ae419807fb3d61c8c2a90f2bca42d224831bdd9","typeString":"literal_string \"Invalid Transfer amount\""}],"id":4314,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"452:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"452:58:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4321,"nodeType":"ExpressionStatement","src":"452:58:22"},{"expression":{"arguments":[{"id":4325,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4279,"src":"543:5:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":4326,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"550:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"554:6:22","memberName":"sender","nodeType":"MemberAccess","src":"550:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4328,"name":"amountBUSD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4303,"src":"562:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4322,"name":"busdToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4282,"src":"520:9:22","typeDescriptions":{"typeIdentifier":"t_contract$_BUSD_$4274","typeString":"contract BUSD"}},"id":4324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"530:12:22","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":802,"src":"520:22:22","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":4329,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"520:53:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4330,"nodeType":"ExpressionStatement","src":"520:53:22"}]},"functionSelector":"ab27021e","id":4332,"implemented":true,"kind":"function","modifiers":[],"name":"swapBNBToBUSD","nameLocation":"277:13:22","nodeType":"FunctionDefinition","parameters":{"id":4304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4301,"mutability":"mutable","name":"amountBNB","nameLocation":"308:9:22","nodeType":"VariableDeclaration","scope":4332,"src":"300:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4300,"name":"uint256","nodeType":"ElementaryTypeName","src":"300:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4303,"mutability":"mutable","name":"amountBUSD","nameLocation":"335:10:22","nodeType":"VariableDeclaration","scope":4332,"src":"327:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4302,"name":"uint256","nodeType":"ElementaryTypeName","src":"327:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"290:61:22"},"returnParameters":{"id":4305,"nodeType":"ParameterList","parameters":[],"src":"367:0:22"},"scope":4424,"src":"268:312:22","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":4365,"nodeType":"Block","src":"685:194:22","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4340,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"703:2:22","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":4341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"706:6:22","memberName":"origin","nodeType":"MemberAccess","src":"703:9:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4342,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4279,"src":"716:5:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"703:18:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537761707065723a205478206e6f7420696e69746961746564206279206f776e6572","id":4344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"723:36:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_c20905464aaaf8a2c66160533e5361f04cc6291c49b6eb3841f73542d74d44ac","typeString":"literal_string \"Swapper: Tx not initiated by owner\""},"value":"Swapper: Tx not initiated by owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c20905464aaaf8a2c66160533e5361f04cc6291c49b6eb3841f73542d74d44ac","typeString":"literal_string \"Swapper: Tx not initiated by owner\""}],"id":4339,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"695:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"695:65:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4346,"nodeType":"ExpressionStatement","src":"695:65:22"},{"expression":{"arguments":[{"expression":{"id":4350,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"793:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"797:6:22","memberName":"sender","nodeType":"MemberAccess","src":"793:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4352,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4279,"src":"805:5:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4353,"name":"amountBUSD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4334,"src":"812:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4347,"name":"busdToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4282,"src":"770:9:22","typeDescriptions":{"typeIdentifier":"t_contract$_BUSD_$4274","typeString":"contract BUSD"}},"id":4349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"780:12:22","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":802,"src":"770:22:22","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":4354,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"770:53:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4355,"nodeType":"ExpressionStatement","src":"770:53:22"},{"expression":{"arguments":[{"id":4362,"name":"amountBNB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4336,"src":"862:9:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":4358,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"841:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"845:6:22","memberName":"sender","nodeType":"MemberAccess","src":"841:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4357,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"833:8:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":4356,"name":"address","nodeType":"ElementaryTypeName","src":"833:8:22","stateMutability":"payable","typeDescriptions":{}}},"id":4360,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"833:19:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":4361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"853:8:22","memberName":"transfer","nodeType":"MemberAccess","src":"833:28:22","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":4363,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"833:39:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4364,"nodeType":"ExpressionStatement","src":"833:39:22"}]},"functionSelector":"20507ebb","id":4366,"implemented":true,"kind":"function","modifiers":[],"name":"swapBUSDToBNB","nameLocation":"595:13:22","nodeType":"FunctionDefinition","parameters":{"id":4337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4334,"mutability":"mutable","name":"amountBUSD","nameLocation":"626:10:22","nodeType":"VariableDeclaration","scope":4366,"src":"618:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4333,"name":"uint256","nodeType":"ElementaryTypeName","src":"618:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4336,"mutability":"mutable","name":"amountBNB","nameLocation":"654:9:22","nodeType":"VariableDeclaration","scope":4366,"src":"646:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4335,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"608:61:22"},"returnParameters":{"id":4338,"nodeType":"ParameterList","parameters":[],"src":"685:0:22"},"scope":4424,"src":"586:293:22","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":4389,"nodeType":"Block","src":"915:130:22","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4370,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"933:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"937:6:22","memberName":"sender","nodeType":"MemberAccess","src":"933:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4372,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4279,"src":"947:5:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"933:19:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537761707065723a2053656e646572206e6f74206f776e6572","id":4374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"954:27:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_ff68237262c421ae2b692f72f97257bc190738acffb3d7b851ce034a6c06ce22","typeString":"literal_string \"Swapper: Sender not owner\""},"value":"Swapper: Sender not owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ff68237262c421ae2b692f72f97257bc190738acffb3d7b851ce034a6c06ce22","typeString":"literal_string \"Swapper: Sender not owner\""}],"id":4369,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"925:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4375,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:57:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4376,"nodeType":"ExpressionStatement","src":"925:57:22"},{"expression":{"arguments":[{"expression":{"arguments":[{"id":4384,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1024:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_Swapper_$4424","typeString":"contract Swapper"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Swapper_$4424","typeString":"contract Swapper"}],"id":4383,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1016:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4382,"name":"address","nodeType":"ElementaryTypeName","src":"1016:7:22","typeDescriptions":{}}},"id":4385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1016:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1030:7:22","memberName":"balance","nodeType":"MemberAccess","src":"1016:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":4379,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4279,"src":"1000:5:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4378,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"992:8:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":4377,"name":"address","nodeType":"ElementaryTypeName","src":"992:8:22","stateMutability":"payable","typeDescriptions":{}}},"id":4380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"992:14:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":4381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1007:8:22","memberName":"transfer","nodeType":"MemberAccess","src":"992:23:22","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":4387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"992:46:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4388,"nodeType":"ExpressionStatement","src":"992:46:22"}]},"functionSelector":"eefd3d9a","id":4390,"implemented":true,"kind":"function","modifiers":[],"name":"transferBNB","nameLocation":"894:11:22","nodeType":"FunctionDefinition","parameters":{"id":4367,"nodeType":"ParameterList","parameters":[],"src":"905:2:22"},"returnParameters":{"id":4368,"nodeType":"ParameterList","parameters":[],"src":"915:0:22"},"scope":4424,"src":"885:160:22","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4418,"nodeType":"Block","src":"1082:172:22","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4394,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1100:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1104:6:22","memberName":"sender","nodeType":"MemberAccess","src":"1100:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4396,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4279,"src":"1114:5:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1100:19:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537761707065723a2053656e646572206e6f74206f776e6572","id":4398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1121:27:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_ff68237262c421ae2b692f72f97257bc190738acffb3d7b851ce034a6c06ce22","typeString":"literal_string \"Swapper: Sender not owner\""},"value":"Swapper: Sender not owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ff68237262c421ae2b692f72f97257bc190738acffb3d7b851ce034a6c06ce22","typeString":"literal_string \"Swapper: Sender not owner\""}],"id":4393,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1092:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1092:57:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4400,"nodeType":"ExpressionStatement","src":"1092:57:22"},{"assignments":[4402],"declarations":[{"constant":false,"id":4402,"mutability":"mutable","name":"bal","nameLocation":"1167:3:22","nodeType":"VariableDeclaration","scope":4418,"src":"1159:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4401,"name":"uint256","nodeType":"ElementaryTypeName","src":"1159:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4410,"initialValue":{"arguments":[{"arguments":[{"id":4407,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1201:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_Swapper_$4424","typeString":"contract Swapper"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Swapper_$4424","typeString":"contract Swapper"}],"id":4406,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1193:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4405,"name":"address","nodeType":"ElementaryTypeName","src":"1193:7:22","typeDescriptions":{}}},"id":4408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1193:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4403,"name":"busdToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4282,"src":"1173:9:22","typeDescriptions":{"typeIdentifier":"t_contract$_BUSD_$4274","typeString":"contract BUSD"}},"id":4404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1183:9:22","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":701,"src":"1173:19:22","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":4409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1173:34:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1159:48:22"},{"expression":{"arguments":[{"id":4414,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4279,"src":"1236:5:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4415,"name":"bal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4402,"src":"1243:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4411,"name":"busdToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4282,"src":"1217:9:22","typeDescriptions":{"typeIdentifier":"t_contract$_BUSD_$4274","typeString":"contract BUSD"}},"id":4413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1227:8:22","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":726,"src":"1217:18:22","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1217:30:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4417,"nodeType":"ExpressionStatement","src":"1217:30:22"}]},"functionSelector":"c4f90e1d","id":4419,"implemented":true,"kind":"function","modifiers":[],"name":"transferBUSD","nameLocation":"1060:12:22","nodeType":"FunctionDefinition","parameters":{"id":4391,"nodeType":"ParameterList","parameters":[],"src":"1072:2:22"},"returnParameters":{"id":4392,"nodeType":"ParameterList","parameters":[],"src":"1082:0:22"},"scope":4424,"src":"1051:203:22","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4422,"nodeType":"Block","src":"1287:2:22","statements":[]},"id":4423,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4420,"nodeType":"ParameterList","parameters":[],"src":"1267:2:22"},"returnParameters":{"id":4421,"nodeType":"ParameterList","parameters":[],"src":"1287:0:22"},"scope":4424,"src":"1260:29:22","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":4425,"src":"79:1212:22","usedErrors":[]}],"src":"32:1260:22"},"id":22},"contracts/aa/utils/Base64.sol":{"ast":{"absolutePath":"contracts/aa/utils/Base64.sol","exportedSymbols":{"Base64":[4483]},"id":4484,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4426,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"158:23:23"},{"abstract":false,"baseContracts":[],"canonicalName":"Base64","contractDependencies":[],"contractKind":"library","documentation":{"id":4427,"nodeType":"StructuredDocumentation","src":"183:185:23","text":" @dev Provides a set of functions to operate with Base64 strings.\n  modified for base64url https://datatracker.ietf.org/doc/html/rfc4648#section-5\n _Available since v4.5._"},"fullyImplemented":true,"id":4483,"linearizedBaseContracts":[4483],"name":"Base64","nameLocation":"377:6:23","nodeType":"ContractDefinition","nodes":[{"constant":true,"documentation":{"id":4428,"nodeType":"StructuredDocumentation","src":"390:54:23","text":" @dev Base64 Encoding/Decoding Table"},"id":4431,"mutability":"constant","name":"_TABLE","nameLocation":"474:6:23","nodeType":"VariableDeclaration","scope":4483,"src":"449:108:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4429,"name":"string","nodeType":"ElementaryTypeName","src":"449:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392d5f","id":4430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"491:66:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_5f7e6d3cba140c1411e96b7033571a229a3135b5c436a9698b398a19a1c64b50","typeString":"literal_string \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\""},"value":"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"},"visibility":"internal"},{"body":{"id":4481,"nodeType":"Block","src":"724:3133:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4439,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4434,"src":"941:4:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"946:6:23","memberName":"length","nodeType":"MemberAccess","src":"941:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"956:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"941:16:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"documentation":" Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol","id":4445,"nodeType":"IfStatement","src":"937:31:23","trueBody":{"expression":{"hexValue":"","id":4443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"966:2:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":4438,"id":4444,"nodeType":"Return","src":"959:9:23"}},{"assignments":[4447],"declarations":[{"constant":false,"id":4447,"mutability":"mutable","name":"table","nameLocation":"1032:5:23","nodeType":"VariableDeclaration","scope":4481,"src":"1018:19:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4446,"name":"string","nodeType":"ElementaryTypeName","src":"1018:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":4449,"initialValue":{"id":4448,"name":"_TABLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4431,"src":"1040:6:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"1018:28:23"},{"assignments":[4451],"declarations":[{"constant":false,"id":4451,"mutability":"mutable","name":"newlength","nameLocation":"1457:9:23","nodeType":"VariableDeclaration","scope":4481,"src":"1449:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4450,"name":"uint256","nodeType":"ElementaryTypeName","src":"1449:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4459,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4452,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4434,"src":"1470:4:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1475:6:23","memberName":"length","nodeType":"MemberAccess","src":"1470:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":4454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1484:1:23","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"1470:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4456,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1469:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"36","id":4457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1489:1:23","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"src":"1469:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1449:41:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4460,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4434,"src":"1504:4:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1509:6:23","memberName":"length","nodeType":"MemberAccess","src":"1504:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"36","id":4462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1518:1:23","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"src":"1504:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1522:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1504:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4470,"nodeType":"IfStatement","src":"1500:61:23","trueBody":{"id":4469,"nodeType":"Block","src":"1525:36:23","statements":[{"expression":{"id":4467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1539:11:23","subExpression":{"id":4466,"name":"newlength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4451,"src":"1539:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4468,"nodeType":"ExpressionStatement","src":"1539:11:23"}]}},{"assignments":[4472],"declarations":[{"constant":false,"id":4472,"mutability":"mutable","name":"result","nameLocation":"1584:6:23","nodeType":"VariableDeclaration","scope":4481,"src":"1570:20:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4471,"name":"string","nodeType":"ElementaryTypeName","src":"1570:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":4477,"initialValue":{"arguments":[{"id":4475,"name":"newlength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4451,"src":"1604:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4474,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1593:10:23","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":4473,"name":"string","nodeType":"ElementaryTypeName","src":"1597:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":4476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1593:21:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"1570:44:23"},{"AST":{"nodeType":"YulBlock","src":"1677:2150:23","statements":[{"nodeType":"YulVariableDeclaration","src":"1762:29:23","value":{"arguments":[{"name":"table","nodeType":"YulIdentifier","src":"1782:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"1789:1:23","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1778:3:23"},"nodeType":"YulFunctionCall","src":"1778:13:23"},"variables":[{"name":"tablePtr","nodeType":"YulTypedName","src":"1766:8:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1861:32:23","value":{"arguments":[{"name":"result","nodeType":"YulIdentifier","src":"1882:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"1890:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1878:3:23"},"nodeType":"YulFunctionCall","src":"1878:15:23"},"variables":[{"name":"resultPtr","nodeType":"YulTypedName","src":"1865:9:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"2167:1650:23","statements":[{"nodeType":"YulAssignment","src":"2220:26:23","value":{"arguments":[{"name":"dataPtr","nodeType":"YulIdentifier","src":"2235:7:23"},{"kind":"number","nodeType":"YulLiteral","src":"2244:1:23","type":"","value":"3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2231:3:23"},"nodeType":"YulFunctionCall","src":"2231:15:23"},"variableNames":[{"name":"dataPtr","nodeType":"YulIdentifier","src":"2220:7:23"}]},{"nodeType":"YulVariableDeclaration","src":"2263:27:23","value":{"arguments":[{"name":"dataPtr","nodeType":"YulIdentifier","src":"2282:7:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2276:5:23"},"nodeType":"YulFunctionCall","src":"2276:14:23"},"variables":[{"name":"input","nodeType":"YulTypedName","src":"2267:5:23","type":""}]},{"expression":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2895:9:23"},{"arguments":[{"arguments":[{"name":"tablePtr","nodeType":"YulIdentifier","src":"2936:8:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2954:2:23","type":"","value":"18"},{"name":"input","nodeType":"YulIdentifier","src":"2958:5:23"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2950:3:23"},"nodeType":"YulFunctionCall","src":"2950:14:23"},{"kind":"number","nodeType":"YulLiteral","src":"2966:4:23","type":"","value":"0x3F"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2946:3:23"},"nodeType":"YulFunctionCall","src":"2946:25:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2932:3:23"},"nodeType":"YulFunctionCall","src":"2932:40:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2926:5:23"},"nodeType":"YulFunctionCall","src":"2926:47:23"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"2866:7:23"},"nodeType":"YulFunctionCall","src":"2866:125:23"},"nodeType":"YulExpressionStatement","src":"2866:125:23"},{"nodeType":"YulAssignment","src":"3008:30:23","value":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"3025:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"3036:1:23","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3021:3:23"},"nodeType":"YulFunctionCall","src":"3021:17:23"},"variableNames":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"3008:9:23"}]},{"expression":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"3148:9:23"},{"arguments":[{"arguments":[{"name":"tablePtr","nodeType":"YulIdentifier","src":"3189:8:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3207:2:23","type":"","value":"12"},{"name":"input","nodeType":"YulIdentifier","src":"3211:5:23"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3203:3:23"},"nodeType":"YulFunctionCall","src":"3203:14:23"},{"kind":"number","nodeType":"YulLiteral","src":"3219:4:23","type":"","value":"0x3F"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3199:3:23"},"nodeType":"YulFunctionCall","src":"3199:25:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3185:3:23"},"nodeType":"YulFunctionCall","src":"3185:40:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3179:5:23"},"nodeType":"YulFunctionCall","src":"3179:47:23"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"3119:7:23"},"nodeType":"YulFunctionCall","src":"3119:125:23"},"nodeType":"YulExpressionStatement","src":"3119:125:23"},{"nodeType":"YulAssignment","src":"3261:30:23","value":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"3278:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"3289:1:23","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3274:3:23"},"nodeType":"YulFunctionCall","src":"3274:17:23"},"variableNames":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"3261:9:23"}]},{"expression":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"3401:9:23"},{"arguments":[{"arguments":[{"name":"tablePtr","nodeType":"YulIdentifier","src":"3442:8:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3460:1:23","type":"","value":"6"},{"name":"input","nodeType":"YulIdentifier","src":"3463:5:23"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3456:3:23"},"nodeType":"YulFunctionCall","src":"3456:13:23"},{"kind":"number","nodeType":"YulLiteral","src":"3471:4:23","type":"","value":"0x3F"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3452:3:23"},"nodeType":"YulFunctionCall","src":"3452:24:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3438:3:23"},"nodeType":"YulFunctionCall","src":"3438:39:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3432:5:23"},"nodeType":"YulFunctionCall","src":"3432:46:23"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"3372:7:23"},"nodeType":"YulFunctionCall","src":"3372:124:23"},"nodeType":"YulExpressionStatement","src":"3372:124:23"},{"nodeType":"YulAssignment","src":"3513:30:23","value":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"3530:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"3541:1:23","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3526:3:23"},"nodeType":"YulFunctionCall","src":"3526:17:23"},"variableNames":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"3513:9:23"}]},{"expression":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"3632:9:23"},{"arguments":[{"arguments":[{"name":"tablePtr","nodeType":"YulIdentifier","src":"3653:8:23"},{"arguments":[{"name":"input","nodeType":"YulIdentifier","src":"3667:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"3674:4:23","type":"","value":"0x3F"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3663:3:23"},"nodeType":"YulFunctionCall","src":"3663:16:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3649:3:23"},"nodeType":"YulFunctionCall","src":"3649:31:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3643:5:23"},"nodeType":"YulFunctionCall","src":"3643:38:23"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"3624:7:23"},"nodeType":"YulFunctionCall","src":"3624:58:23"},"nodeType":"YulExpressionStatement","src":"3624:58:23"},{"nodeType":"YulAssignment","src":"3699:30:23","value":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"3716:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"3727:1:23","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3712:3:23"},"nodeType":"YulFunctionCall","src":"3712:17:23"},"variableNames":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"3699:9:23"}]}]},"condition":{"arguments":[{"name":"dataPtr","nodeType":"YulIdentifier","src":"2133:7:23"},{"name":"endPtr","nodeType":"YulIdentifier","src":"2142:6:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2130:2:23"},"nodeType":"YulFunctionCall","src":"2130:19:23"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2150:16:23","statements":[]},"pre":{"nodeType":"YulBlock","src":"2025:104:23","statements":[{"nodeType":"YulVariableDeclaration","src":"2043:19:23","value":{"name":"data","nodeType":"YulIdentifier","src":"2058:4:23"},"variables":[{"name":"dataPtr","nodeType":"YulTypedName","src":"2047:7:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2079:36:23","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2097:4:23"},{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2109:4:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2103:5:23"},"nodeType":"YulFunctionCall","src":"2103:11:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2093:3:23"},"nodeType":"YulFunctionCall","src":"2093:22:23"},"variables":[{"name":"endPtr","nodeType":"YulTypedName","src":"2083:6:23","type":""}]}]},"src":"2021:1796:23"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4434,"isOffset":false,"isSlot":false,"src":"2058:4:23","valueSize":1},{"declaration":4434,"isOffset":false,"isSlot":false,"src":"2097:4:23","valueSize":1},{"declaration":4434,"isOffset":false,"isSlot":false,"src":"2109:4:23","valueSize":1},{"declaration":4472,"isOffset":false,"isSlot":false,"src":"1882:6:23","valueSize":1},{"declaration":4447,"isOffset":false,"isSlot":false,"src":"1782:5:23","valueSize":1}],"id":4478,"nodeType":"InlineAssembly","src":"1668:2159:23"},{"expression":{"id":4479,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4472,"src":"3844:6:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":4438,"id":4480,"nodeType":"Return","src":"3837:13:23"}]},"documentation":{"id":4432,"nodeType":"StructuredDocumentation","src":"564:82:23","text":" @dev Converts a `bytes` to its Bytes64 `string` representation."},"id":4482,"implemented":true,"kind":"function","modifiers":[],"name":"encode","nameLocation":"660:6:23","nodeType":"FunctionDefinition","parameters":{"id":4435,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4434,"mutability":"mutable","name":"data","nameLocation":"680:4:23","nodeType":"VariableDeclaration","scope":4482,"src":"667:17:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4433,"name":"bytes","nodeType":"ElementaryTypeName","src":"667:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"666:19:23"},"returnParameters":{"id":4438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4437,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4482,"src":"709:13:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4436,"name":"string","nodeType":"ElementaryTypeName","src":"709:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"708:15:23"},"scope":4483,"src":"651:3206:23","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4484,"src":"369:3490:23","usedErrors":[]}],"src":"158:3702:23"},"id":23},"contracts/aa/utils/Secp256r1.sol":{"ast":{"absolutePath":"contracts/aa/utils/Secp256r1.sol","exportedSymbols":{"JPoint":[4499],"PassKeyId":[4492],"Secp256r1":[5260]},"id":5261,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":4485,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"36:23:24"},{"canonicalName":"PassKeyId","id":4492,"members":[{"constant":false,"id":4487,"mutability":"mutable","name":"pubKeyX","nameLocation":"456:7:24","nodeType":"VariableDeclaration","scope":4492,"src":"448:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4486,"name":"uint256","nodeType":"ElementaryTypeName","src":"448:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4489,"mutability":"mutable","name":"pubKeyY","nameLocation":"477:7:24","nodeType":"VariableDeclaration","scope":4492,"src":"469:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4488,"name":"uint256","nodeType":"ElementaryTypeName","src":"469:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4491,"mutability":"mutable","name":"keyId","nameLocation":"497:5:24","nodeType":"VariableDeclaration","scope":4492,"src":"490:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":4490,"name":"string","nodeType":"ElementaryTypeName","src":"490:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"PassKeyId","nameLocation":"432:9:24","nodeType":"StructDefinition","scope":5261,"src":"425:80:24","visibility":"public"},{"canonicalName":"JPoint","id":4499,"members":[{"constant":false,"id":4494,"mutability":"mutable","name":"x","nameLocation":"535:1:24","nodeType":"VariableDeclaration","scope":4499,"src":"527:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4493,"name":"uint256","nodeType":"ElementaryTypeName","src":"527:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4496,"mutability":"mutable","name":"y","nameLocation":"550:1:24","nodeType":"VariableDeclaration","scope":4499,"src":"542:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4495,"name":"uint256","nodeType":"ElementaryTypeName","src":"542:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4498,"mutability":"mutable","name":"z","nameLocation":"565:1:24","nodeType":"VariableDeclaration","scope":4499,"src":"557:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4497,"name":"uint256","nodeType":"ElementaryTypeName","src":"557:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"JPoint","nameLocation":"514:6:24","nodeType":"StructDefinition","scope":5261,"src":"507:62:24","visibility":"public"},{"abstract":false,"baseContracts":[],"canonicalName":"Secp256r1","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":5260,"linearizedBaseContracts":[5260],"name":"Secp256r1","nameLocation":"579:9:24","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":4502,"mutability":"constant","name":"gx","nameLocation":"612:2:24","nodeType":"VariableDeclaration","scope":5260,"src":"595:96:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4500,"name":"uint256","nodeType":"ElementaryTypeName","src":"595:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307836423137443146324531324334323437463842434536453536334134343046323737303337443831324445423333413046344131333934354438393843323936","id":4501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"625:66:24","typeDescriptions":{"typeIdentifier":"t_rational_48439561293906451759052585252797914202762949526041747995844080717082404635286_by_1","typeString":"int_const 4843...(69 digits omitted)...5286"},"value":"0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296"},"visibility":"internal"},{"constant":true,"id":4505,"mutability":"constant","name":"gy","nameLocation":"714:2:24","nodeType":"VariableDeclaration","scope":5260,"src":"697:96:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4503,"name":"uint256","nodeType":"ElementaryTypeName","src":"697:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307834464533343245324645314137463942384545374542344137433046394531363242434533333537364233313545434543424236343036383337424635314635","id":4504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"727:66:24","typeDescriptions":{"typeIdentifier":"t_rational_36134250956749795798585127919587881956611106672985015071877198253568414405109_by_1","typeString":"int_const 3613...(69 digits omitted)...5109"},"value":"0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5"},"visibility":"internal"},{"constant":true,"functionSelector":"91327ec6","id":4508,"mutability":"constant","name":"pp","nameLocation":"823:2:24","nodeType":"VariableDeclaration","scope":5260,"src":"799:103:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4506,"name":"uint256","nodeType":"ElementaryTypeName","src":"799:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307846464646464646463030303030303031303030303030303030303030303030303030303030303030464646464646464646464646464646464646464646464646","id":4507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"836:66:24","typeDescriptions":{"typeIdentifier":"t_rational_115792089210356248762697446949407573530086143415290314195533631308867097853951_by_1","typeString":"int_const 1157...(70 digits omitted)...3951"},"value":"0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF"},"visibility":"public"},{"constant":true,"functionSelector":"72a4c30f","id":4511,"mutability":"constant","name":"nn","nameLocation":"933:2:24","nodeType":"VariableDeclaration","scope":5260,"src":"909:103:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4509,"name":"uint256","nodeType":"ElementaryTypeName","src":"909:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307846464646464646463030303030303030464646464646464646464646464646464243453646414144413731373945383446334239434143324643363332353531","id":4510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"946:66:24","typeDescriptions":{"typeIdentifier":"t_rational_115792089210356248762697446949407573529996955224135760342422259061068512044369_by_1","typeString":"int_const 1157...(70 digits omitted)...4369"},"value":"0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551"},"visibility":"public"},{"constant":true,"id":4514,"mutability":"constant","name":"a","nameLocation":"1035:1:24","nodeType":"VariableDeclaration","scope":5260,"src":"1018:95:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4512,"name":"uint256","nodeType":"ElementaryTypeName","src":"1018:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307846464646464646463030303030303031303030303030303030303030303030303030303030303030464646464646464646464646464646464646464646464643","id":4513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1047:66:24","typeDescriptions":{"typeIdentifier":"t_rational_115792089210356248762697446949407573530086143415290314195533631308867097853948_by_1","typeString":"int_const 1157...(70 digits omitted)...3948"},"value":"0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC"},"visibility":"internal"},{"constant":true,"id":4517,"mutability":"constant","name":"b","nameLocation":"1136:1:24","nodeType":"VariableDeclaration","scope":5260,"src":"1119:95:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4515,"name":"uint256","nodeType":"ElementaryTypeName","src":"1119:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307835414336333544384141334139334537423345424244353537363938383642433635314430364230434335334230463633424345334333453237443236303442","id":4516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1148:66:24","typeDescriptions":{"typeIdentifier":"t_rational_41058363725152142129326129780047268409114441015993725554835256314039467401291_by_1","typeString":"int_const 4105...(69 digits omitted)...1291"},"value":"0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B"},"visibility":"internal"},{"constant":true,"id":4520,"mutability":"constant","name":"MOST_SIGNIFICANT","nameLocation":"1237:16:24","nodeType":"VariableDeclaration","scope":5260,"src":"1220:110:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4518,"name":"uint256","nodeType":"ElementaryTypeName","src":"1220:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307863303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030","id":4519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1264:66:24","typeDescriptions":{"typeIdentifier":"t_rational_86844066927987146567678238756515930889952488499230423029593188005934847229952_by_1","typeString":"int_const 8684...(69 digits omitted)...9952"},"value":"0xc000000000000000000000000000000000000000000000000000000000000000"},"visibility":"internal"},{"body":{"id":4570,"nodeType":"Block","src":"1766:305:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4534,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4525,"src":"1780:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1785:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1780:6:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4537,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4527,"src":"1790:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4538,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1795:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1790:6:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1780:16:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4541,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4525,"src":"1800:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4542,"name":"nn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4511,"src":"1805:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1800:7:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1780:27:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4545,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4527,"src":"1811:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4546,"name":"nn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4511,"src":"1816:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1811:7:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1780:38:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4552,"nodeType":"IfStatement","src":"1776:163:24","trueBody":{"id":4551,"nodeType":"Block","src":"1820:119:24","statements":[{"expression":{"hexValue":"66616c7365","id":4549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1923:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":4533,"id":4550,"nodeType":"Return","src":"1916:12:24"}]}},{"assignments":[4558],"declarations":[{"constant":false,"id":4558,"mutability":"mutable","name":"points","nameLocation":"1967:6:24","nodeType":"VariableDeclaration","scope":4570,"src":"1949:24:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint[16]"},"typeName":{"baseType":{"id":4556,"nodeType":"UserDefinedTypeName","pathNode":{"id":4555,"name":"JPoint","nameLocations":["1949:6:24"],"nodeType":"IdentifierPath","referencedDeclaration":4499,"src":"1949:6:24"},"referencedDeclaration":4499,"src":"1949:6:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_storage_ptr","typeString":"struct JPoint"}},"id":4557,"length":{"hexValue":"3136","id":4554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1956:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"nodeType":"ArrayTypeName","src":"1949:10:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_storage_$16_storage_ptr","typeString":"struct JPoint[16]"}},"visibility":"internal"}],"id":4562,"initialValue":{"arguments":[{"id":4560,"name":"passKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4523,"src":"2002:7:24","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId memory"}],"id":4559,"name":"_preComputeJacobianPoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4990,"src":"1976:25:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_PassKeyId_$4492_memory_ptr_$returns$_t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr_$","typeString":"function (struct PassKeyId memory) pure returns (struct JPoint memory[16] memory)"}},"id":4561,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1976:34:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"nodeType":"VariableDeclarationStatement","src":"1949:61:24"},{"expression":{"arguments":[{"id":4564,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4558,"src":"2048:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},{"id":4565,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4525,"src":"2056:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4566,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4527,"src":"2059:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4567,"name":"e","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4529,"src":"2062:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4563,"name":"VerifyWithPrecompute","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4643,"src":"2027:20:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$","typeString":"function (struct JPoint memory[16] memory,uint256,uint256,uint256) view returns (bool)"}},"id":4568,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2027:37:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4533,"id":4569,"nodeType":"Return","src":"2020:44:24"}]},"id":4571,"implemented":true,"kind":"function","modifiers":[],"name":"Verify","nameLocation":"1642:6:24","nodeType":"FunctionDefinition","parameters":{"id":4530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4523,"mutability":"mutable","name":"passKey","nameLocation":"1675:7:24","nodeType":"VariableDeclaration","scope":4571,"src":"1658:24:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId"},"typeName":{"id":4522,"nodeType":"UserDefinedTypeName","pathNode":{"id":4521,"name":"PassKeyId","nameLocations":["1658:9:24"],"nodeType":"IdentifierPath","referencedDeclaration":4492,"src":"1658:9:24"},"referencedDeclaration":4492,"src":"1658:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_storage_ptr","typeString":"struct PassKeyId"}},"visibility":"internal"},{"constant":false,"id":4525,"mutability":"mutable","name":"r","nameLocation":"1697:1:24","nodeType":"VariableDeclaration","scope":4571,"src":"1692:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4524,"name":"uint","nodeType":"ElementaryTypeName","src":"1692:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4527,"mutability":"mutable","name":"s","nameLocation":"1713:1:24","nodeType":"VariableDeclaration","scope":4571,"src":"1708:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4526,"name":"uint","nodeType":"ElementaryTypeName","src":"1708:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4529,"mutability":"mutable","name":"e","nameLocation":"1729:1:24","nodeType":"VariableDeclaration","scope":4571,"src":"1724:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4528,"name":"uint","nodeType":"ElementaryTypeName","src":"1724:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1648:88:24"},"returnParameters":{"id":4533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4532,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4571,"src":"1760:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4531,"name":"bool","nodeType":"ElementaryTypeName","src":"1760:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1759:6:24"},"scope":5260,"src":"1633:438:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4642,"nodeType":"Block","src":"2224:298:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4587,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4578,"src":"2238:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4588,"name":"nn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4511,"src":"2243:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2238:7:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4590,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4580,"src":"2249:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4591,"name":"nn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4511,"src":"2254:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2249:7:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2238:18:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4597,"nodeType":"IfStatement","src":"2234:61:24","trueBody":{"id":4596,"nodeType":"Block","src":"2258:37:24","statements":[{"expression":{"hexValue":"66616c7365","id":4594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2279:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":4586,"id":4595,"nodeType":"Return","src":"2272:12:24"}]}},{"assignments":[4599],"declarations":[{"constant":false,"id":4599,"mutability":"mutable","name":"w","nameLocation":"2310:1:24","nodeType":"VariableDeclaration","scope":4642,"src":"2305:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4598,"name":"uint","nodeType":"ElementaryTypeName","src":"2305:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4604,"initialValue":{"arguments":[{"id":4601,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4580,"src":"2324:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4602,"name":"nn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4511,"src":"2327:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4600,"name":"_primemod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5246,"src":"2314:9:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) view returns (uint256)"}},"id":4603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2314:16:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2305:25:24"},{"assignments":[4606],"declarations":[{"constant":false,"id":4606,"mutability":"mutable","name":"u1","nameLocation":"2346:2:24","nodeType":"VariableDeclaration","scope":4642,"src":"2341:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4605,"name":"uint","nodeType":"ElementaryTypeName","src":"2341:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4612,"initialValue":{"arguments":[{"id":4608,"name":"e","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4582,"src":"2358:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4609,"name":"w","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4599,"src":"2361:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4610,"name":"nn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4511,"src":"2364:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4607,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"2351:6:24","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":4611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2351:16:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2341:26:24"},{"assignments":[4614],"declarations":[{"constant":false,"id":4614,"mutability":"mutable","name":"u2","nameLocation":"2382:2:24","nodeType":"VariableDeclaration","scope":4642,"src":"2377:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4613,"name":"uint","nodeType":"ElementaryTypeName","src":"2377:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4620,"initialValue":{"arguments":[{"id":4616,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4578,"src":"2394:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4617,"name":"w","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4599,"src":"2397:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4618,"name":"nn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4511,"src":"2400:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4615,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"2387:6:24","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":4619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2387:16:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2377:26:24"},{"assignments":[4622],"declarations":[{"constant":false,"id":4622,"mutability":"mutable","name":"x","nameLocation":"2419:1:24","nodeType":"VariableDeclaration","scope":4642,"src":"2414:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4621,"name":"uint","nodeType":"ElementaryTypeName","src":"2414:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4623,"nodeType":"VariableDeclarationStatement","src":"2414:6:24"},{"assignments":[4625],"declarations":[{"constant":false,"id":4625,"mutability":"mutable","name":"y","nameLocation":"2435:1:24","nodeType":"VariableDeclaration","scope":4642,"src":"2430:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4624,"name":"uint","nodeType":"ElementaryTypeName","src":"2430:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4626,"nodeType":"VariableDeclarationStatement","src":"2430:6:24"},{"expression":{"id":4635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":4627,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4622,"src":"2448:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4628,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4625,"src":"2451:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4629,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"2447:6:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4631,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4576,"src":"2475:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},{"id":4632,"name":"u1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4606,"src":"2483:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4633,"name":"u2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4614,"src":"2487:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4630,"name":"ShamirMultJacobian","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4783,"src":"2456:18:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (struct JPoint memory[16] memory,uint256,uint256) view returns (uint256,uint256)"}},"id":4634,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2456:34:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"2447:43:24","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4636,"nodeType":"ExpressionStatement","src":"2447:43:24"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4637,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4622,"src":"2508:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4638,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4578,"src":"2513:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2508:6:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4640,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2507:8:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4586,"id":4641,"nodeType":"Return","src":"2500:15:24"}]},"id":4643,"implemented":true,"kind":"function","modifiers":[],"name":"VerifyWithPrecompute","nameLocation":"2086:20:24","nodeType":"FunctionDefinition","parameters":{"id":4583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4576,"mutability":"mutable","name":"points","nameLocation":"2134:6:24","nodeType":"VariableDeclaration","scope":4643,"src":"2116:24:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint[16]"},"typeName":{"baseType":{"id":4573,"nodeType":"UserDefinedTypeName","pathNode":{"id":4572,"name":"JPoint","nameLocations":["2116:6:24"],"nodeType":"IdentifierPath","referencedDeclaration":4499,"src":"2116:6:24"},"referencedDeclaration":4499,"src":"2116:6:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_storage_ptr","typeString":"struct JPoint"}},"id":4575,"length":{"hexValue":"3136","id":4574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2123:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"nodeType":"ArrayTypeName","src":"2116:10:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_storage_$16_storage_ptr","typeString":"struct JPoint[16]"}},"visibility":"internal"},{"constant":false,"id":4578,"mutability":"mutable","name":"r","nameLocation":"2155:1:24","nodeType":"VariableDeclaration","scope":4643,"src":"2150:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4577,"name":"uint","nodeType":"ElementaryTypeName","src":"2150:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4580,"mutability":"mutable","name":"s","nameLocation":"2171:1:24","nodeType":"VariableDeclaration","scope":4643,"src":"2166:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4579,"name":"uint","nodeType":"ElementaryTypeName","src":"2166:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4582,"mutability":"mutable","name":"e","nameLocation":"2187:1:24","nodeType":"VariableDeclaration","scope":4643,"src":"2182:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4581,"name":"uint","nodeType":"ElementaryTypeName","src":"2182:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2106:88:24"},"returnParameters":{"id":4586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4585,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4643,"src":"2218:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4584,"name":"bool","nodeType":"ElementaryTypeName","src":"2218:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2217:6:24"},"scope":5260,"src":"2077:445:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4782,"nodeType":"Block","src":"3078:848:24","statements":[{"assignments":[4660],"declarations":[{"constant":false,"id":4660,"mutability":"mutable","name":"x","nameLocation":"3093:1:24","nodeType":"VariableDeclaration","scope":4782,"src":"3088:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4659,"name":"uint","nodeType":"ElementaryTypeName","src":"3088:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4662,"initialValue":{"hexValue":"30","id":4661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3097:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3088:10:24"},{"assignments":[4664],"declarations":[{"constant":false,"id":4664,"mutability":"mutable","name":"y","nameLocation":"3113:1:24","nodeType":"VariableDeclaration","scope":4782,"src":"3108:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4663,"name":"uint","nodeType":"ElementaryTypeName","src":"3108:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4666,"initialValue":{"hexValue":"30","id":4665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3117:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3108:10:24"},{"assignments":[4668],"declarations":[{"constant":false,"id":4668,"mutability":"mutable","name":"z","nameLocation":"3133:1:24","nodeType":"VariableDeclaration","scope":4782,"src":"3128:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4667,"name":"uint","nodeType":"ElementaryTypeName","src":"3128:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4670,"initialValue":{"hexValue":"30","id":4669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3137:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3128:10:24"},{"assignments":[4672],"declarations":[{"constant":false,"id":4672,"mutability":"mutable","name":"bits","nameLocation":"3153:4:24","nodeType":"VariableDeclaration","scope":4782,"src":"3148:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4671,"name":"uint","nodeType":"ElementaryTypeName","src":"3148:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4674,"initialValue":{"hexValue":"313238","id":4673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3160:3:24","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"nodeType":"VariableDeclarationStatement","src":"3148:15:24"},{"assignments":[4676],"declarations":[{"constant":false,"id":4676,"mutability":"mutable","name":"index","nameLocation":"3178:5:24","nodeType":"VariableDeclaration","scope":4782,"src":"3173:10:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4675,"name":"uint","nodeType":"ElementaryTypeName","src":"3173:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4678,"initialValue":{"hexValue":"30","id":4677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3186:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3173:14:24"},{"body":{"id":4766,"nodeType":"Block","src":"3215:635:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4682,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4668,"src":"3233:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3237:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3233:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4708,"nodeType":"IfStatement","src":"3229:150:24","trueBody":{"id":4707,"nodeType":"Block","src":"3240:139:24","statements":[{"expression":{"id":4694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":4685,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4660,"src":"3259:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4686,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4664,"src":"3262:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4687,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4668,"src":"3265:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4688,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"3258:9:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4690,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4660,"src":"3294:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4691,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4664,"src":"3297:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4692,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4668,"src":"3300:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4689,"name":"_modifiedJacobianDouble","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5224,"src":"3270:23:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256,uint256,uint256)"}},"id":4693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3270:32:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256,uint256)"}},"src":"3258:44:24","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4695,"nodeType":"ExpressionStatement","src":"3258:44:24"},{"expression":{"id":4705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":4696,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4660,"src":"3321:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4697,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4664,"src":"3324:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4698,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4668,"src":"3327:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4699,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"3320:9:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4701,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4660,"src":"3356:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4702,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4664,"src":"3359:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4703,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4668,"src":"3362:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4700,"name":"_modifiedJacobianDouble","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5224,"src":"3332:23:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256,uint256,uint256)"}},"id":4704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3332:32:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256,uint256)"}},"src":"3320:44:24","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4706,"nodeType":"ExpressionStatement","src":"3320:44:24"}]}},{"expression":{"id":4725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4709,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4676,"src":"3392:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4710,"name":"u1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"3418:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":4711,"name":"MOST_SIGNIFICANT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4520,"src":"3423:16:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3418:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4713,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3417:23:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323532","id":4714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3444:3:24","typeDescriptions":{"typeIdentifier":"t_rational_252_by_1","typeString":"int_const 252"},"value":"252"},"src":"3417:30:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4716,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3416:32:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4717,"name":"u2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4652,"src":"3469:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":4718,"name":"MOST_SIGNIFICANT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4520,"src":"3474:16:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3469:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4720,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3468:23:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323534","id":4721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3495:3:24","typeDescriptions":{"typeIdentifier":"t_rational_254_by_1","typeString":"int_const 254"},"value":"254"},"src":"3468:30:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4723,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3467:32:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3416:83:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3392:107:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4726,"nodeType":"ExpressionStatement","src":"3392:107:24"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4727,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4676,"src":"3517:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3525:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3517:9:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4754,"nodeType":"IfStatement","src":"3513:263:24","trueBody":{"id":4753,"nodeType":"Block","src":"3528:248:24","statements":[{"expression":{"id":4751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":4730,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4660,"src":"3547:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4731,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4664,"src":"3550:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4732,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4668,"src":"3553:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4733,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"3546:9:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4735,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4660,"src":"3585:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4736,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4664,"src":"3608:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4737,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4668,"src":"3631:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"baseExpression":{"id":4738,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4648,"src":"3654:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4740,"indexExpression":{"id":4739,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4676,"src":"3661:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3654:13:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"id":4741,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3668:1:24","memberName":"x","nodeType":"MemberAccess","referencedDeclaration":4494,"src":"3654:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"baseExpression":{"id":4742,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4648,"src":"3691:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4744,"indexExpression":{"id":4743,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4676,"src":"3698:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3691:13:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"id":4745,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3705:1:24","memberName":"y","nodeType":"MemberAccess","referencedDeclaration":4496,"src":"3691:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"baseExpression":{"id":4746,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4648,"src":"3728:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4748,"indexExpression":{"id":4747,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4676,"src":"3735:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3728:13:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"id":4749,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3742:1:24","memberName":"z","nodeType":"MemberAccess","referencedDeclaration":4498,"src":"3728:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4734,"name":"_jAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5207,"src":"3558:5:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256,uint256,uint256,uint256,uint256) pure returns (uint256,uint256,uint256)"}},"id":4750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3558:203:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256,uint256)"}},"src":"3546:215:24","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4752,"nodeType":"ExpressionStatement","src":"3546:215:24"}]}},{"expression":{"id":4757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4755,"name":"u1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"3789:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"32","id":4756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3796:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"3789:8:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4758,"nodeType":"ExpressionStatement","src":"3789:8:24"},{"expression":{"id":4761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4759,"name":"u2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4652,"src":"3811:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"32","id":4760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3818:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"3811:8:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4762,"nodeType":"ExpressionStatement","src":"3811:8:24"},{"expression":{"id":4764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"3833:6:24","subExpression":{"id":4763,"name":"bits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4672,"src":"3833:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4765,"nodeType":"ExpressionStatement","src":"3833:6:24"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4679,"name":"bits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4672,"src":"3205:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3212:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3205:8:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4767,"nodeType":"WhileStatement","src":"3198:652:24"},{"expression":{"id":4776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":4768,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4660,"src":"3860:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4769,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4664,"src":"3863:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4770,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"3859:6:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4772,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4660,"src":"3888:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4773,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4664,"src":"3891:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4774,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4668,"src":"3894:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4771,"name":"_affineFromJacobian","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5135,"src":"3868:19:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256,uint256) view returns (uint256,uint256)"}},"id":4775,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3868:28:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"3859:37:24","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4777,"nodeType":"ExpressionStatement","src":"3859:37:24"},{"expression":{"components":[{"id":4778,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4660,"src":"3914:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4779,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4664,"src":"3917:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4780,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3913:6:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":4658,"id":4781,"nodeType":"Return","src":"3906:13:24"}]},"id":4783,"implemented":true,"kind":"function","modifiers":[],"name":"ShamirMultJacobian","nameLocation":"2950:18:24","nodeType":"FunctionDefinition","parameters":{"id":4653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4648,"mutability":"mutable","name":"points","nameLocation":"2996:6:24","nodeType":"VariableDeclaration","scope":4783,"src":"2978:24:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint[16]"},"typeName":{"baseType":{"id":4645,"nodeType":"UserDefinedTypeName","pathNode":{"id":4644,"name":"JPoint","nameLocations":["2978:6:24"],"nodeType":"IdentifierPath","referencedDeclaration":4499,"src":"2978:6:24"},"referencedDeclaration":4499,"src":"2978:6:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_storage_ptr","typeString":"struct JPoint"}},"id":4647,"length":{"hexValue":"3136","id":4646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2985:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"nodeType":"ArrayTypeName","src":"2978:10:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_storage_$16_storage_ptr","typeString":"struct JPoint[16]"}},"visibility":"internal"},{"constant":false,"id":4650,"mutability":"mutable","name":"u1","nameLocation":"3017:2:24","nodeType":"VariableDeclaration","scope":4783,"src":"3012:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4649,"name":"uint","nodeType":"ElementaryTypeName","src":"3012:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4652,"mutability":"mutable","name":"u2","nameLocation":"3034:2:24","nodeType":"VariableDeclaration","scope":4783,"src":"3029:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4651,"name":"uint","nodeType":"ElementaryTypeName","src":"3029:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2968:74:24"},"returnParameters":{"id":4658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4655,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4783,"src":"3066:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4654,"name":"uint","nodeType":"ElementaryTypeName","src":"3066:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4657,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4783,"src":"3072:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4656,"name":"uint","nodeType":"ElementaryTypeName","src":"3072:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3065:12:24"},"scope":5260,"src":"2941:985:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4989,"nodeType":"Block","src":"4056:1325:24","statements":[{"expression":{"id":4802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4794,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"4494:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4796,"indexExpression":{"hexValue":"30","id":4795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4501:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4494:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":4798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4513:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":4799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4516:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":4800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4519:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4797,"name":"JPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4499,"src":"4506:6:24","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_JPoint_$4499_storage_ptr_$","typeString":"type(struct JPoint storage pointer)"}},"id":4801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4506:15:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"src":"4494:27:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"id":4803,"nodeType":"ExpressionStatement","src":"4494:27:24"},{"expression":{"id":4814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4804,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"4531:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4806,"indexExpression":{"hexValue":"31","id":4805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4538:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4531:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":4808,"name":"passKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4786,"src":"4550:7:24","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId memory"}},"id":4809,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4558:7:24","memberName":"pubKeyX","nodeType":"MemberAccess","referencedDeclaration":4487,"src":"4550:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":4810,"name":"passKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4786,"src":"4567:7:24","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId memory"}},"id":4811,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4575:7:24","memberName":"pubKeyY","nodeType":"MemberAccess","referencedDeclaration":4489,"src":"4567:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":4812,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4584:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":4807,"name":"JPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4499,"src":"4543:6:24","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_JPoint_$4499_storage_ptr_$","typeString":"type(struct JPoint storage pointer)"}},"id":4813,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4543:43:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"src":"4531:55:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"id":4815,"nodeType":"ExpressionStatement","src":"4531:55:24"},{"expression":{"id":4824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4816,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"4602:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4818,"indexExpression":{"hexValue":"32","id":4817,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4609:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4602:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":4820,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"4628:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4822,"indexExpression":{"hexValue":"31","id":4821,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4635:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4628:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}],"id":4819,"name":"_jPointDouble","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5077,"src":"4614:13:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_JPoint_$4499_memory_ptr_$returns$_t_struct$_JPoint_$4499_memory_ptr_$","typeString":"function (struct JPoint memory) pure returns (struct JPoint memory)"}},"id":4823,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4614:24:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"src":"4602:36:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"id":4825,"nodeType":"ExpressionStatement","src":"4602:36:24"},{"expression":{"id":4837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4826,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"4648:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4828,"indexExpression":{"hexValue":"33","id":4827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4655:1:24","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4648:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":4830,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"4671:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4832,"indexExpression":{"hexValue":"31","id":4831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4678:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4671:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},{"baseExpression":{"id":4833,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"4682:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4835,"indexExpression":{"hexValue":"32","id":4834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4689:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4682:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"},{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}],"id":4829,"name":"_jPointAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5038,"src":"4660:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_JPoint_$4499_memory_ptr_$_t_struct$_JPoint_$4499_memory_ptr_$returns$_t_struct$_JPoint_$4499_memory_ptr_$","typeString":"function (struct JPoint memory,struct JPoint memory) pure returns (struct JPoint memory)"}},"id":4836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4660:32:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"src":"4648:44:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"id":4838,"nodeType":"ExpressionStatement","src":"4648:44:24"},{"expression":{"id":4847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4839,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"4703:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4841,"indexExpression":{"hexValue":"34","id":4840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4710:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4703:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4843,"name":"gx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4502,"src":"4722:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4844,"name":"gy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"4726:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":4845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4730:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":4842,"name":"JPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4499,"src":"4715:6:24","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_JPoint_$4499_storage_ptr_$","typeString":"type(struct JPoint storage pointer)"}},"id":4846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4715:17:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"src":"4703:29:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"id":4848,"nodeType":"ExpressionStatement","src":"4703:29:24"},{"expression":{"id":4860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4849,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"4757:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4851,"indexExpression":{"hexValue":"35","id":4850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4764:1:24","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4757:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":4853,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"4780:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4855,"indexExpression":{"hexValue":"34","id":4854,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4787:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4780:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},{"baseExpression":{"id":4856,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"4791:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4858,"indexExpression":{"hexValue":"31","id":4857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4798:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4791:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"},{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}],"id":4852,"name":"_jPointAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5038,"src":"4769:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_JPoint_$4499_memory_ptr_$_t_struct$_JPoint_$4499_memory_ptr_$returns$_t_struct$_JPoint_$4499_memory_ptr_$","typeString":"function (struct JPoint memory,struct JPoint memory) pure returns (struct JPoint memory)"}},"id":4859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4769:32:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"src":"4757:44:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"id":4861,"nodeType":"ExpressionStatement","src":"4757:44:24"},{"expression":{"id":4873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4862,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"4811:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4864,"indexExpression":{"hexValue":"36","id":4863,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4818:1:24","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4811:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":4866,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"4834:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4868,"indexExpression":{"hexValue":"34","id":4867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4841:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4834:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},{"baseExpression":{"id":4869,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"4845:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4871,"indexExpression":{"hexValue":"32","id":4870,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4852:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4845:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"},{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}],"id":4865,"name":"_jPointAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5038,"src":"4823:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_JPoint_$4499_memory_ptr_$_t_struct$_JPoint_$4499_memory_ptr_$returns$_t_struct$_JPoint_$4499_memory_ptr_$","typeString":"function (struct JPoint memory,struct JPoint memory) pure returns (struct JPoint memory)"}},"id":4872,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4823:32:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"src":"4811:44:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"id":4874,"nodeType":"ExpressionStatement","src":"4811:44:24"},{"expression":{"id":4886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4875,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"4865:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4877,"indexExpression":{"hexValue":"37","id":4876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4872:1:24","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4865:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":4879,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"4888:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4881,"indexExpression":{"hexValue":"34","id":4880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4895:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4888:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},{"baseExpression":{"id":4882,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"4899:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4884,"indexExpression":{"hexValue":"33","id":4883,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4906:1:24","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4899:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"},{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}],"id":4878,"name":"_jPointAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5038,"src":"4877:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_JPoint_$4499_memory_ptr_$_t_struct$_JPoint_$4499_memory_ptr_$returns$_t_struct$_JPoint_$4499_memory_ptr_$","typeString":"function (struct JPoint memory,struct JPoint memory) pure returns (struct JPoint memory)"}},"id":4885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4877:32:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"src":"4865:44:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"id":4887,"nodeType":"ExpressionStatement","src":"4865:44:24"},{"expression":{"id":4896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4888,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"4920:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4890,"indexExpression":{"hexValue":"38","id":4889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4927:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4920:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":4892,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"4946:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4894,"indexExpression":{"hexValue":"34","id":4893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4953:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4946:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}],"id":4891,"name":"_jPointDouble","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5077,"src":"4932:13:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_JPoint_$4499_memory_ptr_$returns$_t_struct$_JPoint_$4499_memory_ptr_$","typeString":"function (struct JPoint memory) pure returns (struct JPoint memory)"}},"id":4895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4932:24:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"src":"4920:36:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"id":4897,"nodeType":"ExpressionStatement","src":"4920:36:24"},{"expression":{"id":4909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4898,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"4981:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4900,"indexExpression":{"hexValue":"39","id":4899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4988:1:24","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"9"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4981:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":4902,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"5004:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4904,"indexExpression":{"hexValue":"38","id":4903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5011:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5004:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},{"baseExpression":{"id":4905,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"5015:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4907,"indexExpression":{"hexValue":"31","id":4906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5022:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5015:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"},{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}],"id":4901,"name":"_jPointAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5038,"src":"4993:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_JPoint_$4499_memory_ptr_$_t_struct$_JPoint_$4499_memory_ptr_$returns$_t_struct$_JPoint_$4499_memory_ptr_$","typeString":"function (struct JPoint memory,struct JPoint memory) pure returns (struct JPoint memory)"}},"id":4908,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4993:32:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"src":"4981:44:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"id":4910,"nodeType":"ExpressionStatement","src":"4981:44:24"},{"expression":{"id":4922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4911,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"5035:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4913,"indexExpression":{"hexValue":"3130","id":4912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5042:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5035:10:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":4915,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"5059:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4917,"indexExpression":{"hexValue":"38","id":4916,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5066:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5059:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},{"baseExpression":{"id":4918,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"5070:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4920,"indexExpression":{"hexValue":"32","id":4919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5077:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5070:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"},{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}],"id":4914,"name":"_jPointAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5038,"src":"5048:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_JPoint_$4499_memory_ptr_$_t_struct$_JPoint_$4499_memory_ptr_$returns$_t_struct$_JPoint_$4499_memory_ptr_$","typeString":"function (struct JPoint memory,struct JPoint memory) pure returns (struct JPoint memory)"}},"id":4921,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5048:32:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"src":"5035:45:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"id":4923,"nodeType":"ExpressionStatement","src":"5035:45:24"},{"expression":{"id":4935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4924,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"5090:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4926,"indexExpression":{"hexValue":"3131","id":4925,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5097:2:24","typeDescriptions":{"typeIdentifier":"t_rational_11_by_1","typeString":"int_const 11"},"value":"11"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5090:10:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":4928,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"5114:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4930,"indexExpression":{"hexValue":"38","id":4929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5121:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5114:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},{"baseExpression":{"id":4931,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"5125:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4933,"indexExpression":{"hexValue":"33","id":4932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5132:1:24","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5125:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"},{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}],"id":4927,"name":"_jPointAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5038,"src":"5103:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_JPoint_$4499_memory_ptr_$_t_struct$_JPoint_$4499_memory_ptr_$returns$_t_struct$_JPoint_$4499_memory_ptr_$","typeString":"function (struct JPoint memory,struct JPoint memory) pure returns (struct JPoint memory)"}},"id":4934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5103:32:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"src":"5090:45:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"id":4936,"nodeType":"ExpressionStatement","src":"5090:45:24"},{"expression":{"id":4948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4937,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"5146:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4939,"indexExpression":{"hexValue":"3132","id":4938,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5153:2:24","typeDescriptions":{"typeIdentifier":"t_rational_12_by_1","typeString":"int_const 12"},"value":"12"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5146:10:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":4941,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"5170:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4943,"indexExpression":{"hexValue":"34","id":4942,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5177:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5170:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},{"baseExpression":{"id":4944,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"5181:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4946,"indexExpression":{"hexValue":"38","id":4945,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5188:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5181:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"},{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}],"id":4940,"name":"_jPointAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5038,"src":"5159:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_JPoint_$4499_memory_ptr_$_t_struct$_JPoint_$4499_memory_ptr_$returns$_t_struct$_JPoint_$4499_memory_ptr_$","typeString":"function (struct JPoint memory,struct JPoint memory) pure returns (struct JPoint memory)"}},"id":4947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5159:32:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"src":"5146:45:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"id":4949,"nodeType":"ExpressionStatement","src":"5146:45:24"},{"expression":{"id":4961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4950,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"5216:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4952,"indexExpression":{"hexValue":"3133","id":4951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5223:2:24","typeDescriptions":{"typeIdentifier":"t_rational_13_by_1","typeString":"int_const 13"},"value":"13"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5216:10:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":4954,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"5240:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4956,"indexExpression":{"hexValue":"3132","id":4955,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5247:2:24","typeDescriptions":{"typeIdentifier":"t_rational_12_by_1","typeString":"int_const 12"},"value":"12"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5240:10:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},{"baseExpression":{"id":4957,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"5252:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4959,"indexExpression":{"hexValue":"31","id":4958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5259:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5252:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"},{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}],"id":4953,"name":"_jPointAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5038,"src":"5229:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_JPoint_$4499_memory_ptr_$_t_struct$_JPoint_$4499_memory_ptr_$returns$_t_struct$_JPoint_$4499_memory_ptr_$","typeString":"function (struct JPoint memory,struct JPoint memory) pure returns (struct JPoint memory)"}},"id":4960,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5229:33:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"src":"5216:46:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"id":4962,"nodeType":"ExpressionStatement","src":"5216:46:24"},{"expression":{"id":4974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4963,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"5272:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4965,"indexExpression":{"hexValue":"3134","id":4964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5279:2:24","typeDescriptions":{"typeIdentifier":"t_rational_14_by_1","typeString":"int_const 14"},"value":"14"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5272:10:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":4967,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"5296:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4969,"indexExpression":{"hexValue":"3132","id":4968,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5303:2:24","typeDescriptions":{"typeIdentifier":"t_rational_12_by_1","typeString":"int_const 12"},"value":"12"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5296:10:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},{"baseExpression":{"id":4970,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"5308:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4972,"indexExpression":{"hexValue":"32","id":4971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5315:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5308:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"},{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}],"id":4966,"name":"_jPointAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5038,"src":"5285:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_JPoint_$4499_memory_ptr_$_t_struct$_JPoint_$4499_memory_ptr_$returns$_t_struct$_JPoint_$4499_memory_ptr_$","typeString":"function (struct JPoint memory,struct JPoint memory) pure returns (struct JPoint memory)"}},"id":4973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5285:33:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"src":"5272:46:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"id":4975,"nodeType":"ExpressionStatement","src":"5272:46:24"},{"expression":{"id":4987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4976,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"5328:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4978,"indexExpression":{"hexValue":"3135","id":4977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5335:2:24","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"15"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5328:10:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":4980,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"5352:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4982,"indexExpression":{"hexValue":"3132","id":4981,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5359:2:24","typeDescriptions":{"typeIdentifier":"t_rational_12_by_1","typeString":"int_const 12"},"value":"12"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5352:10:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},{"baseExpression":{"id":4983,"name":"points","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"5364:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint memory[16] memory"}},"id":4985,"indexExpression":{"hexValue":"33","id":4984,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5371:1:24","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5364:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"},{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}],"id":4979,"name":"_jPointAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5038,"src":"5341:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_JPoint_$4499_memory_ptr_$_t_struct$_JPoint_$4499_memory_ptr_$returns$_t_struct$_JPoint_$4499_memory_ptr_$","typeString":"function (struct JPoint memory,struct JPoint memory) pure returns (struct JPoint memory)"}},"id":4986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5341:33:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"src":"5328:46:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"id":4988,"nodeType":"ExpressionStatement","src":"5328:46:24"}]},"id":4990,"implemented":true,"kind":"function","modifiers":[],"name":"_preComputeJacobianPoints","nameLocation":"3941:25:24","nodeType":"FunctionDefinition","parameters":{"id":4787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4786,"mutability":"mutable","name":"passKey","nameLocation":"3993:7:24","nodeType":"VariableDeclaration","scope":4990,"src":"3976:24:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_memory_ptr","typeString":"struct PassKeyId"},"typeName":{"id":4785,"nodeType":"UserDefinedTypeName","pathNode":{"id":4784,"name":"PassKeyId","nameLocations":["3976:9:24"],"nodeType":"IdentifierPath","referencedDeclaration":4492,"src":"3976:9:24"},"referencedDeclaration":4492,"src":"3976:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_PassKeyId_$4492_storage_ptr","typeString":"struct PassKeyId"}},"visibility":"internal"}],"src":"3966:40:24"},"returnParameters":{"id":4793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4792,"mutability":"mutable","name":"points","nameLocation":"4048:6:24","nodeType":"VariableDeclaration","scope":4990,"src":"4030:24:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_memory_ptr_$16_memory_ptr","typeString":"struct JPoint[16]"},"typeName":{"baseType":{"id":4789,"nodeType":"UserDefinedTypeName","pathNode":{"id":4788,"name":"JPoint","nameLocations":["4030:6:24"],"nodeType":"IdentifierPath","referencedDeclaration":4499,"src":"4030:6:24"},"referencedDeclaration":4499,"src":"4030:6:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_storage_ptr","typeString":"struct JPoint"}},"id":4791,"length":{"hexValue":"3136","id":4790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4037:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"nodeType":"ArrayTypeName","src":"4030:10:24","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_JPoint_$4499_storage_$16_storage_ptr","typeString":"struct JPoint[16]"}},"visibility":"internal"}],"src":"4029:26:24"},"scope":5260,"src":"3932:1449:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5037,"nodeType":"Block","src":"5503:150:24","statements":[{"assignments":[5003],"declarations":[{"constant":false,"id":5003,"mutability":"mutable","name":"x","nameLocation":"5518:1:24","nodeType":"VariableDeclaration","scope":5037,"src":"5513:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5002,"name":"uint","nodeType":"ElementaryTypeName","src":"5513:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5004,"nodeType":"VariableDeclarationStatement","src":"5513:6:24"},{"assignments":[5006],"declarations":[{"constant":false,"id":5006,"mutability":"mutable","name":"y","nameLocation":"5534:1:24","nodeType":"VariableDeclaration","scope":5037,"src":"5529:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5005,"name":"uint","nodeType":"ElementaryTypeName","src":"5529:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5007,"nodeType":"VariableDeclarationStatement","src":"5529:6:24"},{"assignments":[5009],"declarations":[{"constant":false,"id":5009,"mutability":"mutable","name":"z","nameLocation":"5550:1:24","nodeType":"VariableDeclaration","scope":5037,"src":"5545:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5008,"name":"uint","nodeType":"ElementaryTypeName","src":"5545:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5010,"nodeType":"VariableDeclarationStatement","src":"5545:6:24"},{"expression":{"id":5029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":5011,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5003,"src":"5562:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5012,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5006,"src":"5565:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5013,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5009,"src":"5568:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5014,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"5561:9:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":5016,"name":"p1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4993,"src":"5579:2:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"id":5017,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5582:1:24","memberName":"x","nodeType":"MemberAccess","referencedDeclaration":4494,"src":"5579:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5018,"name":"p1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4993,"src":"5585:2:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"id":5019,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5588:1:24","memberName":"y","nodeType":"MemberAccess","referencedDeclaration":4496,"src":"5585:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5020,"name":"p1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4993,"src":"5591:2:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"id":5021,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5594:1:24","memberName":"z","nodeType":"MemberAccess","referencedDeclaration":4498,"src":"5591:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5022,"name":"p2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4996,"src":"5597:2:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"id":5023,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5600:1:24","memberName":"x","nodeType":"MemberAccess","referencedDeclaration":4494,"src":"5597:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5024,"name":"p2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4996,"src":"5603:2:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"id":5025,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5606:1:24","memberName":"y","nodeType":"MemberAccess","referencedDeclaration":4496,"src":"5603:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5026,"name":"p2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4996,"src":"5609:2:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"id":5027,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5612:1:24","memberName":"z","nodeType":"MemberAccess","referencedDeclaration":4498,"src":"5609:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5015,"name":"_jAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5207,"src":"5573:5:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256,uint256,uint256,uint256,uint256) pure returns (uint256,uint256,uint256)"}},"id":5028,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5573:41:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256,uint256)"}},"src":"5561:53:24","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5030,"nodeType":"ExpressionStatement","src":"5561:53:24"},{"expression":{"arguments":[{"id":5032,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5003,"src":"5638:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5033,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5006,"src":"5641:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5034,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5009,"src":"5644:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5031,"name":"JPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4499,"src":"5631:6:24","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_JPoint_$4499_storage_ptr_$","typeString":"type(struct JPoint storage pointer)"}},"id":5035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5631:15:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"functionReturnParameters":5001,"id":5036,"nodeType":"Return","src":"5624:22:24"}]},"id":5038,"implemented":true,"kind":"function","modifiers":[],"name":"_jPointAdd","nameLocation":"5396:10:24","nodeType":"FunctionDefinition","parameters":{"id":4997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4993,"mutability":"mutable","name":"p1","nameLocation":"5430:2:24","nodeType":"VariableDeclaration","scope":5038,"src":"5416:16:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint"},"typeName":{"id":4992,"nodeType":"UserDefinedTypeName","pathNode":{"id":4991,"name":"JPoint","nameLocations":["5416:6:24"],"nodeType":"IdentifierPath","referencedDeclaration":4499,"src":"5416:6:24"},"referencedDeclaration":4499,"src":"5416:6:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_storage_ptr","typeString":"struct JPoint"}},"visibility":"internal"},{"constant":false,"id":4996,"mutability":"mutable","name":"p2","nameLocation":"5456:2:24","nodeType":"VariableDeclaration","scope":5038,"src":"5442:16:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint"},"typeName":{"id":4995,"nodeType":"UserDefinedTypeName","pathNode":{"id":4994,"name":"JPoint","nameLocations":["5442:6:24"],"nodeType":"IdentifierPath","referencedDeclaration":4499,"src":"5442:6:24"},"referencedDeclaration":4499,"src":"5442:6:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_storage_ptr","typeString":"struct JPoint"}},"visibility":"internal"}],"src":"5406:58:24"},"returnParameters":{"id":5001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5000,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5038,"src":"5488:13:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint"},"typeName":{"id":4999,"nodeType":"UserDefinedTypeName","pathNode":{"id":4998,"name":"JPoint","nameLocations":["5488:6:24"],"nodeType":"IdentifierPath","referencedDeclaration":4499,"src":"5488:6:24"},"referencedDeclaration":4499,"src":"5488:6:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_storage_ptr","typeString":"struct JPoint"}},"visibility":"internal"}],"src":"5487:15:24"},"scope":5260,"src":"5387:266:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5076,"nodeType":"Block","src":"5751:147:24","statements":[{"assignments":[5048],"declarations":[{"constant":false,"id":5048,"mutability":"mutable","name":"x","nameLocation":"5766:1:24","nodeType":"VariableDeclaration","scope":5076,"src":"5761:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5047,"name":"uint","nodeType":"ElementaryTypeName","src":"5761:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5049,"nodeType":"VariableDeclarationStatement","src":"5761:6:24"},{"assignments":[5051],"declarations":[{"constant":false,"id":5051,"mutability":"mutable","name":"y","nameLocation":"5782:1:24","nodeType":"VariableDeclaration","scope":5076,"src":"5777:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5050,"name":"uint","nodeType":"ElementaryTypeName","src":"5777:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5052,"nodeType":"VariableDeclarationStatement","src":"5777:6:24"},{"assignments":[5054],"declarations":[{"constant":false,"id":5054,"mutability":"mutable","name":"z","nameLocation":"5798:1:24","nodeType":"VariableDeclaration","scope":5076,"src":"5793:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5053,"name":"uint","nodeType":"ElementaryTypeName","src":"5793:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5055,"nodeType":"VariableDeclarationStatement","src":"5793:6:24"},{"expression":{"id":5068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":5056,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5048,"src":"5810:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5057,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5051,"src":"5813:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5058,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5054,"src":"5816:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5059,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"5809:9:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":5061,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5041,"src":"5845:1:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"id":5062,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5847:1:24","memberName":"x","nodeType":"MemberAccess","referencedDeclaration":4494,"src":"5845:3:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5063,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5041,"src":"5850:1:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"id":5064,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5852:1:24","memberName":"y","nodeType":"MemberAccess","referencedDeclaration":4496,"src":"5850:3:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5065,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5041,"src":"5855:1:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"id":5066,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5857:1:24","memberName":"z","nodeType":"MemberAccess","referencedDeclaration":4498,"src":"5855:3:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5060,"name":"_modifiedJacobianDouble","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5224,"src":"5821:23:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256,uint256,uint256)"}},"id":5067,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5821:38:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256,uint256)"}},"src":"5809:50:24","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5069,"nodeType":"ExpressionStatement","src":"5809:50:24"},{"expression":{"arguments":[{"id":5071,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5048,"src":"5883:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5072,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5051,"src":"5886:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5073,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5054,"src":"5889:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5070,"name":"JPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4499,"src":"5876:6:24","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_JPoint_$4499_storage_ptr_$","typeString":"type(struct JPoint storage pointer)"}},"id":5074,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5876:15:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint memory"}},"functionReturnParameters":5046,"id":5075,"nodeType":"Return","src":"5869:22:24"}]},"id":5077,"implemented":true,"kind":"function","modifiers":[],"name":"_jPointDouble","nameLocation":"5668:13:24","nodeType":"FunctionDefinition","parameters":{"id":5042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5041,"mutability":"mutable","name":"p","nameLocation":"5705:1:24","nodeType":"VariableDeclaration","scope":5077,"src":"5691:15:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint"},"typeName":{"id":5040,"nodeType":"UserDefinedTypeName","pathNode":{"id":5039,"name":"JPoint","nameLocations":["5691:6:24"],"nodeType":"IdentifierPath","referencedDeclaration":4499,"src":"5691:6:24"},"referencedDeclaration":4499,"src":"5691:6:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_storage_ptr","typeString":"struct JPoint"}},"visibility":"internal"}],"src":"5681:31:24"},"returnParameters":{"id":5046,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5045,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5077,"src":"5736:13:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_memory_ptr","typeString":"struct JPoint"},"typeName":{"id":5044,"nodeType":"UserDefinedTypeName","pathNode":{"id":5043,"name":"JPoint","nameLocations":["5736:6:24"],"nodeType":"IdentifierPath","referencedDeclaration":4499,"src":"5736:6:24"},"referencedDeclaration":4499,"src":"5736:6:24","typeDescriptions":{"typeIdentifier":"t_struct$_JPoint_$4499_storage_ptr","typeString":"struct JPoint"}},"visibility":"internal"}],"src":"5735:15:24"},"scope":5260,"src":"5659:239:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5134,"nodeType":"Block","src":"6177:242:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5090,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5083,"src":"6191:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6196:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6191:6:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5098,"nodeType":"IfStatement","src":"6187:50:24","trueBody":{"id":5097,"nodeType":"Block","src":"6199:38:24","statements":[{"expression":{"components":[{"hexValue":"30","id":5093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6221:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":5094,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6224:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":5095,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6220:6:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_rational_0_by_1_$_t_rational_0_by_1_$","typeString":"tuple(int_const 0,int_const 0)"}},"functionReturnParameters":5089,"id":5096,"nodeType":"Return","src":"6213:13:24"}]}},{"assignments":[5100],"declarations":[{"constant":false,"id":5100,"mutability":"mutable","name":"zinv","nameLocation":"6252:4:24","nodeType":"VariableDeclaration","scope":5134,"src":"6247:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5099,"name":"uint","nodeType":"ElementaryTypeName","src":"6247:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5105,"initialValue":{"arguments":[{"id":5102,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5083,"src":"6269:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5103,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4508,"src":"6272:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5101,"name":"_primemod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5246,"src":"6259:9:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) view returns (uint256)"}},"id":5104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6259:16:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6247:28:24"},{"assignments":[5107],"declarations":[{"constant":false,"id":5107,"mutability":"mutable","name":"zinvsq","nameLocation":"6290:6:24","nodeType":"VariableDeclaration","scope":5134,"src":"6285:11:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5106,"name":"uint","nodeType":"ElementaryTypeName","src":"6285:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5113,"initialValue":{"arguments":[{"id":5109,"name":"zinv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5100,"src":"6306:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5110,"name":"zinv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5100,"src":"6312:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5111,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4508,"src":"6318:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5108,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6299:6:24","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":5112,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6299:22:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6285:36:24"},{"expression":{"id":5120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5114,"name":"ax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5086,"src":"6332:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5116,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5079,"src":"6344:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5117,"name":"zinvsq","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5107,"src":"6347:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5118,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4508,"src":"6355:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5115,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6337:6:24","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":5119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6337:21:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6332:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5121,"nodeType":"ExpressionStatement","src":"6332:26:24"},{"expression":{"id":5132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5122,"name":"ay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5088,"src":"6368:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5124,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5081,"src":"6380:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":5126,"name":"zinvsq","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5107,"src":"6390:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5127,"name":"zinv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5100,"src":"6398:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5128,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4508,"src":"6404:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5125,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6383:6:24","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":5129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6383:24:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5130,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4508,"src":"6409:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5123,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6373:6:24","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":5131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6373:39:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6368:44:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5133,"nodeType":"ExpressionStatement","src":"6368:44:24"}]},"id":5135,"implemented":true,"kind":"function","modifiers":[],"name":"_affineFromJacobian","nameLocation":"6062:19:24","nodeType":"FunctionDefinition","parameters":{"id":5084,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5079,"mutability":"mutable","name":"x","nameLocation":"6096:1:24","nodeType":"VariableDeclaration","scope":5135,"src":"6091:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5078,"name":"uint","nodeType":"ElementaryTypeName","src":"6091:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5081,"mutability":"mutable","name":"y","nameLocation":"6112:1:24","nodeType":"VariableDeclaration","scope":5135,"src":"6107:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5080,"name":"uint","nodeType":"ElementaryTypeName","src":"6107:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5083,"mutability":"mutable","name":"z","nameLocation":"6128:1:24","nodeType":"VariableDeclaration","scope":5135,"src":"6123:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5082,"name":"uint","nodeType":"ElementaryTypeName","src":"6123:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6081:54:24"},"returnParameters":{"id":5089,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5086,"mutability":"mutable","name":"ax","nameLocation":"6164:2:24","nodeType":"VariableDeclaration","scope":5135,"src":"6159:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5085,"name":"uint","nodeType":"ElementaryTypeName","src":"6159:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5088,"mutability":"mutable","name":"ay","nameLocation":"6173:2:24","nodeType":"VariableDeclaration","scope":5135,"src":"6168:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5087,"name":"uint","nodeType":"ElementaryTypeName","src":"6168:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6158:18:24"},"scope":5260,"src":"6053:366:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5206,"nodeType":"Block","src":"6784:2180:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5156,"name":"p3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5141,"src":"6798:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6804:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6798:7:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5177,"name":"q3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5147,"src":"6925:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6931:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6925:7:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5198,"nodeType":"IfStatement","src":"6921:121:24","trueBody":{"id":5197,"nodeType":"Block","src":"6934:108:24","statements":[{"expression":{"id":5182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5180,"name":"r1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5150,"src":"6948:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5181,"name":"p1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5137,"src":"6953:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6948:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5183,"nodeType":"ExpressionStatement","src":"6948:7:24"},{"expression":{"id":5186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5184,"name":"r2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5152,"src":"6969:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5185,"name":"p2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5139,"src":"6974:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6969:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5187,"nodeType":"ExpressionStatement","src":"6969:7:24"},{"expression":{"id":5190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5188,"name":"r3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5154,"src":"6990:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5189,"name":"p3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5141,"src":"6995:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6990:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5191,"nodeType":"ExpressionStatement","src":"6990:7:24"},{"expression":{"components":[{"id":5192,"name":"r1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5150,"src":"7020:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5193,"name":"r2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5152,"src":"7024:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5194,"name":"r3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5154,"src":"7028:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5195,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7019:12:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256,uint256)"}},"functionReturnParameters":5155,"id":5196,"nodeType":"Return","src":"7012:19:24"}]}},"id":5199,"nodeType":"IfStatement","src":"6794:248:24","trueBody":{"id":5176,"nodeType":"Block","src":"6807:108:24","statements":[{"expression":{"id":5161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5159,"name":"r1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5150,"src":"6821:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5160,"name":"q1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5143,"src":"6826:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6821:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5162,"nodeType":"ExpressionStatement","src":"6821:7:24"},{"expression":{"id":5165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5163,"name":"r2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5152,"src":"6842:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5164,"name":"q2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5145,"src":"6847:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6842:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5166,"nodeType":"ExpressionStatement","src":"6842:7:24"},{"expression":{"id":5169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5167,"name":"r3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5154,"src":"6863:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5168,"name":"q3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5147,"src":"6868:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6863:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5170,"nodeType":"ExpressionStatement","src":"6863:7:24"},{"expression":{"components":[{"id":5171,"name":"r1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5150,"src":"6893:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5172,"name":"r2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5152,"src":"6897:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5173,"name":"r3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5154,"src":"6901:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5174,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6892:12:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256,uint256)"}},"functionReturnParameters":5155,"id":5175,"nodeType":"Return","src":"6885:19:24"}]}},{"AST":{"nodeType":"YulBlock","src":"7061:1868:24","statements":[{"nodeType":"YulVariableDeclaration","src":"7075:104:24","value":{"kind":"number","nodeType":"YulLiteral","src":"7113:66:24","type":"","value":"0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF"},"variables":[{"name":"pd","nodeType":"YulTypedName","src":"7095:2:24","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7192:30:24","value":{"arguments":[{"name":"p3","nodeType":"YulIdentifier","src":"7211:2:24"},{"name":"p3","nodeType":"YulIdentifier","src":"7215:2:24"},{"name":"pd","nodeType":"YulIdentifier","src":"7219:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"7204:6:24"},"nodeType":"YulFunctionCall","src":"7204:18:24"},"variables":[{"name":"z1z1","nodeType":"YulTypedName","src":"7196:4:24","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7250:30:24","value":{"arguments":[{"name":"q3","nodeType":"YulIdentifier","src":"7269:2:24"},{"name":"q3","nodeType":"YulIdentifier","src":"7273:2:24"},{"name":"pd","nodeType":"YulIdentifier","src":"7277:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"7262:6:24"},"nodeType":"YulFunctionCall","src":"7262:18:24"},"variables":[{"name":"z2z2","nodeType":"YulTypedName","src":"7254:4:24","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7309:30:24","value":{"arguments":[{"name":"p1","nodeType":"YulIdentifier","src":"7326:2:24"},{"name":"z2z2","nodeType":"YulIdentifier","src":"7330:4:24"},{"name":"pd","nodeType":"YulIdentifier","src":"7336:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"7319:6:24"},"nodeType":"YulFunctionCall","src":"7319:20:24"},"variables":[{"name":"u1","nodeType":"YulTypedName","src":"7313:2:24","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7368:30:24","value":{"arguments":[{"name":"q1","nodeType":"YulIdentifier","src":"7385:2:24"},{"name":"z1z1","nodeType":"YulIdentifier","src":"7389:4:24"},{"name":"pd","nodeType":"YulIdentifier","src":"7395:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"7378:6:24"},"nodeType":"YulFunctionCall","src":"7378:20:24"},"variables":[{"name":"u2","nodeType":"YulTypedName","src":"7372:2:24","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7428:46:24","value":{"arguments":[{"name":"p2","nodeType":"YulIdentifier","src":"7445:2:24"},{"arguments":[{"name":"z2z2","nodeType":"YulIdentifier","src":"7456:4:24"},{"name":"q3","nodeType":"YulIdentifier","src":"7462:2:24"},{"name":"pd","nodeType":"YulIdentifier","src":"7466:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"7449:6:24"},"nodeType":"YulFunctionCall","src":"7449:20:24"},{"name":"pd","nodeType":"YulIdentifier","src":"7471:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"7438:6:24"},"nodeType":"YulFunctionCall","src":"7438:36:24"},"variables":[{"name":"s1","nodeType":"YulTypedName","src":"7432:2:24","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7506:46:24","value":{"arguments":[{"name":"q2","nodeType":"YulIdentifier","src":"7523:2:24"},{"arguments":[{"name":"z1z1","nodeType":"YulIdentifier","src":"7534:4:24"},{"name":"p3","nodeType":"YulIdentifier","src":"7540:2:24"},{"name":"pd","nodeType":"YulIdentifier","src":"7544:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"7527:6:24"},"nodeType":"YulFunctionCall","src":"7527:20:24"},{"name":"pd","nodeType":"YulIdentifier","src":"7549:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"7516:6:24"},"nodeType":"YulFunctionCall","src":"7516:36:24"},"variables":[{"name":"s2","nodeType":"YulTypedName","src":"7510:2:24","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7585:30:24","value":{"arguments":[{"name":"p3","nodeType":"YulIdentifier","src":"7604:2:24"},{"name":"q3","nodeType":"YulIdentifier","src":"7608:2:24"},{"name":"pd","nodeType":"YulIdentifier","src":"7612:2:24"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"7597:6:24"},"nodeType":"YulFunctionCall","src":"7597:18:24"},"variables":[{"name":"p3q3","nodeType":"YulTypedName","src":"7589:4:24","type":""}]},{"body":{"nodeType":"YulBlock","src":"7643:63:24","statements":[{"nodeType":"YulAssignment","src":"7661:17:24","value":{"arguments":[{"name":"pd","nodeType":"YulIdentifier","src":"7671:2:24"},{"name":"u2","nodeType":"YulIdentifier","src":"7675:2:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7667:3:24"},"nodeType":"YulFunctionCall","src":"7667:11:24"},"variableNames":[{"name":"u2","nodeType":"YulIdentifier","src":"7661:2:24"}]}]},"condition":{"arguments":[{"name":"u2","nodeType":"YulIdentifier","src":"7635:2:24"},{"name":"u1","nodeType":"YulIdentifier","src":"7639:2:24"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7632:2:24"},"nodeType":"YulFunctionCall","src":"7632:10:24"},"nodeType":"YulIf","src":"7629:77:24"},{"nodeType":"YulVariableDeclaration","src":"7719:20:24","value":{"arguments":[{"name":"u2","nodeType":"YulIdentifier","src":"7732:2:24"},{"name":"u1","nodeType":"YulIdentifier","src":"7736:2:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7728:3:24"},"nodeType":"YulFunctionCall","src":"7728:11:24"},"variables":[{"name":"h","nodeType":"YulTypedName","src":"7723:1:24","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7766:28:24","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7782:4:24","type":"","value":"0x02"},{"name":"h","nodeType":"YulIdentifier","src":"7788:1:24"},{"name":"pd","nodeType":"YulIdentifier","src":"7791:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"7775:6:24"},"nodeType":"YulFunctionCall","src":"7775:19:24"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"7770:1:24","type":""}]},{"nodeType":"YulAssignment","src":"7807:21:24","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7819:1:24"},{"name":"i","nodeType":"YulIdentifier","src":"7822:1:24"},{"name":"pd","nodeType":"YulIdentifier","src":"7825:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"7812:6:24"},"nodeType":"YulFunctionCall","src":"7812:16:24"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"7807:1:24"}]},{"nodeType":"YulVariableDeclaration","src":"7857:25:24","value":{"arguments":[{"name":"h","nodeType":"YulIdentifier","src":"7873:1:24"},{"name":"i","nodeType":"YulIdentifier","src":"7876:1:24"},{"name":"pd","nodeType":"YulIdentifier","src":"7879:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"7866:6:24"},"nodeType":"YulFunctionCall","src":"7866:16:24"},"variables":[{"name":"j","nodeType":"YulTypedName","src":"7861:1:24","type":""}]},{"body":{"nodeType":"YulBlock","src":"7920:63:24","statements":[{"nodeType":"YulAssignment","src":"7938:17:24","value":{"arguments":[{"name":"pd","nodeType":"YulIdentifier","src":"7948:2:24"},{"name":"s2","nodeType":"YulIdentifier","src":"7952:2:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7944:3:24"},"nodeType":"YulFunctionCall","src":"7944:11:24"},"variableNames":[{"name":"s2","nodeType":"YulIdentifier","src":"7938:2:24"}]}]},"condition":{"arguments":[{"name":"s2","nodeType":"YulIdentifier","src":"7912:2:24"},{"name":"s1","nodeType":"YulIdentifier","src":"7916:2:24"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7909:2:24"},"nodeType":"YulFunctionCall","src":"7909:10:24"},"nodeType":"YulIf","src":"7906:77:24"},{"nodeType":"YulVariableDeclaration","src":"7996:39:24","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8013:4:24","type":"","value":"0x02"},{"arguments":[{"name":"s2","nodeType":"YulIdentifier","src":"8023:2:24"},{"name":"s1","nodeType":"YulIdentifier","src":"8027:2:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8019:3:24"},"nodeType":"YulFunctionCall","src":"8019:11:24"},{"name":"pd","nodeType":"YulIdentifier","src":"8032:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"8006:6:24"},"nodeType":"YulFunctionCall","src":"8006:29:24"},"variables":[{"name":"rr","nodeType":"YulTypedName","src":"8000:2:24","type":""}]},{"nodeType":"YulAssignment","src":"8065:24:24","value":{"arguments":[{"name":"rr","nodeType":"YulIdentifier","src":"8078:2:24"},{"name":"rr","nodeType":"YulIdentifier","src":"8082:2:24"},{"name":"pd","nodeType":"YulIdentifier","src":"8086:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"8071:6:24"},"nodeType":"YulFunctionCall","src":"8071:18:24"},"variableNames":[{"name":"r1","nodeType":"YulIdentifier","src":"8065:2:24"}]},{"nodeType":"YulVariableDeclaration","src":"8115:26:24","value":{"arguments":[{"name":"u1","nodeType":"YulIdentifier","src":"8131:2:24"},{"name":"i","nodeType":"YulIdentifier","src":"8135:1:24"},{"name":"pd","nodeType":"YulIdentifier","src":"8138:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"8124:6:24"},"nodeType":"YulFunctionCall","src":"8124:17:24"},"variables":[{"name":"v","nodeType":"YulTypedName","src":"8119:1:24","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8166:45:24","value":{"arguments":[{"name":"j","nodeType":"YulIdentifier","src":"8184:1:24"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8194:4:24","type":"","value":"0x02"},{"name":"v","nodeType":"YulIdentifier","src":"8200:1:24"},{"name":"pd","nodeType":"YulIdentifier","src":"8203:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"8187:6:24"},"nodeType":"YulFunctionCall","src":"8187:19:24"},{"name":"pd","nodeType":"YulIdentifier","src":"8208:2:24"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"8177:6:24"},"nodeType":"YulFunctionCall","src":"8177:34:24"},"variables":[{"name":"j2v","nodeType":"YulTypedName","src":"8170:3:24","type":""}]},{"body":{"nodeType":"YulBlock","src":"8239:63:24","statements":[{"nodeType":"YulAssignment","src":"8257:17:24","value":{"arguments":[{"name":"pd","nodeType":"YulIdentifier","src":"8267:2:24"},{"name":"r1","nodeType":"YulIdentifier","src":"8271:2:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8263:3:24"},"nodeType":"YulFunctionCall","src":"8263:11:24"},"variableNames":[{"name":"r1","nodeType":"YulIdentifier","src":"8257:2:24"}]}]},"condition":{"arguments":[{"name":"r1","nodeType":"YulIdentifier","src":"8230:2:24"},{"name":"j2v","nodeType":"YulIdentifier","src":"8234:3:24"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8227:2:24"},"nodeType":"YulFunctionCall","src":"8227:11:24"},"nodeType":"YulIf","src":"8224:78:24"},{"nodeType":"YulAssignment","src":"8315:18:24","value":{"arguments":[{"name":"r1","nodeType":"YulIdentifier","src":"8325:2:24"},{"name":"j2v","nodeType":"YulIdentifier","src":"8329:3:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8321:3:24"},"nodeType":"YulFunctionCall","src":"8321:12:24"},"variableNames":[{"name":"r1","nodeType":"YulIdentifier","src":"8315:2:24"}]},{"nodeType":"YulVariableDeclaration","src":"8383:47:24","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8409:4:24","type":"","value":"0x02"},{"name":"s1","nodeType":"YulIdentifier","src":"8415:2:24"},{"name":"pd","nodeType":"YulIdentifier","src":"8419:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"8402:6:24"},"nodeType":"YulFunctionCall","src":"8402:20:24"},{"name":"j","nodeType":"YulIdentifier","src":"8424:1:24"},{"name":"pd","nodeType":"YulIdentifier","src":"8427:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"8395:6:24"},"nodeType":"YulFunctionCall","src":"8395:35:24"},"variables":[{"name":"s12j","nodeType":"YulTypedName","src":"8387:4:24","type":""}]},{"body":{"nodeType":"YulBlock","src":"8457:47:24","statements":[{"nodeType":"YulAssignment","src":"8475:15:24","value":{"arguments":[{"name":"pd","nodeType":"YulIdentifier","src":"8484:2:24"},{"name":"v","nodeType":"YulIdentifier","src":"8488:1:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8480:3:24"},"nodeType":"YulFunctionCall","src":"8480:10:24"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"8475:1:24"}]}]},"condition":{"arguments":[{"name":"v","nodeType":"YulIdentifier","src":"8450:1:24"},{"name":"r1","nodeType":"YulIdentifier","src":"8453:2:24"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8447:2:24"},"nodeType":"YulFunctionCall","src":"8447:9:24"},"nodeType":"YulIf","src":"8444:60:24"},{"nodeType":"YulAssignment","src":"8517:32:24","value":{"arguments":[{"name":"rr","nodeType":"YulIdentifier","src":"8530:2:24"},{"arguments":[{"name":"v","nodeType":"YulIdentifier","src":"8538:1:24"},{"name":"r1","nodeType":"YulIdentifier","src":"8541:2:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8534:3:24"},"nodeType":"YulFunctionCall","src":"8534:10:24"},{"name":"pd","nodeType":"YulIdentifier","src":"8546:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"8523:6:24"},"nodeType":"YulFunctionCall","src":"8523:26:24"},"variableNames":[{"name":"r2","nodeType":"YulIdentifier","src":"8517:2:24"}]},{"body":{"nodeType":"YulBlock","src":"8579:49:24","statements":[{"nodeType":"YulAssignment","src":"8597:17:24","value":{"arguments":[{"name":"pd","nodeType":"YulIdentifier","src":"8607:2:24"},{"name":"r2","nodeType":"YulIdentifier","src":"8611:2:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8603:3:24"},"nodeType":"YulFunctionCall","src":"8603:11:24"},"variableNames":[{"name":"r2","nodeType":"YulIdentifier","src":"8597:2:24"}]}]},"condition":{"arguments":[{"name":"r2","nodeType":"YulIdentifier","src":"8569:2:24"},{"name":"s12j","nodeType":"YulIdentifier","src":"8573:4:24"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8566:2:24"},"nodeType":"YulFunctionCall","src":"8566:12:24"},"nodeType":"YulIf","src":"8563:65:24"},{"nodeType":"YulAssignment","src":"8641:19:24","value":{"arguments":[{"name":"r2","nodeType":"YulIdentifier","src":"8651:2:24"},{"name":"s12j","nodeType":"YulIdentifier","src":"8655:4:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8647:3:24"},"nodeType":"YulFunctionCall","src":"8647:13:24"},"variableNames":[{"name":"r2","nodeType":"YulIdentifier","src":"8641:2:24"}]},{"nodeType":"YulAssignment","src":"8718:30:24","value":{"arguments":[{"name":"z1z1","nodeType":"YulIdentifier","src":"8733:4:24"},{"name":"z2z2","nodeType":"YulIdentifier","src":"8739:4:24"},{"name":"pd","nodeType":"YulIdentifier","src":"8745:2:24"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"8726:6:24"},"nodeType":"YulFunctionCall","src":"8726:22:24"},"variableNames":[{"name":"z1z1","nodeType":"YulIdentifier","src":"8718:4:24"}]},{"nodeType":"YulAssignment","src":"8761:29:24","value":{"arguments":[{"name":"p3q3","nodeType":"YulIdentifier","src":"8775:4:24"},{"name":"p3q3","nodeType":"YulIdentifier","src":"8781:4:24"},{"name":"pd","nodeType":"YulIdentifier","src":"8787:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"8768:6:24"},"nodeType":"YulFunctionCall","src":"8768:22:24"},"variableNames":[{"name":"j2v","nodeType":"YulIdentifier","src":"8761:3:24"}]},{"body":{"nodeType":"YulBlock","src":"8820:51:24","statements":[{"nodeType":"YulAssignment","src":"8838:19:24","value":{"arguments":[{"name":"pd","nodeType":"YulIdentifier","src":"8849:2:24"},{"name":"j2v","nodeType":"YulIdentifier","src":"8853:3:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8845:3:24"},"nodeType":"YulFunctionCall","src":"8845:12:24"},"variableNames":[{"name":"j2v","nodeType":"YulIdentifier","src":"8838:3:24"}]}]},"condition":{"arguments":[{"name":"j2v","nodeType":"YulIdentifier","src":"8809:3:24"},{"name":"z1z1","nodeType":"YulIdentifier","src":"8814:4:24"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8806:2:24"},"nodeType":"YulFunctionCall","src":"8806:13:24"},"nodeType":"YulIf","src":"8803:68:24"},{"nodeType":"YulAssignment","src":"8884:35:24","value":{"arguments":[{"arguments":[{"name":"j2v","nodeType":"YulIdentifier","src":"8901:3:24"},{"name":"z1z1","nodeType":"YulIdentifier","src":"8906:4:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8897:3:24"},"nodeType":"YulFunctionCall","src":"8897:14:24"},{"name":"h","nodeType":"YulIdentifier","src":"8913:1:24"},{"name":"pd","nodeType":"YulIdentifier","src":"8916:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"8890:6:24"},"nodeType":"YulFunctionCall","src":"8890:29:24"},"variableNames":[{"name":"r3","nodeType":"YulIdentifier","src":"8884:2:24"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":5137,"isOffset":false,"isSlot":false,"src":"7326:2:24","valueSize":1},{"declaration":5139,"isOffset":false,"isSlot":false,"src":"7445:2:24","valueSize":1},{"declaration":5141,"isOffset":false,"isSlot":false,"src":"7211:2:24","valueSize":1},{"declaration":5141,"isOffset":false,"isSlot":false,"src":"7215:2:24","valueSize":1},{"declaration":5141,"isOffset":false,"isSlot":false,"src":"7540:2:24","valueSize":1},{"declaration":5141,"isOffset":false,"isSlot":false,"src":"7604:2:24","valueSize":1},{"declaration":5143,"isOffset":false,"isSlot":false,"src":"7385:2:24","valueSize":1},{"declaration":5145,"isOffset":false,"isSlot":false,"src":"7523:2:24","valueSize":1},{"declaration":5147,"isOffset":false,"isSlot":false,"src":"7269:2:24","valueSize":1},{"declaration":5147,"isOffset":false,"isSlot":false,"src":"7273:2:24","valueSize":1},{"declaration":5147,"isOffset":false,"isSlot":false,"src":"7462:2:24","valueSize":1},{"declaration":5147,"isOffset":false,"isSlot":false,"src":"7608:2:24","valueSize":1},{"declaration":5150,"isOffset":false,"isSlot":false,"src":"8065:2:24","valueSize":1},{"declaration":5150,"isOffset":false,"isSlot":false,"src":"8230:2:24","valueSize":1},{"declaration":5150,"isOffset":false,"isSlot":false,"src":"8257:2:24","valueSize":1},{"declaration":5150,"isOffset":false,"isSlot":false,"src":"8271:2:24","valueSize":1},{"declaration":5150,"isOffset":false,"isSlot":false,"src":"8315:2:24","valueSize":1},{"declaration":5150,"isOffset":false,"isSlot":false,"src":"8325:2:24","valueSize":1},{"declaration":5150,"isOffset":false,"isSlot":false,"src":"8453:2:24","valueSize":1},{"declaration":5150,"isOffset":false,"isSlot":false,"src":"8541:2:24","valueSize":1},{"declaration":5152,"isOffset":false,"isSlot":false,"src":"8517:2:24","valueSize":1},{"declaration":5152,"isOffset":false,"isSlot":false,"src":"8569:2:24","valueSize":1},{"declaration":5152,"isOffset":false,"isSlot":false,"src":"8597:2:24","valueSize":1},{"declaration":5152,"isOffset":false,"isSlot":false,"src":"8611:2:24","valueSize":1},{"declaration":5152,"isOffset":false,"isSlot":false,"src":"8641:2:24","valueSize":1},{"declaration":5152,"isOffset":false,"isSlot":false,"src":"8651:2:24","valueSize":1},{"declaration":5154,"isOffset":false,"isSlot":false,"src":"8884:2:24","valueSize":1}],"id":5200,"nodeType":"InlineAssembly","src":"7052:1877:24"},{"expression":{"components":[{"id":5201,"name":"r1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5150,"src":"8946:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5202,"name":"r2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5152,"src":"8950:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5203,"name":"r3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5154,"src":"8954:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5204,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8945:12:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256,uint256)"}},"functionReturnParameters":5155,"id":5205,"nodeType":"Return","src":"8938:19:24"}]},"id":5207,"implemented":true,"kind":"function","modifiers":[],"name":"_jAdd","nameLocation":"6620:5:24","nodeType":"FunctionDefinition","parameters":{"id":5148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5137,"mutability":"mutable","name":"p1","nameLocation":"6640:2:24","nodeType":"VariableDeclaration","scope":5207,"src":"6635:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5136,"name":"uint","nodeType":"ElementaryTypeName","src":"6635:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5139,"mutability":"mutable","name":"p2","nameLocation":"6657:2:24","nodeType":"VariableDeclaration","scope":5207,"src":"6652:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5138,"name":"uint","nodeType":"ElementaryTypeName","src":"6652:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5141,"mutability":"mutable","name":"p3","nameLocation":"6674:2:24","nodeType":"VariableDeclaration","scope":5207,"src":"6669:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5140,"name":"uint","nodeType":"ElementaryTypeName","src":"6669:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5143,"mutability":"mutable","name":"q1","nameLocation":"6691:2:24","nodeType":"VariableDeclaration","scope":5207,"src":"6686:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5142,"name":"uint","nodeType":"ElementaryTypeName","src":"6686:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5145,"mutability":"mutable","name":"q2","nameLocation":"6708:2:24","nodeType":"VariableDeclaration","scope":5207,"src":"6703:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5144,"name":"uint","nodeType":"ElementaryTypeName","src":"6703:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5147,"mutability":"mutable","name":"q3","nameLocation":"6725:2:24","nodeType":"VariableDeclaration","scope":5207,"src":"6720:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5146,"name":"uint","nodeType":"ElementaryTypeName","src":"6720:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6625:108:24"},"returnParameters":{"id":5155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5150,"mutability":"mutable","name":"r1","nameLocation":"6762:2:24","nodeType":"VariableDeclaration","scope":5207,"src":"6757:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5149,"name":"uint","nodeType":"ElementaryTypeName","src":"6757:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5152,"mutability":"mutable","name":"r2","nameLocation":"6771:2:24","nodeType":"VariableDeclaration","scope":5207,"src":"6766:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5151,"name":"uint","nodeType":"ElementaryTypeName","src":"6766:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5154,"mutability":"mutable","name":"r3","nameLocation":"6780:2:24","nodeType":"VariableDeclaration","scope":5207,"src":"6775:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5153,"name":"uint","nodeType":"ElementaryTypeName","src":"6775:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6756:27:24"},"scope":5260,"src":"6611:2353:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5223,"nodeType":"Block","src":"9253:1070:24","statements":[{"AST":{"nodeType":"YulBlock","src":"9272:1045:24","statements":[{"nodeType":"YulVariableDeclaration","src":"9286:104:24","value":{"kind":"number","nodeType":"YulLiteral","src":"9324:66:24","type":"","value":"0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF"},"variables":[{"name":"pd","nodeType":"YulTypedName","src":"9306:2:24","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9403:26:24","value":{"arguments":[{"name":"z","nodeType":"YulIdentifier","src":"9420:1:24"},{"name":"z","nodeType":"YulIdentifier","src":"9423:1:24"},{"name":"pd","nodeType":"YulIdentifier","src":"9426:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"9413:6:24"},"nodeType":"YulFunctionCall","src":"9413:16:24"},"variables":[{"name":"z2","nodeType":"YulTypedName","src":"9407:2:24","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9442:171:24","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9477:66:24","type":"","value":"0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC"},{"arguments":[{"name":"z2","nodeType":"YulIdentifier","src":"9568:2:24"},{"name":"z2","nodeType":"YulIdentifier","src":"9572:2:24"},{"name":"pd","nodeType":"YulIdentifier","src":"9576:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"9561:6:24"},"nodeType":"YulFunctionCall","src":"9561:18:24"},{"name":"pd","nodeType":"YulIdentifier","src":"9597:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"9453:6:24"},"nodeType":"YulFunctionCall","src":"9453:160:24"},"variables":[{"name":"az4","nodeType":"YulTypedName","src":"9446:3:24","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9626:26:24","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"9643:1:24"},{"name":"y","nodeType":"YulIdentifier","src":"9646:1:24"},{"name":"pd","nodeType":"YulIdentifier","src":"9649:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"9636:6:24"},"nodeType":"YulFunctionCall","src":"9636:16:24"},"variables":[{"name":"y2","nodeType":"YulTypedName","src":"9630:2:24","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9665:44:24","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9681:4:24","type":"","value":"0x04"},{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9694:1:24"},{"name":"y2","nodeType":"YulIdentifier","src":"9697:2:24"},{"name":"pd","nodeType":"YulIdentifier","src":"9701:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"9687:6:24"},"nodeType":"YulFunctionCall","src":"9687:17:24"},{"name":"pd","nodeType":"YulIdentifier","src":"9706:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"9674:6:24"},"nodeType":"YulFunctionCall","src":"9674:35:24"},"variables":[{"name":"s","nodeType":"YulTypedName","src":"9669:1:24","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9722:45:24","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9738:4:24","type":"","value":"0x08"},{"arguments":[{"name":"y2","nodeType":"YulIdentifier","src":"9751:2:24"},{"name":"y2","nodeType":"YulIdentifier","src":"9755:2:24"},{"name":"pd","nodeType":"YulIdentifier","src":"9759:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"9744:6:24"},"nodeType":"YulFunctionCall","src":"9744:18:24"},{"name":"pd","nodeType":"YulIdentifier","src":"9764:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"9731:6:24"},"nodeType":"YulFunctionCall","src":"9731:36:24"},"variables":[{"name":"u","nodeType":"YulTypedName","src":"9726:1:24","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9780:60:24","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9803:4:24","type":"","value":"0x03"},{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9816:1:24"},{"name":"x","nodeType":"YulIdentifier","src":"9819:1:24"},{"name":"pd","nodeType":"YulIdentifier","src":"9822:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"9809:6:24"},"nodeType":"YulFunctionCall","src":"9809:16:24"},{"name":"pd","nodeType":"YulIdentifier","src":"9827:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"9796:6:24"},"nodeType":"YulFunctionCall","src":"9796:34:24"},{"name":"az4","nodeType":"YulIdentifier","src":"9832:3:24"},{"name":"pd","nodeType":"YulIdentifier","src":"9837:2:24"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"9789:6:24"},"nodeType":"YulFunctionCall","src":"9789:51:24"},"variables":[{"name":"m","nodeType":"YulTypedName","src":"9784:1:24","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9853:31:24","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9872:4:24","type":"","value":"0x02"},{"name":"s","nodeType":"YulIdentifier","src":"9878:1:24"},{"name":"pd","nodeType":"YulIdentifier","src":"9881:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"9865:6:24"},"nodeType":"YulFunctionCall","src":"9865:19:24"},"variables":[{"name":"twos","nodeType":"YulTypedName","src":"9857:4:24","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9897:26:24","value":{"arguments":[{"name":"m","nodeType":"YulIdentifier","src":"9914:1:24"},{"name":"m","nodeType":"YulIdentifier","src":"9917:1:24"},{"name":"pd","nodeType":"YulIdentifier","src":"9920:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"9907:6:24"},"nodeType":"YulFunctionCall","src":"9907:16:24"},"variables":[{"name":"m2","nodeType":"YulTypedName","src":"9901:2:24","type":""}]},{"body":{"nodeType":"YulBlock","src":"9952:49:24","statements":[{"nodeType":"YulAssignment","src":"9970:17:24","value":{"arguments":[{"name":"pd","nodeType":"YulIdentifier","src":"9980:2:24"},{"name":"m2","nodeType":"YulIdentifier","src":"9984:2:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9976:3:24"},"nodeType":"YulFunctionCall","src":"9976:11:24"},"variableNames":[{"name":"m2","nodeType":"YulIdentifier","src":"9970:2:24"}]}]},"condition":{"arguments":[{"name":"m2","nodeType":"YulIdentifier","src":"9942:2:24"},{"name":"twos","nodeType":"YulIdentifier","src":"9946:4:24"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9939:2:24"},"nodeType":"YulFunctionCall","src":"9939:12:24"},"nodeType":"YulIf","src":"9936:65:24"},{"nodeType":"YulAssignment","src":"10014:19:24","value":{"arguments":[{"name":"m2","nodeType":"YulIdentifier","src":"10024:2:24"},{"name":"twos","nodeType":"YulIdentifier","src":"10028:4:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10020:3:24"},"nodeType":"YulFunctionCall","src":"10020:13:24"},"variableNames":[{"name":"x3","nodeType":"YulIdentifier","src":"10014:2:24"}]},{"body":{"nodeType":"YulBlock","src":"10059:47:24","statements":[{"nodeType":"YulAssignment","src":"10077:15:24","value":{"arguments":[{"name":"pd","nodeType":"YulIdentifier","src":"10086:2:24"},{"name":"s","nodeType":"YulIdentifier","src":"10090:1:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10082:3:24"},"nodeType":"YulFunctionCall","src":"10082:10:24"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"10077:1:24"}]}]},"condition":{"arguments":[{"name":"s","nodeType":"YulIdentifier","src":"10052:1:24"},{"name":"x3","nodeType":"YulIdentifier","src":"10055:2:24"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10049:2:24"},"nodeType":"YulFunctionCall","src":"10049:9:24"},"nodeType":"YulIf","src":"10046:60:24"},{"nodeType":"YulAssignment","src":"10119:31:24","value":{"arguments":[{"name":"m","nodeType":"YulIdentifier","src":"10132:1:24"},{"arguments":[{"name":"s","nodeType":"YulIdentifier","src":"10139:1:24"},{"name":"x3","nodeType":"YulIdentifier","src":"10142:2:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10135:3:24"},"nodeType":"YulFunctionCall","src":"10135:10:24"},{"name":"pd","nodeType":"YulIdentifier","src":"10147:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"10125:6:24"},"nodeType":"YulFunctionCall","src":"10125:25:24"},"variableNames":[{"name":"y3","nodeType":"YulIdentifier","src":"10119:2:24"}]},{"body":{"nodeType":"YulBlock","src":"10176:49:24","statements":[{"nodeType":"YulAssignment","src":"10194:17:24","value":{"arguments":[{"name":"pd","nodeType":"YulIdentifier","src":"10204:2:24"},{"name":"y3","nodeType":"YulIdentifier","src":"10208:2:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10200:3:24"},"nodeType":"YulFunctionCall","src":"10200:11:24"},"variableNames":[{"name":"y3","nodeType":"YulIdentifier","src":"10194:2:24"}]}]},"condition":{"arguments":[{"name":"y3","nodeType":"YulIdentifier","src":"10169:2:24"},{"name":"u","nodeType":"YulIdentifier","src":"10173:1:24"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10166:2:24"},"nodeType":"YulFunctionCall","src":"10166:9:24"},"nodeType":"YulIf","src":"10163:62:24"},{"nodeType":"YulAssignment","src":"10238:16:24","value":{"arguments":[{"name":"y3","nodeType":"YulIdentifier","src":"10248:2:24"},{"name":"u","nodeType":"YulIdentifier","src":"10252:1:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10244:3:24"},"nodeType":"YulFunctionCall","src":"10244:10:24"},"variableNames":[{"name":"y3","nodeType":"YulIdentifier","src":"10238:2:24"}]},{"nodeType":"YulAssignment","src":"10267:40:24","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10280:4:24","type":"","value":"0x02"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"10293:1:24"},{"name":"z","nodeType":"YulIdentifier","src":"10296:1:24"},{"name":"pd","nodeType":"YulIdentifier","src":"10299:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"10286:6:24"},"nodeType":"YulFunctionCall","src":"10286:16:24"},{"name":"pd","nodeType":"YulIdentifier","src":"10304:2:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"10273:6:24"},"nodeType":"YulFunctionCall","src":"10273:34:24"},"variableNames":[{"name":"z3","nodeType":"YulIdentifier","src":"10267:2:24"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":5209,"isOffset":false,"isSlot":false,"src":"9694:1:24","valueSize":1},{"declaration":5209,"isOffset":false,"isSlot":false,"src":"9816:1:24","valueSize":1},{"declaration":5209,"isOffset":false,"isSlot":false,"src":"9819:1:24","valueSize":1},{"declaration":5216,"isOffset":false,"isSlot":false,"src":"10014:2:24","valueSize":1},{"declaration":5216,"isOffset":false,"isSlot":false,"src":"10055:2:24","valueSize":1},{"declaration":5216,"isOffset":false,"isSlot":false,"src":"10142:2:24","valueSize":1},{"declaration":5211,"isOffset":false,"isSlot":false,"src":"10293:1:24","valueSize":1},{"declaration":5211,"isOffset":false,"isSlot":false,"src":"9643:1:24","valueSize":1},{"declaration":5211,"isOffset":false,"isSlot":false,"src":"9646:1:24","valueSize":1},{"declaration":5218,"isOffset":false,"isSlot":false,"src":"10119:2:24","valueSize":1},{"declaration":5218,"isOffset":false,"isSlot":false,"src":"10169:2:24","valueSize":1},{"declaration":5218,"isOffset":false,"isSlot":false,"src":"10194:2:24","valueSize":1},{"declaration":5218,"isOffset":false,"isSlot":false,"src":"10208:2:24","valueSize":1},{"declaration":5218,"isOffset":false,"isSlot":false,"src":"10238:2:24","valueSize":1},{"declaration":5218,"isOffset":false,"isSlot":false,"src":"10248:2:24","valueSize":1},{"declaration":5213,"isOffset":false,"isSlot":false,"src":"10296:1:24","valueSize":1},{"declaration":5213,"isOffset":false,"isSlot":false,"src":"9420:1:24","valueSize":1},{"declaration":5213,"isOffset":false,"isSlot":false,"src":"9423:1:24","valueSize":1},{"declaration":5220,"isOffset":false,"isSlot":false,"src":"10267:2:24","valueSize":1}],"id":5222,"nodeType":"InlineAssembly","src":"9263:1054:24"}]},"id":5224,"implemented":true,"kind":"function","modifiers":[],"name":"_modifiedJacobianDouble","nameLocation":"9125:23:24","nodeType":"FunctionDefinition","parameters":{"id":5214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5209,"mutability":"mutable","name":"x","nameLocation":"9163:1:24","nodeType":"VariableDeclaration","scope":5224,"src":"9158:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5208,"name":"uint","nodeType":"ElementaryTypeName","src":"9158:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5211,"mutability":"mutable","name":"y","nameLocation":"9179:1:24","nodeType":"VariableDeclaration","scope":5224,"src":"9174:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5210,"name":"uint","nodeType":"ElementaryTypeName","src":"9174:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5213,"mutability":"mutable","name":"z","nameLocation":"9195:1:24","nodeType":"VariableDeclaration","scope":5224,"src":"9190:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5212,"name":"uint","nodeType":"ElementaryTypeName","src":"9190:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9148:54:24"},"returnParameters":{"id":5221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5216,"mutability":"mutable","name":"x3","nameLocation":"9231:2:24","nodeType":"VariableDeclaration","scope":5224,"src":"9226:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5215,"name":"uint","nodeType":"ElementaryTypeName","src":"9226:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5218,"mutability":"mutable","name":"y3","nameLocation":"9240:2:24","nodeType":"VariableDeclaration","scope":5224,"src":"9235:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5217,"name":"uint","nodeType":"ElementaryTypeName","src":"9235:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5220,"mutability":"mutable","name":"z3","nameLocation":"9249:2:24","nodeType":"VariableDeclaration","scope":5224,"src":"9244:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5219,"name":"uint","nodeType":"ElementaryTypeName","src":"9244:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9225:27:24"},"scope":5260,"src":"9116:1207:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5245,"nodeType":"Block","src":"10608:66:24","statements":[{"expression":{"id":5241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5233,"name":"ret","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5231,"src":"10618:3:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5235,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5226,"src":"10631:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5236,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5228,"src":"10638:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"32","id":5237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10642:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10638:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5239,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5228,"src":"10645:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5234,"name":"modexp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5259,"src":"10624:6:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) view returns (uint256)"}},"id":5240,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10624:23:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10618:29:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5242,"nodeType":"ExpressionStatement","src":"10618:29:24"},{"expression":{"id":5243,"name":"ret","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5231,"src":"10664:3:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5232,"id":5244,"nodeType":"Return","src":"10657:10:24"}]},"id":5246,"implemented":true,"kind":"function","modifiers":[],"name":"_primemod","nameLocation":"10545:9:24","nodeType":"FunctionDefinition","parameters":{"id":5229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5226,"mutability":"mutable","name":"value","nameLocation":"10560:5:24","nodeType":"VariableDeclaration","scope":5246,"src":"10555:10:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5225,"name":"uint","nodeType":"ElementaryTypeName","src":"10555:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5228,"mutability":"mutable","name":"p","nameLocation":"10572:1:24","nodeType":"VariableDeclaration","scope":5246,"src":"10567:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5227,"name":"uint","nodeType":"ElementaryTypeName","src":"10567:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10554:20:24"},"returnParameters":{"id":5232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5231,"mutability":"mutable","name":"ret","nameLocation":"10603:3:24","nodeType":"VariableDeclaration","scope":5246,"src":"10598:8:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5230,"name":"uint","nodeType":"ElementaryTypeName","src":"10598:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10597:10:24"},"scope":5260,"src":"10536:138:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5258,"nodeType":"Block","src":"10914:778:24","statements":[{"AST":{"nodeType":"YulBlock","src":"10974:712:24","statements":[{"body":{"nodeType":"YulBlock","src":"11007:57:24","statements":[{"nodeType":"YulAssignment","src":"11025:25:24","value":{"arguments":[{"name":"_base","nodeType":"YulIdentifier","src":"11038:5:24"},{"name":"_mod","nodeType":"YulIdentifier","src":"11045:4:24"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"11034:3:24"},"nodeType":"YulFunctionCall","src":"11034:16:24"},"variableNames":[{"name":"_base","nodeType":"YulIdentifier","src":"11025:5:24"}]}]},"condition":{"arguments":[{"name":"_base","nodeType":"YulIdentifier","src":"10994:5:24"},{"name":"_mod","nodeType":"YulIdentifier","src":"11001:4:24"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10991:2:24"},"nodeType":"YulFunctionCall","src":"10991:15:24"},"nodeType":"YulIf","src":"10988:76:24"},{"nodeType":"YulVariableDeclaration","src":"11137:26:24","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11158:4:24","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11152:5:24"},"nodeType":"YulFunctionCall","src":"11152:11:24"},"variables":[{"name":"freemem","nodeType":"YulTypedName","src":"11141:7:24","type":""}]},{"expression":{"arguments":[{"name":"freemem","nodeType":"YulIdentifier","src":"11184:7:24"},{"kind":"number","nodeType":"YulLiteral","src":"11193:4:24","type":"","value":"0x20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11177:6:24"},"nodeType":"YulFunctionCall","src":"11177:21:24"},"nodeType":"YulExpressionStatement","src":"11177:21:24"},{"expression":{"arguments":[{"arguments":[{"name":"freemem","nodeType":"YulIdentifier","src":"11222:7:24"},{"kind":"number","nodeType":"YulLiteral","src":"11231:4:24","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11218:3:24"},"nodeType":"YulFunctionCall","src":"11218:18:24"},{"kind":"number","nodeType":"YulLiteral","src":"11238:4:24","type":"","value":"0x20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11211:6:24"},"nodeType":"YulFunctionCall","src":"11211:32:24"},"nodeType":"YulExpressionStatement","src":"11211:32:24"},{"expression":{"arguments":[{"arguments":[{"name":"freemem","nodeType":"YulIdentifier","src":"11267:7:24"},{"kind":"number","nodeType":"YulLiteral","src":"11276:4:24","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11263:3:24"},"nodeType":"YulFunctionCall","src":"11263:18:24"},{"kind":"number","nodeType":"YulLiteral","src":"11283:4:24","type":"","value":"0x20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11256:6:24"},"nodeType":"YulFunctionCall","src":"11256:32:24"},"nodeType":"YulExpressionStatement","src":"11256:32:24"},{"expression":{"arguments":[{"arguments":[{"name":"freemem","nodeType":"YulIdentifier","src":"11313:7:24"},{"kind":"number","nodeType":"YulLiteral","src":"11322:4:24","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11309:3:24"},"nodeType":"YulFunctionCall","src":"11309:18:24"},{"name":"_base","nodeType":"YulIdentifier","src":"11329:5:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11302:6:24"},"nodeType":"YulFunctionCall","src":"11302:33:24"},"nodeType":"YulExpressionStatement","src":"11302:33:24"},{"expression":{"arguments":[{"arguments":[{"name":"freemem","nodeType":"YulIdentifier","src":"11359:7:24"},{"kind":"number","nodeType":"YulLiteral","src":"11368:4:24","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11355:3:24"},"nodeType":"YulFunctionCall","src":"11355:18:24"},{"name":"_exp","nodeType":"YulIdentifier","src":"11375:4:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11348:6:24"},"nodeType":"YulFunctionCall","src":"11348:32:24"},"nodeType":"YulExpressionStatement","src":"11348:32:24"},{"expression":{"arguments":[{"arguments":[{"name":"freemem","nodeType":"YulIdentifier","src":"11404:7:24"},{"kind":"number","nodeType":"YulLiteral","src":"11413:4:24","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11400:3:24"},"nodeType":"YulFunctionCall","src":"11400:18:24"},{"name":"_mod","nodeType":"YulIdentifier","src":"11420:4:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11393:6:24"},"nodeType":"YulFunctionCall","src":"11393:32:24"},"nodeType":"YulExpressionStatement","src":"11393:32:24"},{"nodeType":"YulVariableDeclaration","src":"11439:68:24","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11469:1:24","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11465:3:24"},"nodeType":"YulFunctionCall","src":"11465:6:24"},{"kind":"number","nodeType":"YulLiteral","src":"11473:3:24","type":"","value":"0x5"},{"name":"freemem","nodeType":"YulIdentifier","src":"11478:7:24"},{"kind":"number","nodeType":"YulLiteral","src":"11487:4:24","type":"","value":"0xc0"},{"name":"freemem","nodeType":"YulIdentifier","src":"11493:7:24"},{"kind":"number","nodeType":"YulLiteral","src":"11502:4:24","type":"","value":"0x20"}],"functionName":{"name":"staticcall","nodeType":"YulIdentifier","src":"11454:10:24"},"nodeType":"YulFunctionCall","src":"11454:53:24"},"variables":[{"name":"success","nodeType":"YulTypedName","src":"11443:7:24","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"11554:48:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11579:3:24","type":"","value":"0x0"},{"kind":"number","nodeType":"YulLiteral","src":"11584:3:24","type":"","value":"0x0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11572:6:24"},"nodeType":"YulFunctionCall","src":"11572:16:24"},"nodeType":"YulExpressionStatement","src":"11572:16:24"}]},"nodeType":"YulCase","src":"11547:55:24","value":{"kind":"number","nodeType":"YulLiteral","src":"11552:1:24","type":"","value":"0"}},{"body":{"nodeType":"YulBlock","src":"11623:53:24","statements":[{"nodeType":"YulAssignment","src":"11641:21:24","value":{"arguments":[{"name":"freemem","nodeType":"YulIdentifier","src":"11654:7:24"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11648:5:24"},"nodeType":"YulFunctionCall","src":"11648:14:24"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"11641:3:24"}]}]},"nodeType":"YulCase","src":"11615:61:24","value":"default"}],"expression":{"name":"success","nodeType":"YulIdentifier","src":"11527:7:24"},"nodeType":"YulSwitch","src":"11520:156:24"}]},"evmVersion":"paris","externalReferences":[{"declaration":5248,"isOffset":false,"isSlot":false,"src":"10994:5:24","valueSize":1},{"declaration":5248,"isOffset":false,"isSlot":false,"src":"11025:5:24","valueSize":1},{"declaration":5248,"isOffset":false,"isSlot":false,"src":"11038:5:24","valueSize":1},{"declaration":5248,"isOffset":false,"isSlot":false,"src":"11329:5:24","valueSize":1},{"declaration":5250,"isOffset":false,"isSlot":false,"src":"11375:4:24","valueSize":1},{"declaration":5252,"isOffset":false,"isSlot":false,"src":"11001:4:24","valueSize":1},{"declaration":5252,"isOffset":false,"isSlot":false,"src":"11045:4:24","valueSize":1},{"declaration":5252,"isOffset":false,"isSlot":false,"src":"11420:4:24","valueSize":1},{"declaration":5255,"isOffset":false,"isSlot":false,"src":"11641:3:24","valueSize":1}],"id":5257,"nodeType":"InlineAssembly","src":"10965:721:24"}]},"id":5259,"implemented":true,"kind":"function","modifiers":[],"name":"modexp","nameLocation":"10810:6:24","nodeType":"FunctionDefinition","parameters":{"id":5253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5248,"mutability":"mutable","name":"_base","nameLocation":"10831:5:24","nodeType":"VariableDeclaration","scope":5259,"src":"10826:10:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5247,"name":"uint","nodeType":"ElementaryTypeName","src":"10826:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5250,"mutability":"mutable","name":"_exp","nameLocation":"10851:4:24","nodeType":"VariableDeclaration","scope":5259,"src":"10846:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5249,"name":"uint","nodeType":"ElementaryTypeName","src":"10846:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5252,"mutability":"mutable","name":"_mod","nameLocation":"10870:4:24","nodeType":"VariableDeclaration","scope":5259,"src":"10865:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5251,"name":"uint","nodeType":"ElementaryTypeName","src":"10865:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10816:64:24"},"returnParameters":{"id":5256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5255,"mutability":"mutable","name":"ret","nameLocation":"10909:3:24","nodeType":"VariableDeclaration","scope":5259,"src":"10904:8:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5254,"name":"uint","nodeType":"ElementaryTypeName","src":"10904:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10903:10:24"},"scope":5260,"src":"10801:891:24","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":5261,"src":"571:11123:24","usedErrors":[]}],"src":"36:11659:24"},"id":24},"contracts/aa/utils/UserOp.sol":{"ast":{"absolutePath":"contracts/aa/utils/UserOp.sol","exportedSymbols":{"UserOp":[5271],"UserOpLib":[5332]},"id":5333,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":5262,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"36:23:25"},{"canonicalName":"UserOp","id":5271,"members":[{"constant":false,"id":5264,"mutability":"mutable","name":"functionType","nameLocation":"133:12:25","nodeType":"VariableDeclaration","scope":5271,"src":"125:20:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5263,"name":"uint256","nodeType":"ElementaryTypeName","src":"125:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5266,"mutability":"mutable","name":"argument","nameLocation":"157:8:25","nodeType":"VariableDeclaration","scope":5271,"src":"151:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":5265,"name":"bytes","nodeType":"ElementaryTypeName","src":"151:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5268,"mutability":"mutable","name":"nonce","nameLocation":"179:5:25","nodeType":"VariableDeclaration","scope":5271,"src":"171:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5267,"name":"uint256","nodeType":"ElementaryTypeName","src":"171:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5270,"mutability":"mutable","name":"signature","nameLocation":"196:9:25","nodeType":"VariableDeclaration","scope":5271,"src":"190:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":5269,"name":"bytes","nodeType":"ElementaryTypeName","src":"190:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"UserOp","nameLocation":"112:6:25","nodeType":"StructDefinition","scope":5333,"src":"105:103:25","visibility":"public"},{"abstract":false,"baseContracts":[],"canonicalName":"UserOpLib","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":5332,"linearizedBaseContracts":[5332],"name":"UserOpLib","nameLocation":"218:9:25","nodeType":"ContractDefinition","nodes":[{"body":{"id":5304,"nodeType":"Block","src":"451:226:25","statements":[{"assignments":[5281],"declarations":[{"constant":false,"id":5281,"mutability":"mutable","name":"functionType","nameLocation":"469:12:25","nodeType":"VariableDeclaration","scope":5304,"src":"461:20:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5280,"name":"uint256","nodeType":"ElementaryTypeName","src":"461:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5284,"initialValue":{"expression":{"id":5282,"name":"userop","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5275,"src":"484:6:25","typeDescriptions":{"typeIdentifier":"t_struct$_UserOp_$5271_calldata_ptr","typeString":"struct UserOp calldata"}},"id":5283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"491:12:25","memberName":"functionType","nodeType":"MemberAccess","referencedDeclaration":5264,"src":"484:19:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"461:42:25"},{"assignments":[5286],"declarations":[{"constant":false,"id":5286,"mutability":"mutable","name":"hashArguments","nameLocation":"521:13:25","nodeType":"VariableDeclaration","scope":5304,"src":"513:21:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5285,"name":"bytes32","nodeType":"ElementaryTypeName","src":"513:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":5291,"initialValue":{"arguments":[{"expression":{"id":5288,"name":"userop","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5275,"src":"552:6:25","typeDescriptions":{"typeIdentifier":"t_struct$_UserOp_$5271_calldata_ptr","typeString":"struct UserOp calldata"}},"id":5289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"559:8:25","memberName":"argument","nodeType":"MemberAccess","referencedDeclaration":5266,"src":"552:15:25","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":5287,"name":"calldataKeccak","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5331,"src":"537:14:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_calldata_ptr_$returns$_t_bytes32_$","typeString":"function (bytes calldata) pure returns (bytes32)"}},"id":5290,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"537:31:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"513:55:25"},{"assignments":[5293],"declarations":[{"constant":false,"id":5293,"mutability":"mutable","name":"nonce","nameLocation":"586:5:25","nodeType":"VariableDeclaration","scope":5304,"src":"578:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5292,"name":"uint256","nodeType":"ElementaryTypeName","src":"578:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5296,"initialValue":{"expression":{"id":5294,"name":"userop","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5275,"src":"594:6:25","typeDescriptions":{"typeIdentifier":"t_struct$_UserOp_$5271_calldata_ptr","typeString":"struct UserOp calldata"}},"id":5295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"601:5:25","memberName":"nonce","nodeType":"MemberAccess","referencedDeclaration":5268,"src":"594:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"578:28:25"},{"expression":{"arguments":[{"id":5299,"name":"functionType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5281,"src":"635:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5300,"name":"hashArguments","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5286,"src":"649:13:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5301,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5293,"src":"664:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5297,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"624:3:25","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5298,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"628:6:25","memberName":"encode","nodeType":"MemberAccess","src":"624:10:25","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"624:46:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5279,"id":5303,"nodeType":"Return","src":"617:53:25"}]},"documentation":{"id":5272,"nodeType":"StructuredDocumentation","src":"234:119:25","text":" Pack the user operation data into bytes for hashing.\n @param userop - The user operation data."},"id":5305,"implemented":true,"kind":"function","modifiers":[],"name":"pack","nameLocation":"367:4:25","nodeType":"FunctionDefinition","parameters":{"id":5276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5275,"mutability":"mutable","name":"userop","nameLocation":"397:6:25","nodeType":"VariableDeclaration","scope":5305,"src":"381:22:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOp_$5271_calldata_ptr","typeString":"struct UserOp"},"typeName":{"id":5274,"nodeType":"UserDefinedTypeName","pathNode":{"id":5273,"name":"UserOp","nameLocations":["381:6:25"],"nodeType":"IdentifierPath","referencedDeclaration":5271,"src":"381:6:25"},"referencedDeclaration":5271,"src":"381:6:25","typeDescriptions":{"typeIdentifier":"t_struct$_UserOp_$5271_storage_ptr","typeString":"struct UserOp"}},"visibility":"internal"}],"src":"371:38:25"},"returnParameters":{"id":5279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5278,"mutability":"mutable","name":"ret","nameLocation":"446:3:25","nodeType":"VariableDeclaration","scope":5305,"src":"433:16:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5277,"name":"bytes","nodeType":"ElementaryTypeName","src":"433:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"432:18:25"},"scope":5332,"src":"358:319:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5320,"nodeType":"Block","src":"854:47:25","statements":[{"expression":{"arguments":[{"arguments":[{"id":5316,"name":"userop","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5309,"src":"886:6:25","typeDescriptions":{"typeIdentifier":"t_struct$_UserOp_$5271_calldata_ptr","typeString":"struct UserOp calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_UserOp_$5271_calldata_ptr","typeString":"struct UserOp calldata"}],"id":5315,"name":"pack","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5305,"src":"881:4:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_UserOp_$5271_calldata_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (struct UserOp calldata) pure returns (bytes memory)"}},"id":5317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"881:12:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5314,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"871:9:25","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5318,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"871:23:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":5313,"id":5319,"nodeType":"Return","src":"864:30:25"}]},"documentation":{"id":5306,"nodeType":"StructuredDocumentation","src":"683:96:25","text":" Hash the user operation data.\n @param userop - The user operation data."},"id":5321,"implemented":true,"kind":"function","modifiers":[],"name":"hash","nameLocation":"793:4:25","nodeType":"FunctionDefinition","parameters":{"id":5310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5309,"mutability":"mutable","name":"userop","nameLocation":"814:6:25","nodeType":"VariableDeclaration","scope":5321,"src":"798:22:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOp_$5271_calldata_ptr","typeString":"struct UserOp"},"typeName":{"id":5308,"nodeType":"UserDefinedTypeName","pathNode":{"id":5307,"name":"UserOp","nameLocations":["798:6:25"],"nodeType":"IdentifierPath","referencedDeclaration":5271,"src":"798:6:25"},"referencedDeclaration":5271,"src":"798:6:25","typeDescriptions":{"typeIdentifier":"t_struct$_UserOp_$5271_storage_ptr","typeString":"struct UserOp"}},"visibility":"internal"}],"src":"797:24:25"},"returnParameters":{"id":5313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5312,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5321,"src":"845:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5311,"name":"bytes32","nodeType":"ElementaryTypeName","src":"845:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"844:9:25"},"scope":5332,"src":"784:117:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5330,"nodeType":"Block","src":"1193:193:25","statements":[{"AST":{"nodeType":"YulBlock","src":"1212:168:25","statements":[{"nodeType":"YulVariableDeclaration","src":"1226:22:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1243:4:25","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1237:5:25"},"nodeType":"YulFunctionCall","src":"1237:11:25"},"variables":[{"name":"mem","nodeType":"YulTypedName","src":"1230:3:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1261:22:25","value":{"name":"data.length","nodeType":"YulIdentifier","src":"1272:11:25"},"variables":[{"name":"len","nodeType":"YulTypedName","src":"1265:3:25","type":""}]},{"expression":{"arguments":[{"name":"mem","nodeType":"YulIdentifier","src":"1309:3:25"},{"name":"data.offset","nodeType":"YulIdentifier","src":"1314:11:25"},{"name":"len","nodeType":"YulIdentifier","src":"1327:3:25"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"1296:12:25"},"nodeType":"YulFunctionCall","src":"1296:35:25"},"nodeType":"YulExpressionStatement","src":"1296:35:25"},{"nodeType":"YulAssignment","src":"1344:26:25","value":{"arguments":[{"name":"mem","nodeType":"YulIdentifier","src":"1361:3:25"},{"name":"len","nodeType":"YulIdentifier","src":"1366:3:25"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"1351:9:25"},"nodeType":"YulFunctionCall","src":"1351:19:25"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"1344:3:25"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":5324,"isOffset":false,"isSlot":false,"src":"1272:11:25","suffix":"length","valueSize":1},{"declaration":5324,"isOffset":true,"isSlot":false,"src":"1314:11:25","suffix":"offset","valueSize":1},{"declaration":5327,"isOffset":false,"isSlot":false,"src":"1344:3:25","valueSize":1}],"id":5329,"nodeType":"InlineAssembly","src":"1203:177:25"}]},"documentation":{"id":5322,"nodeType":"StructuredDocumentation","src":"907:188:25","text":" keccak function over calldata.\n @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it."},"functionSelector":"1d434585","id":5331,"implemented":true,"kind":"function","modifiers":[],"name":"calldataKeccak","nameLocation":"1109:14:25","nodeType":"FunctionDefinition","parameters":{"id":5325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5324,"mutability":"mutable","name":"data","nameLocation":"1148:4:25","nodeType":"VariableDeclaration","scope":5331,"src":"1133:19:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5323,"name":"bytes","nodeType":"ElementaryTypeName","src":"1133:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1123:35:25"},"returnParameters":{"id":5328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5327,"mutability":"mutable","name":"ret","nameLocation":"1188:3:25","nodeType":"VariableDeclaration","scope":5331,"src":"1180:11:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5326,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1180:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1179:13:25"},"scope":5332,"src":"1100:286:25","stateMutability":"pure","virtual":false,"visibility":"public"}],"scope":5333,"src":"210:1178:25","usedErrors":[]}],"src":"36:1353:25"},"id":25}},"contracts":{"@openzeppelin/contracts/interfaces/IERC1967.sol":{"IERC1967":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"}],"devdoc":{"details":"ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.8.3._","events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is changed."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.8.3._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC1967.sol\":\"IERC1967\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/draft-IERC1822.sol":{"IERC1822Proxiable":{"abi":[{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.","kind":"dev","methods":{"proxiableUUID()":{"details":"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"proxiableUUID()":"52d1902d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":\"IERC1822Proxiable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol":{"ERC1967Proxy":{"abi":[{"inputs":[{"internalType":"address","name":"_logic","type":"address"},{"internalType":"bytes","name":"_data","type":"bytes"}],"stateMutability":"payable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"stateMutability":"payable","type":"fallback"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"details":"This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an implementation address that can be changed. This address is stored in storage in the location specified by https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the implementation behind the proxy.","events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is changed."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{"constructor":{"details":"Initializes the upgradeable proxy with an initial implementation specified by `_logic`. If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity constructor."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"allocate_memory":{"entryPoint":536,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_bytes":{"entryPoint":595,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":622,"id":null,"parameterSlots":3,"returnSlots":0},"fun_verifyCallResultFromTarget":{"entryPoint":657,"id":1577,"parameterSlots":4,"returnSlots":1}},"generatedSources":[],"linkReferences":{},"object":"604060808152610403908138038061001681610218565b93843982019181818403126102135780516001600160a01b038116808203610213576020838101516001600160401b0394919391858211610213570186601f820112156102135780519061007161006c83610253565b610218565b918083528583019886828401011161021357888661008f930161026e565b813b156101b9577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b031916841790556000927fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8480a28051158015906101b2575b61010b575b855160be90816103458239f35b855194606086019081118682101761019e578697849283926101889952602788527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c87890152660819985a5b195960ca1b8a8901525190845af4913d15610194573d9061017a61006c83610253565b91825281943d92013e610291565b508038808080806100fe565b5060609250610291565b634e487b7160e01b84526041600452602484fd5b50826100f9565b855162461bcd60e51b815260048101859052602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b600080fd5b6040519190601f01601f191682016001600160401b0381118382101761023d57604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161023d57601f01601f191660200190565b60005b8381106102815750506000910152565b8181015183820152602001610271565b919290156102f357508151156102a5575090565b3b156102ae5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156103065750805190602001fd5b6044604051809262461bcd60e51b825260206004830152610336815180928160248601526020868601910161026e565b601f01601f19168101030190fdfe60806040523615605f5773ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54166000808092368280378136915af43d82803e15605b573d90f35b3d90fd5b73ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54166000808092368280378136915af43d82803e15605b573d90f3fea164736f6c6343000813000a","opcodes":"PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH2 0x403 SWAP1 DUP2 CODESIZE SUB DUP1 PUSH2 0x16 DUP2 PUSH2 0x218 JUMP JUMPDEST SWAP4 DUP5 CODECOPY DUP3 ADD SWAP2 DUP2 DUP2 DUP5 SUB SLT PUSH2 0x213 JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 DUP3 SUB PUSH2 0x213 JUMPI PUSH1 0x20 DUP4 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP5 SWAP2 SWAP4 SWAP2 DUP6 DUP3 GT PUSH2 0x213 JUMPI ADD DUP7 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x213 JUMPI DUP1 MLOAD SWAP1 PUSH2 0x71 PUSH2 0x6C DUP4 PUSH2 0x253 JUMP JUMPDEST PUSH2 0x218 JUMP JUMPDEST SWAP2 DUP1 DUP4 MSTORE DUP6 DUP4 ADD SWAP9 DUP7 DUP3 DUP5 ADD ADD GT PUSH2 0x213 JUMPI DUP9 DUP7 PUSH2 0x8F SWAP4 ADD PUSH2 0x26E JUMP JUMPDEST DUP2 EXTCODESIZE ISZERO PUSH2 0x1B9 JUMPI PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP5 OR SWAP1 SSTORE PUSH1 0x0 SWAP3 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B DUP5 DUP1 LOG2 DUP1 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1B2 JUMPI JUMPDEST PUSH2 0x10B JUMPI JUMPDEST DUP6 MLOAD PUSH1 0xBE SWAP1 DUP2 PUSH2 0x345 DUP3 CODECOPY RETURN JUMPDEST DUP6 MLOAD SWAP5 PUSH1 0x60 DUP7 ADD SWAP1 DUP2 GT DUP7 DUP3 LT OR PUSH2 0x19E JUMPI DUP7 SWAP8 DUP5 SWAP3 DUP4 SWAP3 PUSH2 0x188 SWAP10 MSTORE PUSH1 0x27 DUP9 MSTORE PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C DUP8 DUP10 ADD MSTORE PUSH7 0x819985A5B1959 PUSH1 0xCA SHL DUP11 DUP10 ADD MSTORE MLOAD SWAP1 DUP5 GAS DELEGATECALL SWAP2 RETURNDATASIZE ISZERO PUSH2 0x194 JUMPI RETURNDATASIZE SWAP1 PUSH2 0x17A PUSH2 0x6C DUP4 PUSH2 0x253 JUMP JUMPDEST SWAP2 DUP3 MSTORE DUP2 SWAP5 RETURNDATASIZE SWAP3 ADD RETURNDATACOPY PUSH2 0x291 JUMP JUMPDEST POP DUP1 CODESIZE DUP1 DUP1 DUP1 DUP1 PUSH2 0xFE JUMP JUMPDEST POP PUSH1 0x60 SWAP3 POP PUSH2 0x291 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST POP DUP3 PUSH2 0xF9 JUMP JUMPDEST DUP6 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH2 0x23D JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x23D JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x281 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x271 JUMP JUMPDEST SWAP2 SWAP3 SWAP1 ISZERO PUSH2 0x2F3 JUMPI POP DUP2 MLOAD ISZERO PUSH2 0x2A5 JUMPI POP SWAP1 JUMP JUMPDEST EXTCODESIZE ISZERO PUSH2 0x2AE JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x306 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x44 PUSH1 0x40 MLOAD DUP1 SWAP3 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x20 PUSH1 0x4 DUP4 ADD MSTORE PUSH2 0x336 DUP2 MLOAD DUP1 SWAP3 DUP2 PUSH1 0x24 DUP7 ADD MSTORE PUSH1 0x20 DUP7 DUP7 ADD SWAP2 ADD PUSH2 0x26E JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP2 ADD SUB ADD SWAP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE ISZERO PUSH1 0x5F JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD AND PUSH1 0x0 DUP1 DUP1 SWAP3 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE DUP3 DUP1 RETURNDATACOPY ISZERO PUSH1 0x5B JUMPI RETURNDATASIZE SWAP1 RETURN JUMPDEST RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD AND PUSH1 0x0 DUP1 DUP1 SWAP3 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE DUP3 DUP1 RETURNDATACOPY ISZERO PUSH1 0x5B JUMPI RETURNDATASIZE SWAP1 RETURN INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"567:723:2:-:0;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;567:723:2;;;;;;;;;;;;-1:-1:-1;;;;;567:723:2;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1702:19:10;;:23;567:723:2;;1030:66:3;;;-1:-1:-1;;;;;;1030:66:3;;;;;-1:-1:-1;;1889:27:3;-1:-1:-1;;1889:27:3;567:723:2;;2208:15:3;;;:28;;;-1:-1:-1;2204:112:3;;-1:-1:-1;567:723:2;;;;;;;;;2204:112:3;567:723:2;;;;;;;;;;;;;;;;;;;;;7307:69:10;567:723:2;;;;;;;;;;-1:-1:-1;;;567:723:2;;;;7265:25:10;;;;;;567:723:2;;;;;;;;;;:::i;:::-;;;;;;;;;;7307:69:10;:::i;:::-;;2204:112:3;;;;;;;;567:723:2;-1:-1:-1;567:723:2;;-1:-1:-1;7307:69:10;:::i;567:723:2:-;-1:-1:-1;;;567:723:2;;;;;;;;2208:28:3;;;;;567:723:2;;;-1:-1:-1;;;567:723:2;;;;;;;;;;;;;;;;;;-1:-1:-1;;;567:723:2;;;;;;;;-1:-1:-1;567:723:2;;;;;;;;;-1:-1:-1;;567:723:2;;;-1:-1:-1;;;;;567:723:2;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;567:723:2;;;;;;-1:-1:-1;;567:723:2;;;;:::o;:::-;;;;;;;;-1:-1:-1;;567:723:2;;;;:::o;:::-;;;;;;;;;;;;;7671:628:10;;;;7875:418;;;567:723:2;;;7906:22:10;7902:286;;8201:17;;:::o;7902:286::-;1702:19;:23;567:723:2;;8201:17:10;:::o;567:723:2:-;;;-1:-1:-1;;;567:723:2;;;;;;;;;;;;;;;;;;;;7875:418:10;567:723:2;;;;-1:-1:-1;8980:21:10;:17;;9152:142;;;;;;;8976:379;567:723:2;;;;;;;;9324:20:10;;567:723:2;9324:20:10;;;567:723:2;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;567:723:2;;;9324:20:10;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"60806040523615605f5773ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54166000808092368280378136915af43d82803e15605b573d90f35b3d90fd5b73ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54166000808092368280378136915af43d82803e15605b573d90f3fea164736f6c6343000813000a","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE ISZERO PUSH1 0x5F JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD AND PUSH1 0x0 DUP1 DUP1 SWAP3 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE DUP3 DUP1 RETURNDATACOPY ISZERO PUSH1 0x5B JUMPI RETURNDATASIZE SWAP1 RETURN JUMPDEST RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD AND PUSH1 0x0 DUP1 DUP1 SWAP3 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE DUP3 DUP1 RETURNDATACOPY ISZERO PUSH1 0x5B JUMPI RETURNDATASIZE SWAP1 RETURN INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"567:723:2:-:0;;;;;;;1030:66:3;;;;-1:-1:-1;567:723:2;;;;1018:819:4;;;567:723:2;;1018:819:4;;;;;;;;;;;;;;;;;567:723:2;1030:66:3;;;;-1:-1:-1;567:723:2;;;;1018:819:4;;;567:723:2;;1018:819:4;;;;;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"38000","executionCost":"infinite","totalCost":"infinite"},"external":{"":"infinite"},"internal":{"_implementation()":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an implementation address that can be changed. This address is stored in storage in the location specified by https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the implementation behind the proxy.\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the upgradeable proxy with an initial implementation specified by `_logic`. If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity constructor.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":\"ERC1967Proxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol":{"ERC1967Upgrade":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"}],"devdoc":{"details":"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._","events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is changed."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{},"stateVariables":{"_ADMIN_SLOT":{"details":"Storage slot with the admin of the contract. This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is validated in the constructor."},"_BEACON_SLOT":{"details":"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"_IMPLEMENTATION_SLOT":{"details":"Storage slot with the address of the current implementation. This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is validated in the constructor."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_ADMIN_SLOT\":{\"details\":\"Storage slot with the admin of the contract. This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is validated in the constructor.\"},\"_BEACON_SLOT\":{\"details\":\"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\"},\"_IMPLEMENTATION_SLOT\":{\"details\":\"Storage slot with the address of the current implementation. This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is validated in the constructor.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":\"ERC1967Upgrade\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/proxy/Proxy.sol":{"Proxy":{"abi":[{"stateMutability":"payable","type":"fallback"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"details":"This abstract contract provides a fallback function that delegates all calls to another contract using the EVM instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to be specified by overriding the virtual {_implementation} function. Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a different contract through the {_delegate} function. The success and return data of the delegated call will be returned back to the caller of the proxy.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This abstract contract provides a fallback function that delegates all calls to another contract using the EVM instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to be specified by overriding the virtual {_implementation} function. Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a different contract through the {_delegate} function. The success and return data of the delegated call will be returned back to the caller of the proxy.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/proxy/Proxy.sol\":\"Proxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/proxy/beacon/IBeacon.sol":{"IBeacon":{"abi":[{"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This is the interface that {BeaconProxy} expects of its beacon.","kind":"dev","methods":{"implementation()":{"details":"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"implementation()":"5c60da1b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is the interface that {BeaconProxy} expects of its beacon.\",\"kind\":\"dev\",\"methods\":{\"implementation()\":{\"details\":\"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":\"IBeacon\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x3d6069be9b4c01fb81840fb9c2c4dc58dd6a6a4aafaa2c6837de8699574d84c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":440,"contract":"@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":443,"contract":"@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ERC20":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"constructor":{"details":"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"abi_decode_string_fromMemory":{"entryPoint":840,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":802,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[],"linkReferences":{},"object":"6080604052346200031d5762001095803803806200001d8162000322565b9283398101906040818303126200031d5780516001600160401b03908181116200031d57836200004f91840162000348565b91602093848201518381116200031d576200006b920162000348565b82518281116200021d576003918254916001958684811c9416801562000312575b88851014620002fc578190601f94858111620002a6575b5088908583116001146200023f5760009262000233575b505060001982861b1c191690861b1783555b80519384116200021d5760049586548681811c9116801562000212575b82821014620001fd57838111620001b2575b508092851160011462000144575093839491849260009562000138575b50501b92600019911b1c19161790555b604051610cda9081620003bb8239f35b01519350388062000118565b92919084601f1981168860005285600020956000905b898383106200019757505050106200017c575b50505050811b01905562000128565b01519060f884600019921b161c19169055388080806200016d565b8587015189559097019694850194889350908101906200015a565b87600052816000208480880160051c820192848910620001f3575b0160051c019087905b828110620001e6575050620000fb565b60008155018790620001d6565b92508192620001cd565b602288634e487b7160e01b6000525260246000fd5b90607f1690620000e9565b634e487b7160e01b600052604160045260246000fd5b015190503880620000ba565b90889350601f19831691876000528a6000209260005b8c8282106200028f575050841162000276575b505050811b018355620000cc565b015160001983881b60f8161c1916905538808062000268565b8385015186558c9790950194938401930162000255565b90915085600052886000208580850160051c8201928b8610620002f2575b918a91869594930160051c01915b828110620002e2575050620000a3565b600081558594508a9101620002d2565b92508192620002c4565b634e487b7160e01b600052602260045260246000fd5b93607f16936200008c565b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200021d57604052565b919080601f840112156200031d5782516001600160401b0381116200021d576020906200037e601f8201601f1916830162000322565b928184528282870101116200031d5760005b818110620003a657508260009394955001015290565b85810183015184820184015282016200039056fe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde031461075657508163095ea7b31461070e57816318160ddd146106d157816323b872dd146105a3578163313ce5671461056957816339509351146104bf57816370a082311461045e57816395d89b4114610268578163a457c2d71461016257508063a9059cbb146101145763dd62ed3e1461009e57600080fd5b3461011057807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011057806020926100d86108fe565b6100e0610926565b73ffffffffffffffffffffffffffffffffffffffff91821683526001865283832091168252845220549051908152f35b5080fd5b503461011057807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101105760209061015b6101516108fe565b6024359033610949565b5160018152f35b9050823461026557827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102655761019b6108fe565b918360243592338152600160205281812073ffffffffffffffffffffffffffffffffffffffff861682526020522054908282106101e25760208561015b8585038733610b58565b60849060208651917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152fd5b80fd5b83833461011057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011057805190828454600181811c90808316928315610454575b60209384841081146104285783885287959493929181156103cd5750600114610351575b50505003601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019267ffffffffffffffff8411838510176103255750829182610321925282610898565b0390f35b806041867f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b8888529193925086917f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8284106103b757505050907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe092601f928201019181936102d3565b805488850187015287945092850192810161037c565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016848701525050151560051b830101905081601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06102d3565b60248960228c7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b91607f16916102af565b5050346101105760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610110578060209273ffffffffffffffffffffffffffffffffffffffff6104b06108fe565b16815280845220549051908152f35b82843461026557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610265576104f76108fe565b338252600160205282822073ffffffffffffffffffffffffffffffffffffffff821683526020528282205491602435830180931161053d5760208461015b858533610b58565b806011867f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b50503461011057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610110576020905160128152f35b839150346101105760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610110576105dd6108fe565b6105e5610926565b91846044359473ffffffffffffffffffffffffffffffffffffffff8416815260016020528181203382526020522054907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361064b575b60208661015b878787610949565b84821061067457509183916106696020969561015b95033383610b58565b91939481935061063d565b60649060208751917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b50503461011057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610110576020906002549051908152f35b50503461011057807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101105760209061015b61074c6108fe565b6024359033610b58565b8490843461089457827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108945782600354600181811c9080831692831561088a575b60209384841081146104285783885287959493929181156103cd575060011461080d5750505003601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019267ffffffffffffffff8411838510176103255750829182610321925282610898565b600388529193925086917fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b82841061087457505050907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe092601f928201019181936102d3565b8054888501870152879450928501928101610839565b91607f169161079c565b8280fd5b60208082528251818301819052939260005b8581106108ea575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006040809697860101520116010190565b8181018301518482016040015282016108aa565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361092157565b600080fd5b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361092157565b73ffffffffffffffffffffffffffffffffffffffff809116918215610ad45716918215610a50576000828152806020526040812054918083106109cc57604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152fd5b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152fd5b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152fd5b73ffffffffffffffffffffffffffffffffffffffff809116918215610c4a5716918215610bc65760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152fd5b60846040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH3 0x31D JUMPI PUSH3 0x1095 DUP1 CODESIZE SUB DUP1 PUSH3 0x1D DUP2 PUSH3 0x322 JUMP JUMPDEST SWAP3 DUP4 CODECOPY DUP2 ADD SWAP1 PUSH1 0x40 DUP2 DUP4 SUB SLT PUSH3 0x31D JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 DUP2 GT PUSH3 0x31D JUMPI DUP4 PUSH3 0x4F SWAP2 DUP5 ADD PUSH3 0x348 JUMP JUMPDEST SWAP2 PUSH1 0x20 SWAP4 DUP5 DUP3 ADD MLOAD DUP4 DUP2 GT PUSH3 0x31D JUMPI PUSH3 0x6B SWAP3 ADD PUSH3 0x348 JUMP JUMPDEST DUP3 MLOAD DUP3 DUP2 GT PUSH3 0x21D JUMPI PUSH1 0x3 SWAP2 DUP3 SLOAD SWAP2 PUSH1 0x1 SWAP6 DUP7 DUP5 DUP2 SHR SWAP5 AND DUP1 ISZERO PUSH3 0x312 JUMPI JUMPDEST DUP9 DUP6 LT EQ PUSH3 0x2FC JUMPI DUP2 SWAP1 PUSH1 0x1F SWAP5 DUP6 DUP2 GT PUSH3 0x2A6 JUMPI JUMPDEST POP DUP9 SWAP1 DUP6 DUP4 GT PUSH1 0x1 EQ PUSH3 0x23F JUMPI PUSH1 0x0 SWAP3 PUSH3 0x233 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP7 SHL SHR NOT AND SWAP1 DUP7 SHL OR DUP4 SSTORE JUMPDEST DUP1 MLOAD SWAP4 DUP5 GT PUSH3 0x21D JUMPI PUSH1 0x4 SWAP6 DUP7 SLOAD DUP7 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0x212 JUMPI JUMPDEST DUP3 DUP3 LT EQ PUSH3 0x1FD JUMPI DUP4 DUP2 GT PUSH3 0x1B2 JUMPI JUMPDEST POP DUP1 SWAP3 DUP6 GT PUSH1 0x1 EQ PUSH3 0x144 JUMPI POP SWAP4 DUP4 SWAP5 SWAP2 DUP5 SWAP3 PUSH1 0x0 SWAP6 PUSH3 0x138 JUMPI JUMPDEST POP POP SHL SWAP3 PUSH1 0x0 NOT SWAP2 SHL SHR NOT AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCDA SWAP1 DUP2 PUSH3 0x3BB DUP3 CODECOPY RETURN JUMPDEST ADD MLOAD SWAP4 POP CODESIZE DUP1 PUSH3 0x118 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 DUP5 PUSH1 0x1F NOT DUP2 AND DUP9 PUSH1 0x0 MSTORE DUP6 PUSH1 0x0 KECCAK256 SWAP6 PUSH1 0x0 SWAP1 JUMPDEST DUP10 DUP4 DUP4 LT PUSH3 0x197 JUMPI POP POP POP LT PUSH3 0x17C JUMPI JUMPDEST POP POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH3 0x128 JUMP JUMPDEST ADD MLOAD SWAP1 PUSH1 0xF8 DUP5 PUSH1 0x0 NOT SWAP3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 DUP1 PUSH3 0x16D JUMP JUMPDEST DUP6 DUP8 ADD MLOAD DUP10 SSTORE SWAP1 SWAP8 ADD SWAP7 SWAP5 DUP6 ADD SWAP5 DUP9 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH3 0x15A JUMP JUMPDEST DUP8 PUSH1 0x0 MSTORE DUP2 PUSH1 0x0 KECCAK256 DUP5 DUP1 DUP9 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP5 DUP10 LT PUSH3 0x1F3 JUMPI JUMPDEST ADD PUSH1 0x5 SHR ADD SWAP1 DUP8 SWAP1 JUMPDEST DUP3 DUP2 LT PUSH3 0x1E6 JUMPI POP POP PUSH3 0xFB JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE ADD DUP8 SWAP1 PUSH3 0x1D6 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x1CD JUMP JUMPDEST PUSH1 0x22 DUP9 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0xE9 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0xBA JUMP JUMPDEST SWAP1 DUP9 SWAP4 POP PUSH1 0x1F NOT DUP4 AND SWAP2 DUP8 PUSH1 0x0 MSTORE DUP11 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0x0 JUMPDEST DUP13 DUP3 DUP3 LT PUSH3 0x28F JUMPI POP POP DUP5 GT PUSH3 0x276 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP4 SSTORE PUSH3 0xCC JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP9 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x268 JUMP JUMPDEST DUP4 DUP6 ADD MLOAD DUP7 SSTORE DUP13 SWAP8 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP5 ADD SWAP4 ADD PUSH3 0x255 JUMP JUMPDEST SWAP1 SWAP2 POP DUP6 PUSH1 0x0 MSTORE DUP9 PUSH1 0x0 KECCAK256 DUP6 DUP1 DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP12 DUP7 LT PUSH3 0x2F2 JUMPI JUMPDEST SWAP2 DUP11 SWAP2 DUP7 SWAP6 SWAP5 SWAP4 ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH3 0x2E2 JUMPI POP POP PUSH3 0xA3 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE DUP6 SWAP5 POP DUP11 SWAP2 ADD PUSH3 0x2D2 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x2C4 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH3 0x8C JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH3 0x21D JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP1 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH3 0x31D JUMPI DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH3 0x21D JUMPI PUSH1 0x20 SWAP1 PUSH3 0x37E PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD PUSH3 0x322 JUMP JUMPDEST SWAP3 DUP2 DUP5 MSTORE DUP3 DUP3 DUP8 ADD ADD GT PUSH3 0x31D JUMPI PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH3 0x3A6 JUMPI POP DUP3 PUSH1 0x0 SWAP4 SWAP5 SWAP6 POP ADD ADD MSTORE SWAP1 JUMP JUMPDEST DUP6 DUP2 ADD DUP4 ADD MLOAD DUP5 DUP3 ADD DUP5 ADD MSTORE DUP3 ADD PUSH3 0x390 JUMP INVALID PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 SWAP2 DUP3 CALLDATASIZE LT ISZERO PUSH2 0x16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0x6FDDE03 EQ PUSH2 0x756 JUMPI POP DUP2 PUSH4 0x95EA7B3 EQ PUSH2 0x70E JUMPI DUP2 PUSH4 0x18160DDD EQ PUSH2 0x6D1 JUMPI DUP2 PUSH4 0x23B872DD EQ PUSH2 0x5A3 JUMPI DUP2 PUSH4 0x313CE567 EQ PUSH2 0x569 JUMPI DUP2 PUSH4 0x39509351 EQ PUSH2 0x4BF JUMPI DUP2 PUSH4 0x70A08231 EQ PUSH2 0x45E JUMPI DUP2 PUSH4 0x95D89B41 EQ PUSH2 0x268 JUMPI DUP2 PUSH4 0xA457C2D7 EQ PUSH2 0x162 JUMPI POP DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x114 JUMPI PUSH4 0xDD62ED3E EQ PUSH2 0x9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x110 JUMPI DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x110 JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH2 0xD8 PUSH2 0x8FE JUMP JUMPDEST PUSH2 0xE0 PUSH2 0x926 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND DUP4 MSTORE PUSH1 0x1 DUP7 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x110 JUMPI DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x110 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x15B PUSH2 0x151 PUSH2 0x8FE JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x949 JUMP JUMPDEST MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST SWAP1 POP DUP3 CALLVALUE PUSH2 0x265 JUMPI DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x265 JUMPI PUSH2 0x19B PUSH2 0x8FE JUMP JUMPDEST SWAP2 DUP4 PUSH1 0x24 CALLDATALOAD SWAP3 CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 DUP3 DUP3 LT PUSH2 0x1E2 JUMPI PUSH1 0x20 DUP6 PUSH2 0x15B DUP6 DUP6 SUB DUP8 CALLER PUSH2 0xB58 JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP7 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 REVERT JUMPDEST DUP4 DUP4 CALLVALUE PUSH2 0x110 JUMPI DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x110 JUMPI DUP1 MLOAD SWAP1 DUP3 DUP5 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x454 JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x428 JUMPI DUP4 DUP9 MSTORE DUP8 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 DUP2 ISZERO PUSH2 0x3CD JUMPI POP PUSH1 0x1 EQ PUSH2 0x351 JUMPI JUMPDEST POP POP POP SUB PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x325 JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x321 SWAP3 MSTORE DUP3 PUSH2 0x898 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST DUP1 PUSH1 0x41 DUP7 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x24 SWAP5 MSTORE MSTORE REVERT JUMPDEST DUP9 DUP9 MSTORE SWAP2 SWAP4 SWAP3 POP DUP7 SWAP2 PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B JUMPDEST DUP3 DUP5 LT PUSH2 0x3B7 JUMPI POP POP POP SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP3 PUSH1 0x1F SWAP3 DUP3 ADD ADD SWAP2 DUP2 SWAP4 PUSH2 0x2D3 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP6 ADD DUP8 ADD MSTORE DUP8 SWAP5 POP SWAP3 DUP6 ADD SWAP3 DUP2 ADD PUSH2 0x37C JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP5 DUP8 ADD MSTORE POP POP ISZERO ISZERO PUSH1 0x5 SHL DUP4 ADD ADD SWAP1 POP DUP2 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH2 0x2D3 JUMP JUMPDEST PUSH1 0x24 DUP10 PUSH1 0x22 DUP13 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 DUP4 MSTORE MSTORE REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x2AF JUMP JUMPDEST POP POP CALLVALUE PUSH2 0x110 JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x110 JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x4B0 PUSH2 0x8FE JUMP JUMPDEST AND DUP2 MSTORE DUP1 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 DUP5 CALLVALUE PUSH2 0x265 JUMPI DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x265 JUMPI PUSH2 0x4F7 PUSH2 0x8FE JUMP JUMPDEST CALLER DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP3 DUP3 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP4 MSTORE PUSH1 0x20 MSTORE DUP3 DUP3 KECCAK256 SLOAD SWAP2 PUSH1 0x24 CALLDATALOAD DUP4 ADD DUP1 SWAP4 GT PUSH2 0x53D JUMPI PUSH1 0x20 DUP5 PUSH2 0x15B DUP6 DUP6 CALLER PUSH2 0xB58 JUMP JUMPDEST DUP1 PUSH1 0x11 DUP7 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x24 SWAP5 MSTORE MSTORE REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x110 JUMPI DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x110 JUMPI PUSH1 0x20 SWAP1 MLOAD PUSH1 0x12 DUP2 MSTORE RETURN JUMPDEST DUP4 SWAP2 POP CALLVALUE PUSH2 0x110 JUMPI PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x110 JUMPI PUSH2 0x5DD PUSH2 0x8FE JUMP JUMPDEST PUSH2 0x5E5 PUSH2 0x926 JUMP JUMPDEST SWAP2 DUP5 PUSH1 0x44 CALLDATALOAD SWAP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 CALLER DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x64B JUMPI JUMPDEST PUSH1 0x20 DUP7 PUSH2 0x15B DUP8 DUP8 DUP8 PUSH2 0x949 JUMP JUMPDEST DUP5 DUP3 LT PUSH2 0x674 JUMPI POP SWAP2 DUP4 SWAP2 PUSH2 0x669 PUSH1 0x20 SWAP7 SWAP6 PUSH2 0x15B SWAP6 SUB CALLER DUP4 PUSH2 0xB58 JUMP JUMPDEST SWAP2 SWAP4 SWAP5 DUP2 SWAP4 POP PUSH2 0x63D JUMP JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 DUP8 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x110 JUMPI DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x110 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x110 JUMPI DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x110 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x15B PUSH2 0x74C PUSH2 0x8FE JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0xB58 JUMP JUMPDEST DUP5 SWAP1 DUP5 CALLVALUE PUSH2 0x894 JUMPI DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x894 JUMPI DUP3 PUSH1 0x3 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x88A JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x428 JUMPI DUP4 DUP9 MSTORE DUP8 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 DUP2 ISZERO PUSH2 0x3CD JUMPI POP PUSH1 0x1 EQ PUSH2 0x80D JUMPI POP POP POP SUB PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x325 JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x321 SWAP3 MSTORE DUP3 PUSH2 0x898 JUMP JUMPDEST PUSH1 0x3 DUP9 MSTORE SWAP2 SWAP4 SWAP3 POP DUP7 SWAP2 PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B JUMPDEST DUP3 DUP5 LT PUSH2 0x874 JUMPI POP POP POP SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP3 PUSH1 0x1F SWAP3 DUP3 ADD ADD SWAP2 DUP2 SWAP4 PUSH2 0x2D3 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP6 ADD DUP8 ADD MSTORE DUP8 SWAP5 POP SWAP3 DUP6 ADD SWAP3 DUP2 ADD PUSH2 0x839 JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x79C JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP2 DUP4 ADD DUP2 SWAP1 MSTORE SWAP4 SWAP3 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT PUSH2 0x8EA JUMPI POP POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 PUSH1 0x0 PUSH1 0x40 DUP1 SWAP7 SWAP8 DUP7 ADD ADD MSTORE ADD AND ADD ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD DUP4 ADD MLOAD DUP5 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x8AA JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x921 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x921 JUMPI JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP2 AND SWAP2 DUP3 ISZERO PUSH2 0xAD4 JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0xA50 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 DUP1 DUP4 LT PUSH2 0x9CC JUMPI PUSH1 0x40 DUP3 DUP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP6 DUP8 PUSH1 0x20 SWAP7 MSTORE DUP3 DUP7 MSTORE SUB DUP3 DUP3 KECCAK256 SSTORE DUP7 DUP2 MSTORE KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP2 AND SWAP2 DUP3 ISZERO PUSH2 0xC4A JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0xBC6 JUMPI PUSH1 0x20 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 DUP4 PUSH1 0x0 MSTORE PUSH1 0x1 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP6 PUSH1 0x0 MSTORE DUP3 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"1532:11312:7:-:0;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1532:11312:7;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;2046:13;1532:11312;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:7;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:7;;;;;;;;;;-1:-1:-1;1532:11312:7;;;;-1:-1:-1;;;;1532:11312:7;;;;;;;;;;;;;;;;;;;;2069:17;1532:11312;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:7;;;;;;;;;;;;;;-1:-1:-1;1532:11312:7;;-1:-1:-1;1532:11312:7;;-1:-1:-1;1532:11312:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:7;;;;;;;;-1:-1:-1;1532:11312:7;;-1:-1:-1;1532:11312:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:7;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:7;;;-1:-1:-1;1532:11312:7;;;;;;;;;;;;-1:-1:-1;1532:11312:7;;2069:17;1532:11312;;-1:-1:-1;1532:11312:7;;;;;-1:-1:-1;1532:11312:7;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:7;;-1:-1:-1;1532:11312:7;;-1:-1:-1;1532:11312:7;;;;;;;;;;-1:-1:-1;1532:11312:7;;;;;;;;;;;;;;;;-1:-1:-1;;1532:11312:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:7;;-1:-1:-1;1532:11312:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:7;;;;-1:-1:-1;1532:11312:7;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:7;;;;;-1:-1:-1;1532:11312:7;;;;;;;;;-1:-1:-1;1532:11312:7;;;;;;;;;-1:-1:-1;;1532:11312:7;;;-1:-1:-1;;;;;1532:11312:7;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;1532:11312:7;;;;;;;;;;-1:-1:-1;;1532:11312:7;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;1532:11312:7;;;;;;;;-1:-1:-1;1532:11312:7;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":2302,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_4782":{"entryPoint":2342,"id":null,"parameterSlots":0,"returnSlots":1},"abi_encode_string":{"entryPoint":2200,"id":null,"parameterSlots":2,"returnSlots":1},"fun_approve":{"entryPoint":2904,"id":1123,"parameterSlots":3,"returnSlots":0},"fun_transfer":{"entryPoint":2377,"id":949,"parameterSlots":3,"returnSlots":0}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde031461075657508163095ea7b31461070e57816318160ddd146106d157816323b872dd146105a3578163313ce5671461056957816339509351146104bf57816370a082311461045e57816395d89b4114610268578163a457c2d71461016257508063a9059cbb146101145763dd62ed3e1461009e57600080fd5b3461011057807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011057806020926100d86108fe565b6100e0610926565b73ffffffffffffffffffffffffffffffffffffffff91821683526001865283832091168252845220549051908152f35b5080fd5b503461011057807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101105760209061015b6101516108fe565b6024359033610949565b5160018152f35b9050823461026557827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102655761019b6108fe565b918360243592338152600160205281812073ffffffffffffffffffffffffffffffffffffffff861682526020522054908282106101e25760208561015b8585038733610b58565b60849060208651917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152fd5b80fd5b83833461011057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011057805190828454600181811c90808316928315610454575b60209384841081146104285783885287959493929181156103cd5750600114610351575b50505003601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019267ffffffffffffffff8411838510176103255750829182610321925282610898565b0390f35b806041867f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b8888529193925086917f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8284106103b757505050907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe092601f928201019181936102d3565b805488850187015287945092850192810161037c565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016848701525050151560051b830101905081601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06102d3565b60248960228c7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b91607f16916102af565b5050346101105760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610110578060209273ffffffffffffffffffffffffffffffffffffffff6104b06108fe565b16815280845220549051908152f35b82843461026557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610265576104f76108fe565b338252600160205282822073ffffffffffffffffffffffffffffffffffffffff821683526020528282205491602435830180931161053d5760208461015b858533610b58565b806011867f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b50503461011057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610110576020905160128152f35b839150346101105760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610110576105dd6108fe565b6105e5610926565b91846044359473ffffffffffffffffffffffffffffffffffffffff8416815260016020528181203382526020522054907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361064b575b60208661015b878787610949565b84821061067457509183916106696020969561015b95033383610b58565b91939481935061063d565b60649060208751917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b50503461011057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610110576020906002549051908152f35b50503461011057807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101105760209061015b61074c6108fe565b6024359033610b58565b8490843461089457827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108945782600354600181811c9080831692831561088a575b60209384841081146104285783885287959493929181156103cd575060011461080d5750505003601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019267ffffffffffffffff8411838510176103255750829182610321925282610898565b600388529193925086917fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b82841061087457505050907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe092601f928201019181936102d3565b8054888501870152879450928501928101610839565b91607f169161079c565b8280fd5b60208082528251818301819052939260005b8581106108ea575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006040809697860101520116010190565b8181018301518482016040015282016108aa565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361092157565b600080fd5b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361092157565b73ffffffffffffffffffffffffffffffffffffffff809116918215610ad45716918215610a50576000828152806020526040812054918083106109cc57604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152fd5b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152fd5b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152fd5b73ffffffffffffffffffffffffffffffffffffffff809116918215610c4a5716918215610bc65760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152fd5b60846040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 SWAP2 DUP3 CALLDATASIZE LT ISZERO PUSH2 0x16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0x6FDDE03 EQ PUSH2 0x756 JUMPI POP DUP2 PUSH4 0x95EA7B3 EQ PUSH2 0x70E JUMPI DUP2 PUSH4 0x18160DDD EQ PUSH2 0x6D1 JUMPI DUP2 PUSH4 0x23B872DD EQ PUSH2 0x5A3 JUMPI DUP2 PUSH4 0x313CE567 EQ PUSH2 0x569 JUMPI DUP2 PUSH4 0x39509351 EQ PUSH2 0x4BF JUMPI DUP2 PUSH4 0x70A08231 EQ PUSH2 0x45E JUMPI DUP2 PUSH4 0x95D89B41 EQ PUSH2 0x268 JUMPI DUP2 PUSH4 0xA457C2D7 EQ PUSH2 0x162 JUMPI POP DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x114 JUMPI PUSH4 0xDD62ED3E EQ PUSH2 0x9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x110 JUMPI DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x110 JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH2 0xD8 PUSH2 0x8FE JUMP JUMPDEST PUSH2 0xE0 PUSH2 0x926 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND DUP4 MSTORE PUSH1 0x1 DUP7 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x110 JUMPI DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x110 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x15B PUSH2 0x151 PUSH2 0x8FE JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x949 JUMP JUMPDEST MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST SWAP1 POP DUP3 CALLVALUE PUSH2 0x265 JUMPI DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x265 JUMPI PUSH2 0x19B PUSH2 0x8FE JUMP JUMPDEST SWAP2 DUP4 PUSH1 0x24 CALLDATALOAD SWAP3 CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 DUP3 DUP3 LT PUSH2 0x1E2 JUMPI PUSH1 0x20 DUP6 PUSH2 0x15B DUP6 DUP6 SUB DUP8 CALLER PUSH2 0xB58 JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP7 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 REVERT JUMPDEST DUP4 DUP4 CALLVALUE PUSH2 0x110 JUMPI DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x110 JUMPI DUP1 MLOAD SWAP1 DUP3 DUP5 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x454 JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x428 JUMPI DUP4 DUP9 MSTORE DUP8 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 DUP2 ISZERO PUSH2 0x3CD JUMPI POP PUSH1 0x1 EQ PUSH2 0x351 JUMPI JUMPDEST POP POP POP SUB PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x325 JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x321 SWAP3 MSTORE DUP3 PUSH2 0x898 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST DUP1 PUSH1 0x41 DUP7 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x24 SWAP5 MSTORE MSTORE REVERT JUMPDEST DUP9 DUP9 MSTORE SWAP2 SWAP4 SWAP3 POP DUP7 SWAP2 PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B JUMPDEST DUP3 DUP5 LT PUSH2 0x3B7 JUMPI POP POP POP SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP3 PUSH1 0x1F SWAP3 DUP3 ADD ADD SWAP2 DUP2 SWAP4 PUSH2 0x2D3 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP6 ADD DUP8 ADD MSTORE DUP8 SWAP5 POP SWAP3 DUP6 ADD SWAP3 DUP2 ADD PUSH2 0x37C JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP5 DUP8 ADD MSTORE POP POP ISZERO ISZERO PUSH1 0x5 SHL DUP4 ADD ADD SWAP1 POP DUP2 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH2 0x2D3 JUMP JUMPDEST PUSH1 0x24 DUP10 PUSH1 0x22 DUP13 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 DUP4 MSTORE MSTORE REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x2AF JUMP JUMPDEST POP POP CALLVALUE PUSH2 0x110 JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x110 JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x4B0 PUSH2 0x8FE JUMP JUMPDEST AND DUP2 MSTORE DUP1 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 DUP5 CALLVALUE PUSH2 0x265 JUMPI DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x265 JUMPI PUSH2 0x4F7 PUSH2 0x8FE JUMP JUMPDEST CALLER DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP3 DUP3 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP4 MSTORE PUSH1 0x20 MSTORE DUP3 DUP3 KECCAK256 SLOAD SWAP2 PUSH1 0x24 CALLDATALOAD DUP4 ADD DUP1 SWAP4 GT PUSH2 0x53D JUMPI PUSH1 0x20 DUP5 PUSH2 0x15B DUP6 DUP6 CALLER PUSH2 0xB58 JUMP JUMPDEST DUP1 PUSH1 0x11 DUP7 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x24 SWAP5 MSTORE MSTORE REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x110 JUMPI DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x110 JUMPI PUSH1 0x20 SWAP1 MLOAD PUSH1 0x12 DUP2 MSTORE RETURN JUMPDEST DUP4 SWAP2 POP CALLVALUE PUSH2 0x110 JUMPI PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x110 JUMPI PUSH2 0x5DD PUSH2 0x8FE JUMP JUMPDEST PUSH2 0x5E5 PUSH2 0x926 JUMP JUMPDEST SWAP2 DUP5 PUSH1 0x44 CALLDATALOAD SWAP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 CALLER DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x64B JUMPI JUMPDEST PUSH1 0x20 DUP7 PUSH2 0x15B DUP8 DUP8 DUP8 PUSH2 0x949 JUMP JUMPDEST DUP5 DUP3 LT PUSH2 0x674 JUMPI POP SWAP2 DUP4 SWAP2 PUSH2 0x669 PUSH1 0x20 SWAP7 SWAP6 PUSH2 0x15B SWAP6 SUB CALLER DUP4 PUSH2 0xB58 JUMP JUMPDEST SWAP2 SWAP4 SWAP5 DUP2 SWAP4 POP PUSH2 0x63D JUMP JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 DUP8 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x110 JUMPI DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x110 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x110 JUMPI DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x110 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x15B PUSH2 0x74C PUSH2 0x8FE JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0xB58 JUMP JUMPDEST DUP5 SWAP1 DUP5 CALLVALUE PUSH2 0x894 JUMPI DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x894 JUMPI DUP3 PUSH1 0x3 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x88A JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x428 JUMPI DUP4 DUP9 MSTORE DUP8 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 DUP2 ISZERO PUSH2 0x3CD JUMPI POP PUSH1 0x1 EQ PUSH2 0x80D JUMPI POP POP POP SUB PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x325 JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x321 SWAP3 MSTORE DUP3 PUSH2 0x898 JUMP JUMPDEST PUSH1 0x3 DUP9 MSTORE SWAP2 SWAP4 SWAP3 POP DUP7 SWAP2 PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B JUMPDEST DUP3 DUP5 LT PUSH2 0x874 JUMPI POP POP POP SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP3 PUSH1 0x1F SWAP3 DUP3 ADD ADD SWAP2 DUP2 SWAP4 PUSH2 0x2D3 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP6 ADD DUP8 ADD MSTORE DUP8 SWAP5 POP SWAP3 DUP6 ADD SWAP3 DUP2 ADD PUSH2 0x839 JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x79C JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP2 DUP4 ADD DUP2 SWAP1 MSTORE SWAP4 SWAP3 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT PUSH2 0x8EA JUMPI POP POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 PUSH1 0x0 PUSH1 0x40 DUP1 SWAP7 SWAP8 DUP7 ADD ADD MSTORE ADD AND ADD ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD DUP4 ADD MLOAD DUP5 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x8AA JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x921 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x921 JUMPI JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP2 AND SWAP2 DUP3 ISZERO PUSH2 0xAD4 JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0xA50 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 DUP1 DUP4 LT PUSH2 0x9CC JUMPI PUSH1 0x40 DUP3 DUP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP6 DUP8 PUSH1 0x20 SWAP7 MSTORE DUP3 DUP7 MSTORE SUB DUP3 DUP3 KECCAK256 SSTORE DUP7 DUP2 MSTORE KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP2 AND SWAP2 DUP3 ISZERO PUSH2 0xC4A JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0xBC6 JUMPI PUSH1 0x20 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 DUP4 PUSH1 0x0 MSTORE PUSH1 0x1 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP6 PUSH1 0x0 MSTORE DUP3 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"1532:11312:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;4102:11;1532:11312;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3894:6;1532:11312;;:::i;:::-;;;719:10:11;;3894:6:7;:::i;:::-;1532:11312;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;719:10:11;;1532:11312:7;;;;;;;;;;;;;;;;;6792:35;;;;1532:11312;;;;6928:34;1532:11312;;;;719:10:11;6928:34:7;:::i;1532:11312::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:7;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:7;;;;;;;;;;;;;;;-1:-1:-1;;1532:11312:7;;;;;;;;-1:-1:-1;1532:11312:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;719:10:11;1532:11312:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;719:10:11;6021:38:7;719:10:11;;;6021:38:7;:::i;1532:11312::-;;;;;;;;;;;;;;;;;;;;;;;;;;3186:2;1532:11312;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;719:10:11;1532:11312:7;;;;;;11244:37;11264:17;11244:37;;11240:243;;1532:11312;;5424:6;;;;;;:::i;11240:243::-;11305:26;;;1532:11312;;;;;;11432:25;1532:11312;;;5424:6;1532:11312;;719:10:11;11432:25:7;;:::i;:::-;11240:243;;;;;;;;1532:11312;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3342:12;1532:11312;;;;;;;;;;;;;;;;;;;;;;4606:6;1532:11312;;:::i;:::-;;;719:10:11;;4606:6:7;:::i;1532:11312::-;;;;;;;;;;;;;;;2244:5;1532:11312;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:7;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2244:5;1532:11312;;;;;-1:-1:-1;1532:11312:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:7;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;7456:788::-;1532:11312;;;;7552:18;;;1532:11312;;;7630:16;;;1532:11312;;7568:1;1532:11312;;;;;;;;;;7801:21;;;;1532:11312;;;;;8163:26;1532:11312;;;;;;;;;;;;;;;;;;;;;;;;;;;;8163:26;7456:788::o;1532:11312::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10457:340;1532:11312;;;;10558:19;;;1532:11312;;;10636:21;;;1532:11312;;;10758:32;1532:11312;;10575:1;1532:11312;10707:11;1532:11312;;;10575:1;1532:11312;;10575:1;1532:11312;;;;;10575:1;1532:11312;;;;;;;10758:32;10457:340::o;1532:11312::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"658000","executionCost":"infinite","totalCost":"infinite"},"external":{"allowance(address,address)":"2749","approve(address,uint256)":"24360","balanceOf(address)":"2533","decimals()":"259","decreaseAllowance(address,uint256)":"26789","increaseAllowance(address,uint256)":"26718","name()":"infinite","symbol()":"infinite","totalSupply()":"2321","transfer(address,uint256)":"50939","transferFrom(address,address,uint256)":"77319"},"internal":{"_afterTokenTransfer(address,address,uint256)":"infinite","_approve(address,address,uint256)":"infinite","_beforeTokenTransfer(address,address,uint256)":"infinite","_burn(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_spendAllowance(address,address,uint256)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":618,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":624,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":626,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":628,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":630,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"IERC20Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"decimals()":{"details":"Returns the decimals places of the token."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523460175760119081601d823930815050f35b600080fdfe600080fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x11 SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"194:9169:10:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"194:9169:10:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"3400","executionCost":"infinite","totalCost":"infinite"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Create2.sol":{"Create2":{"abi":[],"devdoc":{"details":"Helper to make usage of the `CREATE2` EVM opcode easier and safer. `CREATE2` can be used to compute in advance the address where a smart contract will be deployed, which allows for interesting new mechanisms known as 'counterfactual interactions'. See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more information.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523460175760119081601d823930815050f35b600080fdfe600080fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x11 SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"494:3457:12:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"494:3457:12:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"3400","executionCost":"infinite","totalCost":"infinite"},"internal":{"computeAddress(bytes32,bytes32)":"infinite","computeAddress(bytes32,bytes32,address)":"infinite","deploy(uint256,bytes32,bytes memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Helper to make usage of the `CREATE2` EVM opcode easier and safer. `CREATE2` can be used to compute in advance the address where a smart contract will be deployed, which allows for interesting new mechanisms known as 'counterfactual interactions'. See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more information.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Create2.sol\":\"Create2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e00f269073ffc4350e56b7e8153c9092d5f70bfba423299990514183101ef89\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523460175760119081601d823930815050f35b600080fdfe600080fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x11 SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"1420:2685:13:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"1420:2685:13:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"3400","executionCost":"infinite","totalCost":"infinite"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getBytesSlot(bytes storage pointer)":"infinite","getBytesSlot(bytes32)":"infinite","getStringSlot(bytes32)":"infinite","getStringSlot(string storage pointer)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523460175760119081601d823930815050f35b600080fdfe600080fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x11 SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"220:2559:14:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"220:2559:14:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"3400","executionCost":"infinite","totalCost":"infinite"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ECDSA":{"abi":[],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523460175760119081601d823930815050f35b600080fdfe600080fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x11 SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"369:8761:15:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"369:8761:15:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"3400","executionCost":"infinite","totalCost":"infinite"},"internal":{"_throwError(enum ECDSA.RecoverError)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","toDataWithIntendedValidatorHash(address,bytes memory)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523460175760119081601d823930815050f35b600080fdfe600080fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x11 SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"202:12582:16:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"202:12582:16:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"3400","executionCost":"infinite","totalCost":"infinite"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523460175760119081601d823930815050f35b600080fdfe600080fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x11 SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"215:1047:17:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"215:1047:17:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"3400","executionCost":"infinite","totalCost":"infinite"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Lock.sol":{"Lock":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523461002757600080546001600160a01b0319163317905560fc908161002d8239f35b600080fdfe60806040526004361015601157600080fd5b6000803560e01c80633ccfd60b14608157638da5cb5b14603057600080fd5b34607e57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112607e5773ffffffffffffffffffffffffffffffffffffffff6020915416604051908152f35b80fd5b5034607e57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112607e578080808073ffffffffffffffffffffffffffffffffffffffff815416479082821560e7575bf11560db5780f35b604051903d90823e3d90fd5b506108fc60d356fea164736f6c6343000813000a","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x27 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH1 0xFC SWAP1 DUP2 PUSH2 0x2D DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH1 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3CCFD60B EQ PUSH1 0x81 JUMPI PUSH4 0x8DA5CB5B EQ PUSH1 0x30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH1 0x7E JUMPI DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH1 0x7E JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x20 SWAP2 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH1 0x7E JUMPI DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH1 0x7E JUMPI DUP1 DUP1 DUP1 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 SLOAD AND SELFBALANCE SWAP1 DUP3 DUP3 ISZERO PUSH1 0xE7 JUMPI JUMPDEST CALL ISZERO PUSH1 0xDB JUMPI DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP PUSH2 0x8FC PUSH1 0xD3 JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"140:408:18:-:0;;;;;;;219:27;140:408;;-1:-1:-1;;;;;;140:408:18;235:10;140:408;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"60806040526004361015601157600080fd5b6000803560e01c80633ccfd60b14608157638da5cb5b14603057600080fd5b34607e57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112607e5773ffffffffffffffffffffffffffffffffffffffff6020915416604051908152f35b80fd5b5034607e57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112607e578080808073ffffffffffffffffffffffffffffffffffffffff815416479082821560e7575bf11560db5780f35b604051903d90823e3d90fd5b506108fc60d356fea164736f6c6343000813000a","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH1 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3CCFD60B EQ PUSH1 0x81 JUMPI PUSH4 0x8DA5CB5B EQ PUSH1 0x30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH1 0x7E JUMPI DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH1 0x7E JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x20 SWAP2 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH1 0x7E JUMPI DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH1 0x7E JUMPI DUP1 DUP1 DUP1 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 SLOAD AND SELFBALANCE SWAP1 DUP3 DUP3 ISZERO PUSH1 0xE7 JUMPI JUMPDEST CALL ISZERO PUSH1 0xDB JUMPI DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP PUSH2 0x8FC PUSH1 0xD3 JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"140:408:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;517:21;502:37;;;;;;140:408;502:37;;;;140:408;;502:37;140:408;;;;;;;;;;502:37;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"50400","executionCost":"24340","totalCost":"74740"},"external":{"owner()":"2275","withdraw()":"infinite"}},"methodIdentifiers":{"owner()":"8da5cb5b","withdraw()":"3ccfd60b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lock.sol\":\"Lock\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/Lock.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract Lock {\\n    address payable public owner;\\n\\n    constructor() {\\n        owner = payable(msg.sender);\\n    }\\n\\n    function withdraw() public {\\n        // Uncomment this line, and the import of \\\"hardhat/console.sol\\\", to print a log in your terminal\\n        // console.log(\\\"Unlock time is %o and block timestamp is %o\\\", unlockTime, block.timestamp);\\n\\n        owner.transfer(address(this).balance);\\n    }\\n}\\n\",\"keccak256\":\"0x516ff3ca54399a9d3d3e2749882c2b9375d32621c954b8169e913a65583b9d1c\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3405,"contract":"contracts/Lock.sol:Lock","label":"owner","offset":0,"slot":"0","type":"t_address_payable"}],"types":{"t_address_payable":{"encoding":"inplace","label":"address payable","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/aa/Account.sol":{"Account":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"inputs":[{"components":[{"internalType":"uint256","name":"functionType","type":"uint256"},{"internalType":"bytes","name":"argument","type":"bytes"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOp","name":"userop","type":"tuple"}],"name":"entrypoint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getAddressOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPassKeyOwner","outputs":[{"components":[{"internalType":"uint256","name":"pubKeyX","type":"uint256"},{"internalType":"uint256","name":"pubKeyY","type":"uint256"},{"internalType":"string","name":"keyId","type":"string"}],"internalType":"struct PassKeyId","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"functionType","type":"uint256"},{"internalType":"bytes","name":"argument","type":"bytes"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOp","name":"userop","type":"tuple"}],"name":"getUserOpHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"pubKeyX","type":"uint256"},{"internalType":"uint256","name":"pubKeyY","type":"uint256"},{"internalType":"string","name":"keyId","type":"string"}],"internalType":"struct PassKeyId","name":"anOwner","type":"tuple"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"passKeyOwnerEnabled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608080604052346100c1576000549060ff8260081c1661006f575060ff80821603610034575b60405161242590816100c78239f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a138610025565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe6080604052600436101561001b575b361561001957600080fd5b005b6000803560e01c908163759a68c01461008e575080638fb4107214610089578063b627e20f14610084578063be9ef8431461007f578063d087d2881461007a578063f0f05cef146100755763fd5c8d720361000e5761055a565b610475565b6103e9565b6103a8565b610353565b610296565b3461013e577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc6020813601126101325760043567ffffffffffffffff9182821161013a576060908236030112610136576100e860e0604052565b8060040135608052602481013560a052604481013591821161013657013660238201121561013257610124903690602460048201359101610237565b60c05261012f6106d1565b80f35b5080fd5b8280fd5b8380fd5b80fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761018c57604052565b610141565b6080810190811067ffffffffffffffff82111761018c57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761018c57604052565b604051906101fb82610170565b565b67ffffffffffffffff811161018c57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b929192610243826101fd565b9161025160405193846101ad565b82948184528183011161026e578281602093846000960137010152565b600080fd5b60005b8381106102865750506000910152565b8181015183820152602001610276565b3461026e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026e576060604080516102d481610170565b60008152600060208201520152604060a06102ed6105cd565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84519485936020855280516020860152602081015182860152015160608085015261034a8151809281608088015260208888019101610273565b01168101030190f35b3461026e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026e57602073ffffffffffffffffffffffffffffffffffffffff60005460101c16604051908152f35b3461026e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026e57602060ff600454166040519015158152f35b3461026e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026e576020600554604051908152f35b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc9060208282011261026e576004359167ffffffffffffffff831161026e578260809203011261026e5760040190565b3461026e5761048336610425565b61049561048f826114a6565b15610b9a565b6104a76104a18261184f565b15610c25565b60038135801561053d575b60018114610520575b60028114610503575b146104dd575b6100196104d8600554610d30565b600555565b6104f86104f18260206104fd940190610cb0565b3691610237565b610ee4565b386104ca565b61051b6105166104f16020860186610cb0565b610d67565b6104c4565b6105386105336104f16020860186610cb0565b61133d565b6104bb565b6105556105506104f16020860186610cb0565b61104c565b6104b2565b3461026e57602061057261056d36610425565b611a8d565b604051908152f35b90600182811c921680156105c3575b602083101461059457565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691610589565b604051906105da82610170565b816001908154815260025460209081830152604051928391600091600354906106028261057a565b80865291818116908115610694575060011461062f575b5050506040929161062b9103846101ad565b0152565b909493925060036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b946000915b81831061067c5750939450919250908201018161062b6040610619565b8654888401850152958601958794509183019161065f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016848701525050151560051b83010190508161062b6040610619565b60005460ff8160081c16158091819261086c575b811561084c575b50156107c8578061072360017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff006000541617600055565b610792575b61073061087a565b61073657565b6107637fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff60005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1565b6107c36101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff6000541617600055565b610728565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b303b1591508161085e575b50386106ec565b6001915060ff161438610857565b600160ff82161091506106e5565b6001807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff006004541617600455608051815560a05160025560c0519081519167ffffffffffffffff831161018c576108db836108d660035461057a565b610a1a565b60209081601f85116001146109545750600091849182610929575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91921b9260031b1c191617600355565b015191507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff386108f6565b9190847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0819596166109a860036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90565b946000905b88838310610a0057505050106109c9575b505050811b01600355565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c191690553880806109be565b8587015188559096019594850194879350908101906109ad565b601f8111610a26575050565b600090600382527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b906020601f850160051c83019410610a81575b601f0160051c01915b828110610a7657505050565b818155600101610a6a565b9092508290610a61565b8051600190815560406020928381015160025501519182519267ffffffffffffffff841161018c57610ac2846108d660035461057a565b81601f8511600114610b0c57506000918491826109295750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91921b9260031b1c191617600355565b9190847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081959616610b6060036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90565b946000905b88838310610b8057505050106109c957505050811b01600355565b858701518855909601959485019487935090810190610b65565b15610ba157565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4163636f756e743a205369676e617475726520766572696669636174696f6e2060448201527f6661696c656400000000000000000000000000000000000000000000000000006064820152fd5b15610c2c57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4163636f756e743a204e6f6e636520766572696669636174696f6e206661696c60448201527f65640000000000000000000000000000000000000000000000000000000000006064820152fd5b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18136030182121561026e570180359067ffffffffffffffff821161026e5760200191813603831361026e57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9060018201809211610d3e57565b610d01565b604051906020820182811067ffffffffffffffff82111761018c5760405260008252565b600160ff60045416151503610e1b576014610dee910151610da6610d896101ee565b6000815260006020820152610d9c610d43565b6040820152610a8b565b7fffffffffffffffffffff0000000000000000000000000000000000000000ffff75ffffffffffffffffffffffffffffffffffffffff00006000549260101b16911617600055565b6101fb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0060045416600455565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4163636f756e743a20416c72656164792061646472657373206f776e6572206560448201527f6e61626c656400000000000000000000000000000000000000000000000000006064820152fd5b81601f8201121561026e578051610eb5816101fd565b92610ec360405194856101ad565b8184526020828401011161026e57610ee19160208085019101610273565b90565b60ff60045416610faa57805181019060608183031261026e5760208101519060408101519060608101519067ffffffffffffffff821161026e576020610f329281610f7a9701920101610e9f565b90610f3b6101ee565b92835260208301526040820152610f757fffffffffffffffffffff0000000000000000000000000000000000000000ffff60005416600055565b610a8b565b6101fb60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff006004541617600455565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4163636f756e743a20416c726561647920706173736b6579206f776e6572206560448201527f6e61626c656400000000000000000000000000000000000000000000000000006064820152fd5b73ffffffffffffffffffffffffffffffffffffffff81160361026e57565b8051810160608282031261026e576020820151906110698261102e565b604083015190606084015167ffffffffffffffff811161026e576101fb9460206110ad928173ffffffffffffffffffffffffffffffffffffffff9501920101610e9f565b9216611486565b67ffffffffffffffff811161018c5760051b60200190565b81601f8201121561026e578051916110e3836110b4565b926110f160405194856101ad565b808452602092838086019260051b82010192831161026e578301905b82821061111b575050505090565b8151815290830190830161110d565b9080601f8301121561026e57815190611142826110b4565b9261115060405194856101ad565b828452602092838086019160051b8301019280841161026e57848301915b84831061117e5750505050505090565b825167ffffffffffffffff811161026e5786916111a084848094890101610e9f565b81520192019161116e565b909160608284031261026e5781519167ffffffffffffffff9283811161026e5781019380601f8601121561026e5784516111e4816110b4565b906111f260405192836101ad565b808252602096878084019260051b8201019184831161026e5788809201905b83821061124a57505050509482015184811161026e57816112339184016110cc565b93604083015190811161026e57610ee1920161112a565b82809183516112588161102e565b815201910190611211565b1561126a57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f77726f6e67206172726179206c656e67746873000000000000000000000000006044820152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610d3e5760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80518210156113385760209160051b010190565b6112f5565b61135090602080825183010191016111ab565b92919061136a825185518091149081611416575b50611263565b80516113cc575060005b81518110156113c657806113bc6113ab6113916113c19486611324565b5173ffffffffffffffffffffffffffffffffffffffff1690565b6113b58388611324565b5190611435565b6112c8565b611374565b50509050565b929060005b815181101561140f57806113bc6113ee61139161140a9486611324565b6113f88389611324565b516114038488611324565b5191611486565b6113d1565b5050509050565b835180159250821561142b575b505038611364565b1490503880611423565b600091829182602083519301915af13d1561147e573d90611455826101fd565b9161146360405193846101ad565b82523d6000602084013e5b156114765750565b602081519101fd5b60609061146e565b916000928392602083519301915af13d1561147e573d90611455826101fd565b6114af81611a8d565b60045460ff16156114f3576114e1906114d26104f18460606114e5960190610cb0565b906114db6105cd565b91611997565b1590565b6114ee57600090565b600190565b61159461157b61154173ffffffffffffffffffffffffffffffffffffffff937f19457468657265756d205369676e6564204d6573736167653a0a333200000000600052601c52603c60002090565b6115756104f161156a60005473ffffffffffffffffffffffffffffffffffffffff9060101c1690565b966060810190610cb0565b906115a0565b73ffffffffffffffffffffffffffffffffffffffff1690565b9116036114ee57600090565b610ee1916115ad91611777565b9190916115ee565b600511156115bf57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6115f7816115b5565b806115ff5750565b611608816115b5565b6001810361166f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606490fd5b611678816115b5565b600281036116df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606490fd5b806116eb6003926115b5565b146116f257565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608490fd5b9060418151146000146117a5576117a1916020820151906060604084015193015160001a906117bb565b9091565b5050600090600290565b6040513d6000823e3d90fd5b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083116118435791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa1561183e57815173ffffffffffffffffffffffffffffffffffffffff811615611838579190565b50600190565b6117af565b50505050600090600390565b60406005549101351461186157600190565b600090565b90604051916020830152602082526040820182811067ffffffffffffffff82111761018c57604052565b906118a360209282815194859201610273565b0190565b6101fb9193929360405194859183516118c881602096878088019101610273565b83016118dc82518093878085019101610273565b016118ef82518093868085019101610273565b010380855201836101ad565b60406101fb919392938151948161191c879351809260208087019101610273565b82019060208201520360208101855201836101ad565b1561193957565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4b6579206e6f7420666f756e64000000000000000000000000000000000000006044820152fd5b90815182019060209260c08185850194031261026e5760408101519160608201519360808301519267ffffffffffffffff9384811161026e5782886119de92840101610e9f565b9360a082015181811161026e5783896119f992850101610e9f565b9360c083015191821161026e578894611a2f611a2a611a2460009789611a3597611a41990101610e9f565b93611866565b611bcb565b906118a7565b60405191828092611890565b039060025afa1561183e576000611a5e611a3586938351906118fb565b039060025afa1561183e57610ee193611a8360005194820151151580611a8857611932565b611c7d565b611932565b611a9a6020820182610cb0565b9081604051918237206040805192602084019281358452828501520135606083015260608252608082019082821067ffffffffffffffff83111761018c5781604052825190209160a081019283523060c082015260e04691015260608152611b0181610191565b51902090565b60405190611b1482610170565b604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392d5f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b908160031b9180830460081490151715610d3e57565b90611b86826101fd565b611b9360405191826101ad565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0611bc182946101fd565b0190602036910137565b805115611c7457611bda611b07565b611c00611bf1611bea8451611b66565b6006900490565b835160069006611c6657611b7c565b91602083019181805101925b838310611c1a575050505090565b6004906003809401938451600190603f9082828260121c16880101518553828282600c1c16880101518386015382828260061c1688010151600286015316850101519082015301611c0c565b611c6f906112c8565b611b7c565b50610ee1610d43565b92919080158015611e98575b8015611e6e575b8015611e44575b611e3b57610ee193611e30611caa612015565b91611cb36101ee565b600081526000602082015260006040820152835260208151910151611cd66101ee565b918252602082015260016040820152611cf560208401918083526120a4565b90611e21611d0b6040860193808552835161205a565b9260608601938452611e11611e01611d216101ee565b7f6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c29681527f4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5602082015260016040820152611d8460808a019180835287519061205a565b60a08a0152611d96815185519061205a565b60c08a0152611da8815188519061205a565b60e08a0152611db781516120a4565b90611dcc6101008b019280845288519061205a565b6101208b0152611ddf825186519061205a565b6101408b0152611df2825189519061205a565b6101608b01525190519061205a565b610180880194818652519061205a565b6101a0870152825190519061205a565b6101c08501525190519061205a565b6101e0820152611ea0565b50505050600090565b507fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551821015611c97565b507fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551811015611c90565b508115611c89565b939290917fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255190818410801590611fb0575b611fa657611edf829161236e565b809309918309600080918193608091825b611f0857505050611f03939495506120c4565b501490565b85611f84575b888160fe1c600c8460fc1c161780611f3b575b5050611f3490600292831b921b92611fcb565b9182611ef0565b611f779397611f34976040611f6e611f5685879b989b611fba565b5151946020611f658289611fba565b51015196611fba565b5101519461219b565b9590945090928838611f21565b9294611f959194611f9b93966122b8565b916122b8565b949193909392611f0e565b5060009450505050565b5081811015611ed1565b9060108110156113385760051b0190565b8015610d3e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b6040519061200382610170565b60006040838281528260208201520152565b6040519061020080830183811067ffffffffffffffff82111761018c576040528260005b82811061204557505050565b602090612050611ff6565b8184015201612039565b61208791612066611ff6565b5081519160406020820151910151825191604060208501519401519461219b565b906040519261209584610170565b83526020830152604082015290565b612087906120b0611ff6565b5080519060406020820151910151916122b8565b929190811561218f578160007fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8481809611612185575b505060405191602083526020808401526020604084015260608301527fffffffff00000001000000000000000000000000fffffffffffffffffffffffd60808301528360a083015260208260c08160057ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa1561013e575082905181808280098097099509900990565b06915083386120fb565b50509050600090600090565b9395939190816121ad57505050929190565b909291949586156122ae577fffffffff00000001000000000000000000000000ffffffffffffffffffffffff9586858196958280838199099b818d999781868180808f9d888009809d099c8d99099c81878d0990099c0990099308958181106122a7575b03958280808960020980099281808481878d09938181106122a0575b036002099481868009980996828089600209830890818110612299575b039b8c936002090994818110612292575b03900997828910612289575b859182910892800995828710612280575b960394030990565b95840195612278565b97850197612267565b830161225b565b830161224a565b820161222d565b8301612211565b5094505091929190565b9290917fffffffff00000001000000000000000000000000ffffffffffffffffffffffff809181858009958280808080808c87096004099a800960080992818080808089800980097fffffffff00000001000000000000000000000000fffffffffffffffffffffffc0992800960030908818960020982828009818110612367575b038981809b10612360575b039009818110612359575b03940960020990565b8301612350565b8301612345565b830161233a565b7fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255180821161240f575b60405191602083526020808401526020604084015260608301527fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254f608083015260a082015260208160c08160057ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa1561026e575190565b8091069061239756fea164736f6c6343000813000a","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0xC1 JUMPI PUSH1 0x0 SLOAD SWAP1 PUSH1 0xFF DUP3 PUSH1 0x8 SHR AND PUSH2 0x6F JUMPI POP PUSH1 0xFF DUP1 DUP3 AND SUB PUSH2 0x34 JUMPI JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2425 SWAP1 DUP2 PUSH2 0xC7 DUP3 CODECOPY RETURN JUMPDEST PUSH1 0xFF SWAP1 DUP2 NOT AND OR PUSH1 0x0 SSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0xFF DUP2 MSTORE LOG1 CODESIZE PUSH2 0x25 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x616C697A696E67 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x1B JUMPI JUMPDEST CALLDATASIZE ISZERO PUSH2 0x19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x759A68C0 EQ PUSH2 0x8E JUMPI POP DUP1 PUSH4 0x8FB41072 EQ PUSH2 0x89 JUMPI DUP1 PUSH4 0xB627E20F EQ PUSH2 0x84 JUMPI DUP1 PUSH4 0xBE9EF843 EQ PUSH2 0x7F JUMPI DUP1 PUSH4 0xD087D288 EQ PUSH2 0x7A JUMPI DUP1 PUSH4 0xF0F05CEF EQ PUSH2 0x75 JUMPI PUSH4 0xFD5C8D72 SUB PUSH2 0xE JUMPI PUSH2 0x55A JUMP JUMPDEST PUSH2 0x475 JUMP JUMPDEST PUSH2 0x3E9 JUMP JUMPDEST PUSH2 0x3A8 JUMP JUMPDEST PUSH2 0x353 JUMP JUMPDEST PUSH2 0x296 JUMP JUMPDEST CALLVALUE PUSH2 0x13E JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC PUSH1 0x20 DUP2 CALLDATASIZE ADD SLT PUSH2 0x132 JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP2 DUP3 DUP3 GT PUSH2 0x13A JUMPI PUSH1 0x60 SWAP1 DUP3 CALLDATASIZE SUB ADD SLT PUSH2 0x136 JUMPI PUSH2 0xE8 PUSH1 0xE0 PUSH1 0x40 MSTORE JUMP JUMPDEST DUP1 PUSH1 0x4 ADD CALLDATALOAD PUSH1 0x80 MSTORE PUSH1 0x24 DUP2 ADD CALLDATALOAD PUSH1 0xA0 MSTORE PUSH1 0x44 DUP2 ADD CALLDATALOAD SWAP2 DUP3 GT PUSH2 0x136 JUMPI ADD CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x132 JUMPI PUSH2 0x124 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x24 PUSH1 0x4 DUP3 ADD CALLDATALOAD SWAP2 ADD PUSH2 0x237 JUMP JUMPDEST PUSH1 0xC0 MSTORE PUSH2 0x12F PUSH2 0x6D1 JUMP JUMPDEST DUP1 RETURN JUMPDEST POP DUP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x18C JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x141 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x18C JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x18C JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1FB DUP3 PUSH2 0x170 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x18C JUMPI PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH2 0x243 DUP3 PUSH2 0x1FD JUMP JUMPDEST SWAP2 PUSH2 0x251 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x1AD JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x26E JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x286 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x276 JUMP JUMPDEST CALLVALUE PUSH2 0x26E JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x26E JUMPI PUSH1 0x60 PUSH1 0x40 DUP1 MLOAD PUSH2 0x2D4 DUP2 PUSH2 0x170 JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x40 PUSH1 0xA0 PUSH2 0x2ED PUSH2 0x5CD JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 MLOAD SWAP5 DUP6 SWAP4 PUSH1 0x20 DUP6 MSTORE DUP1 MLOAD PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x20 DUP2 ADD MLOAD DUP3 DUP7 ADD MSTORE ADD MLOAD PUSH1 0x60 DUP1 DUP6 ADD MSTORE PUSH2 0x34A DUP2 MLOAD DUP1 SWAP3 DUP2 PUSH1 0x80 DUP9 ADD MSTORE PUSH1 0x20 DUP9 DUP9 ADD SWAP2 ADD PUSH2 0x273 JUMP JUMPDEST ADD AND DUP2 ADD SUB ADD SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x26E JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x26E JUMPI PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x0 SLOAD PUSH1 0x10 SHR AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x26E JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x26E JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0x4 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x26E JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x26E JUMPI PUSH1 0x20 PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC SWAP1 PUSH1 0x20 DUP3 DUP3 ADD SLT PUSH2 0x26E JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x26E JUMPI DUP3 PUSH1 0x80 SWAP3 SUB ADD SLT PUSH2 0x26E JUMPI PUSH1 0x4 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x26E JUMPI PUSH2 0x483 CALLDATASIZE PUSH2 0x425 JUMP JUMPDEST PUSH2 0x495 PUSH2 0x48F DUP3 PUSH2 0x14A6 JUMP JUMPDEST ISZERO PUSH2 0xB9A JUMP JUMPDEST PUSH2 0x4A7 PUSH2 0x4A1 DUP3 PUSH2 0x184F JUMP JUMPDEST ISZERO PUSH2 0xC25 JUMP JUMPDEST PUSH1 0x3 DUP2 CALLDATALOAD DUP1 ISZERO PUSH2 0x53D JUMPI JUMPDEST PUSH1 0x1 DUP2 EQ PUSH2 0x520 JUMPI JUMPDEST PUSH1 0x2 DUP2 EQ PUSH2 0x503 JUMPI JUMPDEST EQ PUSH2 0x4DD JUMPI JUMPDEST PUSH2 0x19 PUSH2 0x4D8 PUSH1 0x5 SLOAD PUSH2 0xD30 JUMP JUMPDEST PUSH1 0x5 SSTORE JUMP JUMPDEST PUSH2 0x4F8 PUSH2 0x4F1 DUP3 PUSH1 0x20 PUSH2 0x4FD SWAP5 ADD SWAP1 PUSH2 0xCB0 JUMP JUMPDEST CALLDATASIZE SWAP2 PUSH2 0x237 JUMP JUMPDEST PUSH2 0xEE4 JUMP JUMPDEST CODESIZE PUSH2 0x4CA JUMP JUMPDEST PUSH2 0x51B PUSH2 0x516 PUSH2 0x4F1 PUSH1 0x20 DUP7 ADD DUP7 PUSH2 0xCB0 JUMP JUMPDEST PUSH2 0xD67 JUMP JUMPDEST PUSH2 0x4C4 JUMP JUMPDEST PUSH2 0x538 PUSH2 0x533 PUSH2 0x4F1 PUSH1 0x20 DUP7 ADD DUP7 PUSH2 0xCB0 JUMP JUMPDEST PUSH2 0x133D JUMP JUMPDEST PUSH2 0x4BB JUMP JUMPDEST PUSH2 0x555 PUSH2 0x550 PUSH2 0x4F1 PUSH1 0x20 DUP7 ADD DUP7 PUSH2 0xCB0 JUMP JUMPDEST PUSH2 0x104C JUMP JUMPDEST PUSH2 0x4B2 JUMP JUMPDEST CALLVALUE PUSH2 0x26E JUMPI PUSH1 0x20 PUSH2 0x572 PUSH2 0x56D CALLDATASIZE PUSH2 0x425 JUMP JUMPDEST PUSH2 0x1A8D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x5C3 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x594 JUMPI JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x589 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x5DA DUP3 PUSH2 0x170 JUMP JUMPDEST DUP2 PUSH1 0x1 SWAP1 DUP2 SLOAD DUP2 MSTORE PUSH1 0x2 SLOAD PUSH1 0x20 SWAP1 DUP2 DUP4 ADD MSTORE PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x3 SLOAD SWAP1 PUSH2 0x602 DUP3 PUSH2 0x57A JUMP JUMPDEST DUP1 DUP7 MSTORE SWAP2 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x694 JUMPI POP PUSH1 0x1 EQ PUSH2 0x62F JUMPI JUMPDEST POP POP POP PUSH1 0x40 SWAP3 SWAP2 PUSH2 0x62B SWAP2 SUB DUP5 PUSH2 0x1AD JUMP JUMPDEST ADD MSTORE JUMP JUMPDEST SWAP1 SWAP5 SWAP4 SWAP3 POP PUSH1 0x3 PUSH1 0x0 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B SWAP5 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x67C JUMPI POP SWAP4 SWAP5 POP SWAP2 SWAP3 POP SWAP1 DUP3 ADD ADD DUP2 PUSH2 0x62B PUSH1 0x40 PUSH2 0x619 JUMP JUMPDEST DUP7 SLOAD DUP9 DUP5 ADD DUP6 ADD MSTORE SWAP6 DUP7 ADD SWAP6 DUP8 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x65F JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP5 DUP8 ADD MSTORE POP POP ISZERO ISZERO PUSH1 0x5 SHL DUP4 ADD ADD SWAP1 POP DUP2 PUSH2 0x62B PUSH1 0x40 PUSH2 0x619 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF DUP2 PUSH1 0x8 SHR AND ISZERO DUP1 SWAP2 DUP2 SWAP3 PUSH2 0x86C JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x84C JUMPI JUMPDEST POP ISZERO PUSH2 0x7C8 JUMPI DUP1 PUSH2 0x723 PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 PUSH1 0x0 SLOAD AND OR PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH2 0x792 JUMPI JUMPDEST PUSH2 0x730 PUSH2 0x87A JUMP JUMPDEST PUSH2 0x736 JUMPI JUMP JUMPDEST PUSH2 0x763 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF PUSH1 0x0 SLOAD AND PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 SWAP1 LOG1 JUMP JUMPDEST PUSH2 0x7C3 PUSH2 0x100 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF PUSH1 0x0 SLOAD AND OR PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH2 0x728 JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST ADDRESS EXTCODESIZE ISZERO SWAP2 POP DUP2 PUSH2 0x85E JUMPI JUMPDEST POP CODESIZE PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x1 SWAP2 POP PUSH1 0xFF AND EQ CODESIZE PUSH2 0x857 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFF DUP3 AND LT SWAP2 POP PUSH2 0x6E5 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 PUSH1 0x4 SLOAD AND OR PUSH1 0x4 SSTORE PUSH1 0x80 MLOAD DUP2 SSTORE PUSH1 0xA0 MLOAD PUSH1 0x2 SSTORE PUSH1 0xC0 MLOAD SWAP1 DUP2 MLOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x18C JUMPI PUSH2 0x8DB DUP4 PUSH2 0x8D6 PUSH1 0x3 SLOAD PUSH2 0x57A JUMP JUMPDEST PUSH2 0xA1A JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 PUSH1 0x1F DUP6 GT PUSH1 0x1 EQ PUSH2 0x954 JUMPI POP PUSH1 0x0 SWAP2 DUP5 SWAP2 DUP3 PUSH2 0x929 JUMPI JUMPDEST POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP3 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x3 SSTORE JUMP JUMPDEST ADD MLOAD SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF CODESIZE PUSH2 0x8F6 JUMP JUMPDEST SWAP2 SWAP1 DUP5 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 SWAP6 SWAP7 AND PUSH2 0x9A8 PUSH1 0x3 PUSH1 0x0 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B SWAP1 JUMP JUMPDEST SWAP5 PUSH1 0x0 SWAP1 JUMPDEST DUP9 DUP4 DUP4 LT PUSH2 0xA00 JUMPI POP POP POP LT PUSH2 0x9C9 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x3 SSTORE JUMP JUMPDEST ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x9BE JUMP JUMPDEST DUP6 DUP8 ADD MLOAD DUP9 SSTORE SWAP1 SWAP7 ADD SWAP6 SWAP5 DUP6 ADD SWAP5 DUP8 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH2 0x9AD JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0xA26 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH1 0x3 DUP3 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B SWAP1 PUSH1 0x20 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP4 ADD SWAP5 LT PUSH2 0xA81 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0xA76 JUMPI POP POP POP JUMP JUMPDEST DUP2 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xA6A JUMP JUMPDEST SWAP1 SWAP3 POP DUP3 SWAP1 PUSH2 0xA61 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 SWAP1 DUP2 SSTORE PUSH1 0x40 PUSH1 0x20 SWAP3 DUP4 DUP2 ADD MLOAD PUSH1 0x2 SSTORE ADD MLOAD SWAP2 DUP3 MLOAD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT PUSH2 0x18C JUMPI PUSH2 0xAC2 DUP5 PUSH2 0x8D6 PUSH1 0x3 SLOAD PUSH2 0x57A JUMP JUMPDEST DUP2 PUSH1 0x1F DUP6 GT PUSH1 0x1 EQ PUSH2 0xB0C JUMPI POP PUSH1 0x0 SWAP2 DUP5 SWAP2 DUP3 PUSH2 0x929 JUMPI POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP3 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x3 SSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP5 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 SWAP6 SWAP7 AND PUSH2 0xB60 PUSH1 0x3 PUSH1 0x0 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B SWAP1 JUMP JUMPDEST SWAP5 PUSH1 0x0 SWAP1 JUMPDEST DUP9 DUP4 DUP4 LT PUSH2 0xB80 JUMPI POP POP POP LT PUSH2 0x9C9 JUMPI POP POP POP DUP2 SHL ADD PUSH1 0x3 SSTORE JUMP JUMPDEST DUP6 DUP8 ADD MLOAD DUP9 SSTORE SWAP1 SWAP7 ADD SWAP6 SWAP5 DUP6 ADD SWAP5 DUP8 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH2 0xB65 JUMP JUMPDEST ISZERO PUSH2 0xBA1 JUMPI JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4163636F756E743A205369676E617475726520766572696669636174696F6E20 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6661696C65640000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST ISZERO PUSH2 0xC2C JUMPI JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4163636F756E743A204E6F6E636520766572696669636174696F6E206661696C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6564000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 CALLDATALOAD SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x26E JUMPI ADD DUP1 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x26E JUMPI PUSH1 0x20 ADD SWAP2 DUP2 CALLDATASIZE SUB DUP4 SGT PUSH2 0x26E JUMPI JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xD3E JUMPI JUMP JUMPDEST PUSH2 0xD01 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x18C JUMPI PUSH1 0x40 MSTORE PUSH1 0x0 DUP3 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFF PUSH1 0x4 SLOAD AND ISZERO ISZERO SUB PUSH2 0xE1B JUMPI PUSH1 0x14 PUSH2 0xDEE SWAP2 ADD MLOAD PUSH2 0xDA6 PUSH2 0xD89 PUSH2 0x1EE JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xD9C PUSH2 0xD43 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0xA8B JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000FFFF PUSH22 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000 PUSH1 0x0 SLOAD SWAP3 PUSH1 0x10 SHL AND SWAP2 AND OR PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH2 0x1FB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 PUSH1 0x4 SLOAD AND PUSH1 0x4 SSTORE JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4163636F756E743A20416C72656164792061646472657373206F776E65722065 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E61626C65640000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x26E JUMPI DUP1 MLOAD PUSH2 0xEB5 DUP2 PUSH2 0x1FD JUMP JUMPDEST SWAP3 PUSH2 0xEC3 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x1AD JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 DUP3 DUP5 ADD ADD GT PUSH2 0x26E JUMPI PUSH2 0xEE1 SWAP2 PUSH1 0x20 DUP1 DUP6 ADD SWAP2 ADD PUSH2 0x273 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x4 SLOAD AND PUSH2 0xFAA JUMPI DUP1 MLOAD DUP2 ADD SWAP1 PUSH1 0x60 DUP2 DUP4 SUB SLT PUSH2 0x26E JUMPI PUSH1 0x20 DUP2 ADD MLOAD SWAP1 PUSH1 0x40 DUP2 ADD MLOAD SWAP1 PUSH1 0x60 DUP2 ADD MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x26E JUMPI PUSH1 0x20 PUSH2 0xF32 SWAP3 DUP2 PUSH2 0xF7A SWAP8 ADD SWAP3 ADD ADD PUSH2 0xE9F JUMP JUMPDEST SWAP1 PUSH2 0xF3B PUSH2 0x1EE JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0xF75 PUSH32 0xFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000FFFF PUSH1 0x0 SLOAD AND PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH2 0xA8B JUMP JUMPDEST PUSH2 0x1FB PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 PUSH1 0x4 SLOAD AND OR PUSH1 0x4 SSTORE JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4163636F756E743A20416C726561647920706173736B6579206F776E65722065 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E61626C65640000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND SUB PUSH2 0x26E JUMPI JUMP JUMPDEST DUP1 MLOAD DUP2 ADD PUSH1 0x60 DUP3 DUP3 SUB SLT PUSH2 0x26E JUMPI PUSH1 0x20 DUP3 ADD MLOAD SWAP1 PUSH2 0x1069 DUP3 PUSH2 0x102E JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MLOAD SWAP1 PUSH1 0x60 DUP5 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x26E JUMPI PUSH2 0x1FB SWAP5 PUSH1 0x20 PUSH2 0x10AD SWAP3 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 ADD SWAP3 ADD ADD PUSH2 0xE9F JUMP JUMPDEST SWAP3 AND PUSH2 0x1486 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x18C JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x26E JUMPI DUP1 MLOAD SWAP2 PUSH2 0x10E3 DUP4 PUSH2 0x10B4 JUMP JUMPDEST SWAP3 PUSH2 0x10F1 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x1AD JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 SWAP3 DUP4 DUP1 DUP7 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x26E JUMPI DUP4 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x111B JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP2 MLOAD DUP2 MSTORE SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0x110D JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x26E JUMPI DUP2 MLOAD SWAP1 PUSH2 0x1142 DUP3 PUSH2 0x10B4 JUMP JUMPDEST SWAP3 PUSH2 0x1150 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x1AD JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 SWAP3 DUP4 DUP1 DUP7 ADD SWAP2 PUSH1 0x5 SHL DUP4 ADD ADD SWAP3 DUP1 DUP5 GT PUSH2 0x26E JUMPI DUP5 DUP4 ADD SWAP2 JUMPDEST DUP5 DUP4 LT PUSH2 0x117E JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x26E JUMPI DUP7 SWAP2 PUSH2 0x11A0 DUP5 DUP5 DUP1 SWAP5 DUP10 ADD ADD PUSH2 0xE9F JUMP JUMPDEST DUP2 MSTORE ADD SWAP3 ADD SWAP2 PUSH2 0x116E JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x60 DUP3 DUP5 SUB SLT PUSH2 0x26E JUMPI DUP2 MLOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP2 GT PUSH2 0x26E JUMPI DUP2 ADD SWAP4 DUP1 PUSH1 0x1F DUP7 ADD SLT ISZERO PUSH2 0x26E JUMPI DUP5 MLOAD PUSH2 0x11E4 DUP2 PUSH2 0x10B4 JUMP JUMPDEST SWAP1 PUSH2 0x11F2 PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x1AD JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH1 0x20 SWAP7 DUP8 DUP1 DUP5 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP2 DUP5 DUP4 GT PUSH2 0x26E JUMPI DUP9 DUP1 SWAP3 ADD SWAP1 JUMPDEST DUP4 DUP3 LT PUSH2 0x124A JUMPI POP POP POP POP SWAP5 DUP3 ADD MLOAD DUP5 DUP2 GT PUSH2 0x26E JUMPI DUP2 PUSH2 0x1233 SWAP2 DUP5 ADD PUSH2 0x10CC JUMP JUMPDEST SWAP4 PUSH1 0x40 DUP4 ADD MLOAD SWAP1 DUP2 GT PUSH2 0x26E JUMPI PUSH2 0xEE1 SWAP3 ADD PUSH2 0x112A JUMP JUMPDEST DUP3 DUP1 SWAP2 DUP4 MLOAD PUSH2 0x1258 DUP2 PUSH2 0x102E JUMP JUMPDEST DUP2 MSTORE ADD SWAP2 ADD SWAP1 PUSH2 0x1211 JUMP JUMPDEST ISZERO PUSH2 0x126A JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x77726F6E67206172726179206C656E6774687300000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0xD3E JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x1338 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x12F5 JUMP JUMPDEST PUSH2 0x1350 SWAP1 PUSH1 0x20 DUP1 DUP3 MLOAD DUP4 ADD ADD SWAP2 ADD PUSH2 0x11AB JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x136A DUP3 MLOAD DUP6 MLOAD DUP1 SWAP2 EQ SWAP1 DUP2 PUSH2 0x1416 JUMPI JUMPDEST POP PUSH2 0x1263 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x13CC JUMPI POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x13C6 JUMPI DUP1 PUSH2 0x13BC PUSH2 0x13AB PUSH2 0x1391 PUSH2 0x13C1 SWAP5 DUP7 PUSH2 0x1324 JUMP JUMPDEST MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x13B5 DUP4 DUP9 PUSH2 0x1324 JUMP JUMPDEST MLOAD SWAP1 PUSH2 0x1435 JUMP JUMPDEST PUSH2 0x12C8 JUMP JUMPDEST PUSH2 0x1374 JUMP JUMPDEST POP POP SWAP1 POP JUMP JUMPDEST SWAP3 SWAP1 PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x140F JUMPI DUP1 PUSH2 0x13BC PUSH2 0x13EE PUSH2 0x1391 PUSH2 0x140A SWAP5 DUP7 PUSH2 0x1324 JUMP JUMPDEST PUSH2 0x13F8 DUP4 DUP10 PUSH2 0x1324 JUMP JUMPDEST MLOAD PUSH2 0x1403 DUP5 DUP9 PUSH2 0x1324 JUMP JUMPDEST MLOAD SWAP2 PUSH2 0x1486 JUMP JUMPDEST PUSH2 0x13D1 JUMP JUMPDEST POP POP POP SWAP1 POP JUMP JUMPDEST DUP4 MLOAD DUP1 ISZERO SWAP3 POP DUP3 ISZERO PUSH2 0x142B JUMPI JUMPDEST POP POP CODESIZE PUSH2 0x1364 JUMP JUMPDEST EQ SWAP1 POP CODESIZE DUP1 PUSH2 0x1423 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP3 PUSH1 0x20 DUP4 MLOAD SWAP4 ADD SWAP2 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x147E JUMPI RETURNDATASIZE SWAP1 PUSH2 0x1455 DUP3 PUSH2 0x1FD JUMP JUMPDEST SWAP2 PUSH2 0x1463 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x1AD JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST ISZERO PUSH2 0x1476 JUMPI POP JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD REVERT JUMPDEST PUSH1 0x60 SWAP1 PUSH2 0x146E JUMP JUMPDEST SWAP2 PUSH1 0x0 SWAP3 DUP4 SWAP3 PUSH1 0x20 DUP4 MLOAD SWAP4 ADD SWAP2 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x147E JUMPI RETURNDATASIZE SWAP1 PUSH2 0x1455 DUP3 PUSH2 0x1FD JUMP JUMPDEST PUSH2 0x14AF DUP2 PUSH2 0x1A8D JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x14F3 JUMPI PUSH2 0x14E1 SWAP1 PUSH2 0x14D2 PUSH2 0x4F1 DUP5 PUSH1 0x60 PUSH2 0x14E5 SWAP7 ADD SWAP1 PUSH2 0xCB0 JUMP JUMPDEST SWAP1 PUSH2 0x14DB PUSH2 0x5CD JUMP JUMPDEST SWAP2 PUSH2 0x1997 JUMP JUMPDEST ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x14EE JUMPI PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x1594 PUSH2 0x157B PUSH2 0x1541 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x0 MSTORE PUSH1 0x1C MSTORE PUSH1 0x3C PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x1575 PUSH2 0x4F1 PUSH2 0x156A PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 PUSH1 0x10 SHR AND SWAP1 JUMP JUMPDEST SWAP7 PUSH1 0x60 DUP2 ADD SWAP1 PUSH2 0xCB0 JUMP JUMPDEST SWAP1 PUSH2 0x15A0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP2 AND SUB PUSH2 0x14EE JUMPI PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0xEE1 SWAP2 PUSH2 0x15AD SWAP2 PUSH2 0x1777 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x15EE JUMP JUMPDEST PUSH1 0x5 GT ISZERO PUSH2 0x15BF JUMPI JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x15F7 DUP2 PUSH2 0x15B5 JUMP JUMPDEST DUP1 PUSH2 0x15FF JUMPI POP JUMP JUMPDEST PUSH2 0x1608 DUP2 PUSH2 0x15B5 JUMP JUMPDEST PUSH1 0x1 DUP2 SUB PUSH2 0x166F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0x1678 DUP2 PUSH2 0x15B5 JUMP JUMPDEST PUSH1 0x2 DUP2 SUB PUSH2 0x16DF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP1 PUSH2 0x16EB PUSH1 0x3 SWAP3 PUSH2 0x15B5 JUMP JUMPDEST EQ PUSH2 0x16F2 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 PUSH1 0x41 DUP2 MLOAD EQ PUSH1 0x0 EQ PUSH2 0x17A5 JUMPI PUSH2 0x17A1 SWAP2 PUSH1 0x20 DUP3 ADD MLOAD SWAP1 PUSH1 0x60 PUSH1 0x40 DUP5 ADD MLOAD SWAP4 ADD MLOAD PUSH1 0x0 BYTE SWAP1 PUSH2 0x17BB JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP1 PUSH1 0x2 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP3 SWAP2 SWAP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT PUSH2 0x1843 JUMPI SWAP2 PUSH1 0x80 SWAP5 SWAP4 SWAP2 PUSH1 0xFF PUSH1 0x20 SWAP5 PUSH1 0x40 MLOAD SWAP5 DUP6 MSTORE AND DUP5 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 SWAP4 DUP5 SWAP2 DUP3 DUP1 MSTORE PUSH1 0x1 GAS STATICCALL ISZERO PUSH2 0x183E JUMPI DUP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0x1838 JUMPI SWAP2 SWAP1 JUMP JUMPDEST POP PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x17AF JUMP JUMPDEST POP POP POP POP PUSH1 0x0 SWAP1 PUSH1 0x3 SWAP1 JUMP JUMPDEST PUSH1 0x40 PUSH1 0x5 SLOAD SWAP2 ADD CALLDATALOAD EQ PUSH2 0x1861 JUMPI PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x20 DUP3 MSTORE PUSH1 0x40 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x18C JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH2 0x18A3 PUSH1 0x20 SWAP3 DUP3 DUP2 MLOAD SWAP5 DUP6 SWAP3 ADD PUSH2 0x273 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1FB SWAP2 SWAP4 SWAP3 SWAP4 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP2 DUP4 MLOAD PUSH2 0x18C8 DUP2 PUSH1 0x20 SWAP7 DUP8 DUP1 DUP9 ADD SWAP2 ADD PUSH2 0x273 JUMP JUMPDEST DUP4 ADD PUSH2 0x18DC DUP3 MLOAD DUP1 SWAP4 DUP8 DUP1 DUP6 ADD SWAP2 ADD PUSH2 0x273 JUMP JUMPDEST ADD PUSH2 0x18EF DUP3 MLOAD DUP1 SWAP4 DUP7 DUP1 DUP6 ADD SWAP2 ADD PUSH2 0x273 JUMP JUMPDEST ADD SUB DUP1 DUP6 MSTORE ADD DUP4 PUSH2 0x1AD JUMP JUMPDEST PUSH1 0x40 PUSH2 0x1FB SWAP2 SWAP4 SWAP3 SWAP4 DUP2 MLOAD SWAP5 DUP2 PUSH2 0x191C DUP8 SWAP4 MLOAD DUP1 SWAP3 PUSH1 0x20 DUP1 DUP8 ADD SWAP2 ADD PUSH2 0x273 JUMP JUMPDEST DUP3 ADD SWAP1 PUSH1 0x20 DUP3 ADD MSTORE SUB PUSH1 0x20 DUP2 ADD DUP6 MSTORE ADD DUP4 PUSH2 0x1AD JUMP JUMPDEST ISZERO PUSH2 0x1939 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4B6579206E6F7420666F756E6400000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 DUP2 MLOAD DUP3 ADD SWAP1 PUSH1 0x20 SWAP3 PUSH1 0xC0 DUP2 DUP6 DUP6 ADD SWAP5 SUB SLT PUSH2 0x26E JUMPI PUSH1 0x40 DUP2 ADD MLOAD SWAP2 PUSH1 0x60 DUP3 ADD MLOAD SWAP4 PUSH1 0x80 DUP4 ADD MLOAD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF SWAP4 DUP5 DUP2 GT PUSH2 0x26E JUMPI DUP3 DUP9 PUSH2 0x19DE SWAP3 DUP5 ADD ADD PUSH2 0xE9F JUMP JUMPDEST SWAP4 PUSH1 0xA0 DUP3 ADD MLOAD DUP2 DUP2 GT PUSH2 0x26E JUMPI DUP4 DUP10 PUSH2 0x19F9 SWAP3 DUP6 ADD ADD PUSH2 0xE9F JUMP JUMPDEST SWAP4 PUSH1 0xC0 DUP4 ADD MLOAD SWAP2 DUP3 GT PUSH2 0x26E JUMPI DUP9 SWAP5 PUSH2 0x1A2F PUSH2 0x1A2A PUSH2 0x1A24 PUSH1 0x0 SWAP8 DUP10 PUSH2 0x1A35 SWAP8 PUSH2 0x1A41 SWAP10 ADD ADD PUSH2 0xE9F JUMP JUMPDEST SWAP4 PUSH2 0x1866 JUMP JUMPDEST PUSH2 0x1BCB JUMP JUMPDEST SWAP1 PUSH2 0x18A7 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 DUP1 SWAP3 PUSH2 0x1890 JUMP JUMPDEST SUB SWAP1 PUSH1 0x2 GAS STATICCALL ISZERO PUSH2 0x183E JUMPI PUSH1 0x0 PUSH2 0x1A5E PUSH2 0x1A35 DUP7 SWAP4 DUP4 MLOAD SWAP1 PUSH2 0x18FB JUMP JUMPDEST SUB SWAP1 PUSH1 0x2 GAS STATICCALL ISZERO PUSH2 0x183E JUMPI PUSH2 0xEE1 SWAP4 PUSH2 0x1A83 PUSH1 0x0 MLOAD SWAP5 DUP3 ADD MLOAD ISZERO ISZERO DUP1 PUSH2 0x1A88 JUMPI PUSH2 0x1932 JUMP JUMPDEST PUSH2 0x1C7D JUMP JUMPDEST PUSH2 0x1932 JUMP JUMPDEST PUSH2 0x1A9A PUSH1 0x20 DUP3 ADD DUP3 PUSH2 0xCB0 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x40 MLOAD SWAP2 DUP3 CALLDATACOPY KECCAK256 PUSH1 0x40 DUP1 MLOAD SWAP3 PUSH1 0x20 DUP5 ADD SWAP3 DUP2 CALLDATALOAD DUP5 MSTORE DUP3 DUP6 ADD MSTORE ADD CALLDATALOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x60 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 DUP3 DUP3 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT OR PUSH2 0x18C JUMPI DUP2 PUSH1 0x40 MSTORE DUP3 MLOAD SWAP1 KECCAK256 SWAP2 PUSH1 0xA0 DUP2 ADD SWAP3 DUP4 MSTORE ADDRESS PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 CHAINID SWAP2 ADD MSTORE PUSH1 0x60 DUP2 MSTORE PUSH2 0x1B01 DUP2 PUSH2 0x191 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1B14 DUP3 PUSH2 0x170 JUMP JUMPDEST PUSH1 0x40 DUP3 MSTORE PUSH32 0x6768696A6B6C6D6E6F707172737475767778797A303132333435363738392D5F PUSH1 0x40 DUP4 PUSH32 0x4142434445464748494A4B4C4D4E4F505152535455565758595A616263646566 PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x3 SHL SWAP2 DUP1 DUP4 DIV PUSH1 0x8 EQ SWAP1 ISZERO OR ISZERO PUSH2 0xD3E JUMPI JUMP JUMPDEST SWAP1 PUSH2 0x1B86 DUP3 PUSH2 0x1FD JUMP JUMPDEST PUSH2 0x1B93 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x1AD JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH2 0x1BC1 DUP3 SWAP5 PUSH2 0x1FD JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x1C74 JUMPI PUSH2 0x1BDA PUSH2 0x1B07 JUMP JUMPDEST PUSH2 0x1C00 PUSH2 0x1BF1 PUSH2 0x1BEA DUP5 MLOAD PUSH2 0x1B66 JUMP JUMPDEST PUSH1 0x6 SWAP1 DIV SWAP1 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x6 SWAP1 MOD PUSH2 0x1C66 JUMPI PUSH2 0x1B7C JUMP JUMPDEST SWAP2 PUSH1 0x20 DUP4 ADD SWAP2 DUP2 DUP1 MLOAD ADD SWAP3 JUMPDEST DUP4 DUP4 LT PUSH2 0x1C1A JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x4 SWAP1 PUSH1 0x3 DUP1 SWAP5 ADD SWAP4 DUP5 MLOAD PUSH1 0x1 SWAP1 PUSH1 0x3F SWAP1 DUP3 DUP3 DUP3 PUSH1 0x12 SHR AND DUP9 ADD ADD MLOAD DUP6 MSTORE8 DUP3 DUP3 DUP3 PUSH1 0xC SHR AND DUP9 ADD ADD MLOAD DUP4 DUP7 ADD MSTORE8 DUP3 DUP3 DUP3 PUSH1 0x6 SHR AND DUP9 ADD ADD MLOAD PUSH1 0x2 DUP7 ADD MSTORE8 AND DUP6 ADD ADD MLOAD SWAP1 DUP3 ADD MSTORE8 ADD PUSH2 0x1C0C JUMP JUMPDEST PUSH2 0x1C6F SWAP1 PUSH2 0x12C8 JUMP JUMPDEST PUSH2 0x1B7C JUMP JUMPDEST POP PUSH2 0xEE1 PUSH2 0xD43 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 DUP1 ISZERO DUP1 ISZERO PUSH2 0x1E98 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x1E6E JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x1E44 JUMPI JUMPDEST PUSH2 0x1E3B JUMPI PUSH2 0xEE1 SWAP4 PUSH2 0x1E30 PUSH2 0x1CAA PUSH2 0x2015 JUMP JUMPDEST SWAP2 PUSH2 0x1CB3 PUSH2 0x1EE JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP3 ADD MSTORE DUP4 MSTORE PUSH1 0x20 DUP2 MLOAD SWAP2 ADD MLOAD PUSH2 0x1CD6 PUSH2 0x1EE JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x1CF5 PUSH1 0x20 DUP5 ADD SWAP2 DUP1 DUP4 MSTORE PUSH2 0x20A4 JUMP JUMPDEST SWAP1 PUSH2 0x1E21 PUSH2 0x1D0B PUSH1 0x40 DUP7 ADD SWAP4 DUP1 DUP6 MSTORE DUP4 MLOAD PUSH2 0x205A JUMP JUMPDEST SWAP3 PUSH1 0x60 DUP7 ADD SWAP4 DUP5 MSTORE PUSH2 0x1E11 PUSH2 0x1E01 PUSH2 0x1D21 PUSH2 0x1EE JUMP JUMPDEST PUSH32 0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296 DUP2 MSTORE PUSH32 0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x1D84 PUSH1 0x80 DUP11 ADD SWAP2 DUP1 DUP4 MSTORE DUP8 MLOAD SWAP1 PUSH2 0x205A JUMP JUMPDEST PUSH1 0xA0 DUP11 ADD MSTORE PUSH2 0x1D96 DUP2 MLOAD DUP6 MLOAD SWAP1 PUSH2 0x205A JUMP JUMPDEST PUSH1 0xC0 DUP11 ADD MSTORE PUSH2 0x1DA8 DUP2 MLOAD DUP9 MLOAD SWAP1 PUSH2 0x205A JUMP JUMPDEST PUSH1 0xE0 DUP11 ADD MSTORE PUSH2 0x1DB7 DUP2 MLOAD PUSH2 0x20A4 JUMP JUMPDEST SWAP1 PUSH2 0x1DCC PUSH2 0x100 DUP12 ADD SWAP3 DUP1 DUP5 MSTORE DUP9 MLOAD SWAP1 PUSH2 0x205A JUMP JUMPDEST PUSH2 0x120 DUP12 ADD MSTORE PUSH2 0x1DDF DUP3 MLOAD DUP7 MLOAD SWAP1 PUSH2 0x205A JUMP JUMPDEST PUSH2 0x140 DUP12 ADD MSTORE PUSH2 0x1DF2 DUP3 MLOAD DUP10 MLOAD SWAP1 PUSH2 0x205A JUMP JUMPDEST PUSH2 0x160 DUP12 ADD MSTORE MLOAD SWAP1 MLOAD SWAP1 PUSH2 0x205A JUMP JUMPDEST PUSH2 0x180 DUP9 ADD SWAP5 DUP2 DUP7 MSTORE MLOAD SWAP1 PUSH2 0x205A JUMP JUMPDEST PUSH2 0x1A0 DUP8 ADD MSTORE DUP3 MLOAD SWAP1 MLOAD SWAP1 PUSH2 0x205A JUMP JUMPDEST PUSH2 0x1C0 DUP6 ADD MSTORE MLOAD SWAP1 MLOAD SWAP1 PUSH2 0x205A JUMP JUMPDEST PUSH2 0x1E0 DUP3 ADD MSTORE PUSH2 0x1EA0 JUMP JUMPDEST POP POP POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551 DUP3 LT ISZERO PUSH2 0x1C97 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551 DUP2 LT ISZERO PUSH2 0x1C90 JUMP JUMPDEST POP DUP2 ISZERO PUSH2 0x1C89 JUMP JUMPDEST SWAP4 SWAP3 SWAP1 SWAP2 PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551 SWAP1 DUP2 DUP5 LT DUP1 ISZERO SWAP1 PUSH2 0x1FB0 JUMPI JUMPDEST PUSH2 0x1FA6 JUMPI PUSH2 0x1EDF DUP3 SWAP2 PUSH2 0x236E JUMP JUMPDEST DUP1 SWAP4 MULMOD SWAP2 DUP4 MULMOD PUSH1 0x0 DUP1 SWAP2 DUP2 SWAP4 PUSH1 0x80 SWAP2 DUP3 JUMPDEST PUSH2 0x1F08 JUMPI POP POP POP PUSH2 0x1F03 SWAP4 SWAP5 SWAP6 POP PUSH2 0x20C4 JUMP JUMPDEST POP EQ SWAP1 JUMP JUMPDEST DUP6 PUSH2 0x1F84 JUMPI JUMPDEST DUP9 DUP2 PUSH1 0xFE SHR PUSH1 0xC DUP5 PUSH1 0xFC SHR AND OR DUP1 PUSH2 0x1F3B JUMPI JUMPDEST POP POP PUSH2 0x1F34 SWAP1 PUSH1 0x2 SWAP3 DUP4 SHL SWAP3 SHL SWAP3 PUSH2 0x1FCB JUMP JUMPDEST SWAP2 DUP3 PUSH2 0x1EF0 JUMP JUMPDEST PUSH2 0x1F77 SWAP4 SWAP8 PUSH2 0x1F34 SWAP8 PUSH1 0x40 PUSH2 0x1F6E PUSH2 0x1F56 DUP6 DUP8 SWAP12 SWAP9 SWAP12 PUSH2 0x1FBA JUMP JUMPDEST MLOAD MLOAD SWAP5 PUSH1 0x20 PUSH2 0x1F65 DUP3 DUP10 PUSH2 0x1FBA JUMP JUMPDEST MLOAD ADD MLOAD SWAP7 PUSH2 0x1FBA JUMP JUMPDEST MLOAD ADD MLOAD SWAP5 PUSH2 0x219B JUMP JUMPDEST SWAP6 SWAP1 SWAP5 POP SWAP1 SWAP3 DUP9 CODESIZE PUSH2 0x1F21 JUMP JUMPDEST SWAP3 SWAP5 PUSH2 0x1F95 SWAP2 SWAP5 PUSH2 0x1F9B SWAP4 SWAP7 PUSH2 0x22B8 JUMP JUMPDEST SWAP2 PUSH2 0x22B8 JUMP JUMPDEST SWAP5 SWAP2 SWAP4 SWAP1 SWAP4 SWAP3 PUSH2 0x1F0E JUMP JUMPDEST POP PUSH1 0x0 SWAP5 POP POP POP POP JUMP JUMPDEST POP DUP2 DUP2 LT ISZERO PUSH2 0x1ED1 JUMP JUMPDEST SWAP1 PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x1338 JUMPI PUSH1 0x5 SHL ADD SWAP1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xD3E JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x2003 DUP3 PUSH2 0x170 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP4 DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x200 DUP1 DUP4 ADD DUP4 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x18C JUMPI PUSH1 0x40 MSTORE DUP3 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x2045 JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH2 0x2050 PUSH2 0x1FF6 JUMP JUMPDEST DUP2 DUP5 ADD MSTORE ADD PUSH2 0x2039 JUMP JUMPDEST PUSH2 0x2087 SWAP2 PUSH2 0x2066 PUSH2 0x1FF6 JUMP JUMPDEST POP DUP2 MLOAD SWAP2 PUSH1 0x40 PUSH1 0x20 DUP3 ADD MLOAD SWAP2 ADD MLOAD DUP3 MLOAD SWAP2 PUSH1 0x40 PUSH1 0x20 DUP6 ADD MLOAD SWAP5 ADD MLOAD SWAP5 PUSH2 0x219B JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x2095 DUP5 PUSH2 0x170 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x2087 SWAP1 PUSH2 0x20B0 PUSH2 0x1FF6 JUMP JUMPDEST POP DUP1 MLOAD SWAP1 PUSH1 0x40 PUSH1 0x20 DUP3 ADD MLOAD SWAP2 ADD MLOAD SWAP2 PUSH2 0x22B8 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 DUP2 ISZERO PUSH2 0x218F JUMPI DUP2 PUSH1 0x0 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 DUP1 SWAP7 GT PUSH2 0x2185 JUMPI JUMPDEST POP POP PUSH1 0x40 MLOAD SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MSTORE PUSH1 0x20 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFD PUSH1 0x80 DUP4 ADD MSTORE DUP4 PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 PUSH1 0xC0 DUP2 PUSH1 0x5 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF STATICCALL ISZERO PUSH2 0x13E JUMPI POP DUP3 SWAP1 MLOAD DUP2 DUP1 DUP3 DUP1 MULMOD DUP1 SWAP8 MULMOD SWAP6 MULMOD SWAP1 MULMOD SWAP1 JUMP JUMPDEST MOD SWAP2 POP DUP4 CODESIZE PUSH2 0x20FB JUMP JUMPDEST POP POP SWAP1 POP PUSH1 0x0 SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP4 SWAP6 SWAP4 SWAP2 SWAP1 DUP2 PUSH2 0x21AD JUMPI POP POP POP SWAP3 SWAP2 SWAP1 JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP5 SWAP6 DUP7 ISZERO PUSH2 0x22AE JUMPI PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 DUP6 DUP2 SWAP7 SWAP6 DUP3 DUP1 DUP4 DUP2 SWAP10 MULMOD SWAP12 DUP2 DUP14 SWAP10 SWAP8 DUP2 DUP7 DUP2 DUP1 DUP1 DUP16 SWAP14 DUP9 DUP1 MULMOD DUP1 SWAP14 MULMOD SWAP13 DUP14 SWAP10 MULMOD SWAP13 DUP2 DUP8 DUP14 MULMOD SWAP1 MULMOD SWAP13 MULMOD SWAP1 MULMOD SWAP4 ADDMOD SWAP6 DUP2 DUP2 LT PUSH2 0x22A7 JUMPI JUMPDEST SUB SWAP6 DUP3 DUP1 DUP1 DUP10 PUSH1 0x2 MULMOD DUP1 MULMOD SWAP3 DUP2 DUP1 DUP5 DUP2 DUP8 DUP14 MULMOD SWAP4 DUP2 DUP2 LT PUSH2 0x22A0 JUMPI JUMPDEST SUB PUSH1 0x2 MULMOD SWAP5 DUP2 DUP7 DUP1 MULMOD SWAP9 MULMOD SWAP7 DUP3 DUP1 DUP10 PUSH1 0x2 MULMOD DUP4 ADDMOD SWAP1 DUP2 DUP2 LT PUSH2 0x2299 JUMPI JUMPDEST SUB SWAP12 DUP13 SWAP4 PUSH1 0x2 MULMOD MULMOD SWAP5 DUP2 DUP2 LT PUSH2 0x2292 JUMPI JUMPDEST SUB SWAP1 MULMOD SWAP8 DUP3 DUP10 LT PUSH2 0x2289 JUMPI JUMPDEST DUP6 SWAP2 DUP3 SWAP2 ADDMOD SWAP3 DUP1 MULMOD SWAP6 DUP3 DUP8 LT PUSH2 0x2280 JUMPI JUMPDEST SWAP7 SUB SWAP5 SUB MULMOD SWAP1 JUMP JUMPDEST SWAP6 DUP5 ADD SWAP6 PUSH2 0x2278 JUMP JUMPDEST SWAP8 DUP6 ADD SWAP8 PUSH2 0x2267 JUMP JUMPDEST DUP4 ADD PUSH2 0x225B JUMP JUMPDEST DUP4 ADD PUSH2 0x224A JUMP JUMPDEST DUP3 ADD PUSH2 0x222D JUMP JUMPDEST DUP4 ADD PUSH2 0x2211 JUMP JUMPDEST POP SWAP5 POP POP SWAP2 SWAP3 SWAP2 SWAP1 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP2 DUP2 DUP6 DUP1 MULMOD SWAP6 DUP3 DUP1 DUP1 DUP1 DUP1 DUP1 DUP13 DUP8 MULMOD PUSH1 0x4 MULMOD SWAP11 DUP1 MULMOD PUSH1 0x8 MULMOD SWAP3 DUP2 DUP1 DUP1 DUP1 DUP1 DUP10 DUP1 MULMOD DUP1 MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC MULMOD SWAP3 DUP1 MULMOD PUSH1 0x3 MULMOD ADDMOD DUP2 DUP10 PUSH1 0x2 MULMOD DUP3 DUP3 DUP1 MULMOD DUP2 DUP2 LT PUSH2 0x2367 JUMPI JUMPDEST SUB DUP10 DUP2 DUP1 SWAP12 LT PUSH2 0x2360 JUMPI JUMPDEST SUB SWAP1 MULMOD DUP2 DUP2 LT PUSH2 0x2359 JUMPI JUMPDEST SUB SWAP5 MULMOD PUSH1 0x2 MULMOD SWAP1 JUMP JUMPDEST DUP4 ADD PUSH2 0x2350 JUMP JUMPDEST DUP4 ADD PUSH2 0x2345 JUMP JUMPDEST DUP4 ADD PUSH2 0x233A JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551 DUP1 DUP3 GT PUSH2 0x240F JUMPI JUMPDEST PUSH1 0x40 MLOAD SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MSTORE PUSH1 0x20 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC63254F PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0xC0 DUP2 PUSH1 0x5 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF STATICCALL ISZERO PUSH2 0x26E JUMPI MLOAD SWAP1 JUMP JUMPDEST DUP1 SWAP2 MOD SWAP1 PUSH2 0x2397 JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"281:6995:19:-:0;;;;;;;5985:13:6;281:6995:19;;;;;;;;;;;;;;6056:31:6;6052:139;;-1:-1:-1;281:6995:19;;;;;;;;;6052:139:6;281:6995:19;;;;;;5985:13:6;281:6995:19;6152:28:6;281:6995:19;;;;;;6152:28:6;6052:139;;;281:6995:19;-1:-1:-1;;;281:6995:19;;;;;;;;;;;;;;;;;-1:-1:-1;;;281:6995:19;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"abi_decode_array_address_dynt_array_uint256_dynt_array_bytes_dyn_fromMemory":{"entryPoint":4523,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_array_bytes_dyn_fromMemory":{"entryPoint":4394,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_array_uint256_dyn_fromMemory":{"entryPoint":4300,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_available_length_string":{"entryPoint":567,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_string_fromMemory":{"entryPoint":3743,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_struct_UserOp_calldata":{"entryPoint":1061,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_rational_by":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_string":{"entryPoint":6288,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_stringliteral":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_stringliteral_520d":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_stringliteral":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"access_calldata_tail_bytes_calldata":{"entryPoint":3248,"id":null,"parameterSlots":2,"returnSlots":2},"allocate_and_zero_memory_array_array_struct_JPoint":{"entryPoint":8213,"id":null,"parameterSlots":0,"returnSlots":1},"allocate_and_zero_memory_array_string":{"entryPoint":7036,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_and_zero_memory_struct_struct_JPoint":{"entryPoint":8182,"id":null,"parameterSlots":0,"returnSlots":1},"allocate_memory":{"entryPoint":494,"id":null,"parameterSlots":0,"returnSlots":1},"allocate_memory_array_string":{"entryPoint":3395,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_array_address_dyn":{"entryPoint":4276,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_string":{"entryPoint":509,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"bytes_concat_bytes32":{"entryPoint":6246,"id":null,"parameterSlots":1,"returnSlots":1},"bytes_concat_bytes_bytes32":{"entryPoint":6395,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_uint256":{"entryPoint":3376,"id":null,"parameterSlots":1,"returnSlots":1},"checked_div_uint256":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_mul_uint256":{"entryPoint":7014,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":2586,"id":null,"parameterSlots":2,"returnSlots":0},"cleanup_address":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_bool":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"copy_literal_to_memory_5f7e6d3cba140c1411e96b7033571a229a3135b5c436a9698b398a19a1c64b50":{"entryPoint":6919,"id":null,"parameterSlots":0,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":627,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_uint256":{"entryPoint":8139,"id":null,"parameterSlots":1,"returnSlots":1},"external_fun_entrypoint":{"entryPoint":1141,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_getAddressOwner":{"entryPoint":851,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_getNonce":{"entryPoint":1001,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_getPassKeyOwner":{"entryPoint":662,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_getUserOpHash":{"entryPoint":1370,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_passKeyOwnerEnabled":{"entryPoint":936,"id":null,"parameterSlots":0,"returnSlots":0},"extract_byte_array_length":{"entryPoint":1402,"id":null,"parameterSlots":1,"returnSlots":1},"extract_from_storage_value_offsett_address":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"extract_from_storage_value_offsett_bool":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":429,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_19700":{"entryPoint":401,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_9309":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"finalize_allocation_9314":{"entryPoint":368,"id":null,"parameterSlots":1,"returnSlots":0},"fun_Verify":{"entryPoint":7293,"id":4571,"parameterSlots":4,"returnSlots":1},"fun_VerifyWithPrecompute":{"entryPoint":7840,"id":4643,"parameterSlots":4,"returnSlots":1},"fun_affineFromJacobian":{"entryPoint":8388,"id":5135,"parameterSlots":3,"returnSlots":2},"fun_call":{"entryPoint":5254,"id":3884,"parameterSlots":3,"returnSlots":0},"fun_call_9343":{"entryPoint":5173,"id":3884,"parameterSlots":2,"returnSlots":0},"fun_changeOwnershipToAddress":{"entryPoint":3431,"id":3530,"parameterSlots":1,"returnSlots":0},"fun_changeOwnershipToPassKeyAddress":{"entryPoint":3812,"id":3585,"parameterSlots":1,"returnSlots":0},"fun_encode":{"entryPoint":7115,"id":4482,"parameterSlots":1,"returnSlots":1},"fun_execute":{"entryPoint":4172,"id":3749,"parameterSlots":1,"returnSlots":0},"fun_executeBatch":{"entryPoint":4925,"id":3858,"parameterSlots":1,"returnSlots":0},"fun_getUserOpHash":{"entryPoint":6797,"id":4091,"parameterSlots":1,"returnSlots":1},"fun_initialize":{"entryPoint":2699,"id":3634,"parameterSlots":1,"returnSlots":0},"fun_initialize_inner":{"entryPoint":2170,"id":null,"parameterSlots":0,"returnSlots":0},"fun_jAdd":{"entryPoint":8603,"id":5207,"parameterSlots":6,"returnSlots":3},"fun_jPointAdd":{"entryPoint":8282,"id":5038,"parameterSlots":2,"returnSlots":1},"fun_jPointDouble":{"entryPoint":8356,"id":5077,"parameterSlots":1,"returnSlots":1},"fun_modexp":{"entryPoint":9070,"id":5259,"parameterSlots":1,"returnSlots":1},"fun_modifiedJacobianDouble":{"entryPoint":8888,"id":5224,"parameterSlots":3,"returnSlots":3},"fun_recover":{"entryPoint":5536,"id":2191,"parameterSlots":2,"returnSlots":1},"fun_throwError":{"entryPoint":5614,"id":2118,"parameterSlots":1,"returnSlots":0},"fun_toEthSignedMessageHash":{"entryPoint":null,"id":2375,"parameterSlots":1,"returnSlots":1},"fun_tryRecover":{"entryPoint":6075,"id":2332,"parameterSlots":4,"returnSlots":2},"fun_tryRecover_2164":{"entryPoint":6007,"id":2164,"parameterSlots":2,"returnSlots":2},"fun_validateNonce":{"entryPoint":6223,"id":3955,"parameterSlots":1,"returnSlots":1},"fun_validatePassKeySig":{"entryPoint":6551,"id":4067,"parameterSlots":3,"returnSlots":1},"fun_validateUserOp":{"entryPoint":5286,"id":3937,"parameterSlots":1,"returnSlots":1},"increment_uint256":{"entryPoint":4808,"id":null,"parameterSlots":1,"returnSlots":1},"memory_array_index_access_address_dyn":{"entryPoint":4900,"id":null,"parameterSlots":2,"returnSlots":1},"memory_array_index_access_struct_JPoint":{"entryPoint":8122,"id":null,"parameterSlots":2,"returnSlots":1},"mod_uint256":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"modifier_initializer":{"entryPoint":1745,"id":504,"parameterSlots":0,"returnSlots":0},"panic_error_0x11":{"entryPoint":3329,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":4853,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":321,"id":null,"parameterSlots":0,"returnSlots":0},"read_from_memoryt_address":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"read_from_storage_reference_type_struct_PassKeyId":{"entryPoint":1485,"id":null,"parameterSlots":0,"returnSlots":1},"require_helper_stringliteral_046f":{"entryPoint":4707,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_9c85":{"entryPoint":3109,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_a43b":{"entryPoint":6450,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_e1d7":{"entryPoint":2970,"id":null,"parameterSlots":1,"returnSlots":0},"revert_forward":{"entryPoint":6063,"id":null,"parameterSlots":0,"returnSlots":0},"string_concat_string_string_string":{"entryPoint":6311,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_offsett_address_to_address":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"update_storage_value_offsett_address_to_address_9338":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":0},"update_storage_value_offsett_bool_to_bool":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"update_storage_value_offsett_bool_to_bool_9326":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"update_storage_value_offsett_bool_to_bool_9342":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"update_storage_value_offsett_bool_to_t_bool":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"update_storage_value_offsett_uint256_to_uint256":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":0},"update_storage_value_offsett_uint8_to_uint8":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"validator_assert_enum_RecoverError":{"entryPoint":5557,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_address_payable":{"entryPoint":4142,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436101561001b575b361561001957600080fd5b005b6000803560e01c908163759a68c01461008e575080638fb4107214610089578063b627e20f14610084578063be9ef8431461007f578063d087d2881461007a578063f0f05cef146100755763fd5c8d720361000e5761055a565b610475565b6103e9565b6103a8565b610353565b610296565b3461013e577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc6020813601126101325760043567ffffffffffffffff9182821161013a576060908236030112610136576100e860e0604052565b8060040135608052602481013560a052604481013591821161013657013660238201121561013257610124903690602460048201359101610237565b60c05261012f6106d1565b80f35b5080fd5b8280fd5b8380fd5b80fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761018c57604052565b610141565b6080810190811067ffffffffffffffff82111761018c57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761018c57604052565b604051906101fb82610170565b565b67ffffffffffffffff811161018c57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b929192610243826101fd565b9161025160405193846101ad565b82948184528183011161026e578281602093846000960137010152565b600080fd5b60005b8381106102865750506000910152565b8181015183820152602001610276565b3461026e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026e576060604080516102d481610170565b60008152600060208201520152604060a06102ed6105cd565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84519485936020855280516020860152602081015182860152015160608085015261034a8151809281608088015260208888019101610273565b01168101030190f35b3461026e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026e57602073ffffffffffffffffffffffffffffffffffffffff60005460101c16604051908152f35b3461026e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026e57602060ff600454166040519015158152f35b3461026e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026e576020600554604051908152f35b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc9060208282011261026e576004359167ffffffffffffffff831161026e578260809203011261026e5760040190565b3461026e5761048336610425565b61049561048f826114a6565b15610b9a565b6104a76104a18261184f565b15610c25565b60038135801561053d575b60018114610520575b60028114610503575b146104dd575b6100196104d8600554610d30565b600555565b6104f86104f18260206104fd940190610cb0565b3691610237565b610ee4565b386104ca565b61051b6105166104f16020860186610cb0565b610d67565b6104c4565b6105386105336104f16020860186610cb0565b61133d565b6104bb565b6105556105506104f16020860186610cb0565b61104c565b6104b2565b3461026e57602061057261056d36610425565b611a8d565b604051908152f35b90600182811c921680156105c3575b602083101461059457565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691610589565b604051906105da82610170565b816001908154815260025460209081830152604051928391600091600354906106028261057a565b80865291818116908115610694575060011461062f575b5050506040929161062b9103846101ad565b0152565b909493925060036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b946000915b81831061067c5750939450919250908201018161062b6040610619565b8654888401850152958601958794509183019161065f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016848701525050151560051b83010190508161062b6040610619565b60005460ff8160081c16158091819261086c575b811561084c575b50156107c8578061072360017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff006000541617600055565b610792575b61073061087a565b61073657565b6107637fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff60005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1565b6107c36101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff6000541617600055565b610728565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b303b1591508161085e575b50386106ec565b6001915060ff161438610857565b600160ff82161091506106e5565b6001807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff006004541617600455608051815560a05160025560c0519081519167ffffffffffffffff831161018c576108db836108d660035461057a565b610a1a565b60209081601f85116001146109545750600091849182610929575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91921b9260031b1c191617600355565b015191507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff386108f6565b9190847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0819596166109a860036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90565b946000905b88838310610a0057505050106109c9575b505050811b01600355565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c191690553880806109be565b8587015188559096019594850194879350908101906109ad565b601f8111610a26575050565b600090600382527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b906020601f850160051c83019410610a81575b601f0160051c01915b828110610a7657505050565b818155600101610a6a565b9092508290610a61565b8051600190815560406020928381015160025501519182519267ffffffffffffffff841161018c57610ac2846108d660035461057a565b81601f8511600114610b0c57506000918491826109295750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91921b9260031b1c191617600355565b9190847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081959616610b6060036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90565b946000905b88838310610b8057505050106109c957505050811b01600355565b858701518855909601959485019487935090810190610b65565b15610ba157565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4163636f756e743a205369676e617475726520766572696669636174696f6e2060448201527f6661696c656400000000000000000000000000000000000000000000000000006064820152fd5b15610c2c57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4163636f756e743a204e6f6e636520766572696669636174696f6e206661696c60448201527f65640000000000000000000000000000000000000000000000000000000000006064820152fd5b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18136030182121561026e570180359067ffffffffffffffff821161026e5760200191813603831361026e57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9060018201809211610d3e57565b610d01565b604051906020820182811067ffffffffffffffff82111761018c5760405260008252565b600160ff60045416151503610e1b576014610dee910151610da6610d896101ee565b6000815260006020820152610d9c610d43565b6040820152610a8b565b7fffffffffffffffffffff0000000000000000000000000000000000000000ffff75ffffffffffffffffffffffffffffffffffffffff00006000549260101b16911617600055565b6101fb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0060045416600455565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4163636f756e743a20416c72656164792061646472657373206f776e6572206560448201527f6e61626c656400000000000000000000000000000000000000000000000000006064820152fd5b81601f8201121561026e578051610eb5816101fd565b92610ec360405194856101ad565b8184526020828401011161026e57610ee19160208085019101610273565b90565b60ff60045416610faa57805181019060608183031261026e5760208101519060408101519060608101519067ffffffffffffffff821161026e576020610f329281610f7a9701920101610e9f565b90610f3b6101ee565b92835260208301526040820152610f757fffffffffffffffffffff0000000000000000000000000000000000000000ffff60005416600055565b610a8b565b6101fb60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff006004541617600455565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4163636f756e743a20416c726561647920706173736b6579206f776e6572206560448201527f6e61626c656400000000000000000000000000000000000000000000000000006064820152fd5b73ffffffffffffffffffffffffffffffffffffffff81160361026e57565b8051810160608282031261026e576020820151906110698261102e565b604083015190606084015167ffffffffffffffff811161026e576101fb9460206110ad928173ffffffffffffffffffffffffffffffffffffffff9501920101610e9f565b9216611486565b67ffffffffffffffff811161018c5760051b60200190565b81601f8201121561026e578051916110e3836110b4565b926110f160405194856101ad565b808452602092838086019260051b82010192831161026e578301905b82821061111b575050505090565b8151815290830190830161110d565b9080601f8301121561026e57815190611142826110b4565b9261115060405194856101ad565b828452602092838086019160051b8301019280841161026e57848301915b84831061117e5750505050505090565b825167ffffffffffffffff811161026e5786916111a084848094890101610e9f565b81520192019161116e565b909160608284031261026e5781519167ffffffffffffffff9283811161026e5781019380601f8601121561026e5784516111e4816110b4565b906111f260405192836101ad565b808252602096878084019260051b8201019184831161026e5788809201905b83821061124a57505050509482015184811161026e57816112339184016110cc565b93604083015190811161026e57610ee1920161112a565b82809183516112588161102e565b815201910190611211565b1561126a57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f77726f6e67206172726179206c656e67746873000000000000000000000000006044820152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610d3e5760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80518210156113385760209160051b010190565b6112f5565b61135090602080825183010191016111ab565b92919061136a825185518091149081611416575b50611263565b80516113cc575060005b81518110156113c657806113bc6113ab6113916113c19486611324565b5173ffffffffffffffffffffffffffffffffffffffff1690565b6113b58388611324565b5190611435565b6112c8565b611374565b50509050565b929060005b815181101561140f57806113bc6113ee61139161140a9486611324565b6113f88389611324565b516114038488611324565b5191611486565b6113d1565b5050509050565b835180159250821561142b575b505038611364565b1490503880611423565b600091829182602083519301915af13d1561147e573d90611455826101fd565b9161146360405193846101ad565b82523d6000602084013e5b156114765750565b602081519101fd5b60609061146e565b916000928392602083519301915af13d1561147e573d90611455826101fd565b6114af81611a8d565b60045460ff16156114f3576114e1906114d26104f18460606114e5960190610cb0565b906114db6105cd565b91611997565b1590565b6114ee57600090565b600190565b61159461157b61154173ffffffffffffffffffffffffffffffffffffffff937f19457468657265756d205369676e6564204d6573736167653a0a333200000000600052601c52603c60002090565b6115756104f161156a60005473ffffffffffffffffffffffffffffffffffffffff9060101c1690565b966060810190610cb0565b906115a0565b73ffffffffffffffffffffffffffffffffffffffff1690565b9116036114ee57600090565b610ee1916115ad91611777565b9190916115ee565b600511156115bf57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6115f7816115b5565b806115ff5750565b611608816115b5565b6001810361166f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606490fd5b611678816115b5565b600281036116df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606490fd5b806116eb6003926115b5565b146116f257565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608490fd5b9060418151146000146117a5576117a1916020820151906060604084015193015160001a906117bb565b9091565b5050600090600290565b6040513d6000823e3d90fd5b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083116118435791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa1561183e57815173ffffffffffffffffffffffffffffffffffffffff811615611838579190565b50600190565b6117af565b50505050600090600390565b60406005549101351461186157600190565b600090565b90604051916020830152602082526040820182811067ffffffffffffffff82111761018c57604052565b906118a360209282815194859201610273565b0190565b6101fb9193929360405194859183516118c881602096878088019101610273565b83016118dc82518093878085019101610273565b016118ef82518093868085019101610273565b010380855201836101ad565b60406101fb919392938151948161191c879351809260208087019101610273565b82019060208201520360208101855201836101ad565b1561193957565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4b6579206e6f7420666f756e64000000000000000000000000000000000000006044820152fd5b90815182019060209260c08185850194031261026e5760408101519160608201519360808301519267ffffffffffffffff9384811161026e5782886119de92840101610e9f565b9360a082015181811161026e5783896119f992850101610e9f565b9360c083015191821161026e578894611a2f611a2a611a2460009789611a3597611a41990101610e9f565b93611866565b611bcb565b906118a7565b60405191828092611890565b039060025afa1561183e576000611a5e611a3586938351906118fb565b039060025afa1561183e57610ee193611a8360005194820151151580611a8857611932565b611c7d565b611932565b611a9a6020820182610cb0565b9081604051918237206040805192602084019281358452828501520135606083015260608252608082019082821067ffffffffffffffff83111761018c5781604052825190209160a081019283523060c082015260e04691015260608152611b0181610191565b51902090565b60405190611b1482610170565b604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392d5f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b908160031b9180830460081490151715610d3e57565b90611b86826101fd565b611b9360405191826101ad565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0611bc182946101fd565b0190602036910137565b805115611c7457611bda611b07565b611c00611bf1611bea8451611b66565b6006900490565b835160069006611c6657611b7c565b91602083019181805101925b838310611c1a575050505090565b6004906003809401938451600190603f9082828260121c16880101518553828282600c1c16880101518386015382828260061c1688010151600286015316850101519082015301611c0c565b611c6f906112c8565b611b7c565b50610ee1610d43565b92919080158015611e98575b8015611e6e575b8015611e44575b611e3b57610ee193611e30611caa612015565b91611cb36101ee565b600081526000602082015260006040820152835260208151910151611cd66101ee565b918252602082015260016040820152611cf560208401918083526120a4565b90611e21611d0b6040860193808552835161205a565b9260608601938452611e11611e01611d216101ee565b7f6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c29681527f4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5602082015260016040820152611d8460808a019180835287519061205a565b60a08a0152611d96815185519061205a565b60c08a0152611da8815188519061205a565b60e08a0152611db781516120a4565b90611dcc6101008b019280845288519061205a565b6101208b0152611ddf825186519061205a565b6101408b0152611df2825189519061205a565b6101608b01525190519061205a565b610180880194818652519061205a565b6101a0870152825190519061205a565b6101c08501525190519061205a565b6101e0820152611ea0565b50505050600090565b507fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551821015611c97565b507fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551811015611c90565b508115611c89565b939290917fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255190818410801590611fb0575b611fa657611edf829161236e565b809309918309600080918193608091825b611f0857505050611f03939495506120c4565b501490565b85611f84575b888160fe1c600c8460fc1c161780611f3b575b5050611f3490600292831b921b92611fcb565b9182611ef0565b611f779397611f34976040611f6e611f5685879b989b611fba565b5151946020611f658289611fba565b51015196611fba565b5101519461219b565b9590945090928838611f21565b9294611f959194611f9b93966122b8565b916122b8565b949193909392611f0e565b5060009450505050565b5081811015611ed1565b9060108110156113385760051b0190565b8015610d3e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b6040519061200382610170565b60006040838281528260208201520152565b6040519061020080830183811067ffffffffffffffff82111761018c576040528260005b82811061204557505050565b602090612050611ff6565b8184015201612039565b61208791612066611ff6565b5081519160406020820151910151825191604060208501519401519461219b565b906040519261209584610170565b83526020830152604082015290565b612087906120b0611ff6565b5080519060406020820151910151916122b8565b929190811561218f578160007fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8481809611612185575b505060405191602083526020808401526020604084015260608301527fffffffff00000001000000000000000000000000fffffffffffffffffffffffd60808301528360a083015260208260c08160057ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa1561013e575082905181808280098097099509900990565b06915083386120fb565b50509050600090600090565b9395939190816121ad57505050929190565b909291949586156122ae577fffffffff00000001000000000000000000000000ffffffffffffffffffffffff9586858196958280838199099b818d999781868180808f9d888009809d099c8d99099c81878d0990099c0990099308958181106122a7575b03958280808960020980099281808481878d09938181106122a0575b036002099481868009980996828089600209830890818110612299575b039b8c936002090994818110612292575b03900997828910612289575b859182910892800995828710612280575b960394030990565b95840195612278565b97850197612267565b830161225b565b830161224a565b820161222d565b8301612211565b5094505091929190565b9290917fffffffff00000001000000000000000000000000ffffffffffffffffffffffff809181858009958280808080808c87096004099a800960080992818080808089800980097fffffffff00000001000000000000000000000000fffffffffffffffffffffffc0992800960030908818960020982828009818110612367575b038981809b10612360575b039009818110612359575b03940960020990565b8301612350565b8301612345565b830161233a565b7fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255180821161240f575b60405191602083526020808401526020604084015260608301527fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254f608083015260a082015260208160c08160057ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa1561026e575190565b8091069061239756fea164736f6c6343000813000a","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x1B JUMPI JUMPDEST CALLDATASIZE ISZERO PUSH2 0x19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x759A68C0 EQ PUSH2 0x8E JUMPI POP DUP1 PUSH4 0x8FB41072 EQ PUSH2 0x89 JUMPI DUP1 PUSH4 0xB627E20F EQ PUSH2 0x84 JUMPI DUP1 PUSH4 0xBE9EF843 EQ PUSH2 0x7F JUMPI DUP1 PUSH4 0xD087D288 EQ PUSH2 0x7A JUMPI DUP1 PUSH4 0xF0F05CEF EQ PUSH2 0x75 JUMPI PUSH4 0xFD5C8D72 SUB PUSH2 0xE JUMPI PUSH2 0x55A JUMP JUMPDEST PUSH2 0x475 JUMP JUMPDEST PUSH2 0x3E9 JUMP JUMPDEST PUSH2 0x3A8 JUMP JUMPDEST PUSH2 0x353 JUMP JUMPDEST PUSH2 0x296 JUMP JUMPDEST CALLVALUE PUSH2 0x13E JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC PUSH1 0x20 DUP2 CALLDATASIZE ADD SLT PUSH2 0x132 JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP2 DUP3 DUP3 GT PUSH2 0x13A JUMPI PUSH1 0x60 SWAP1 DUP3 CALLDATASIZE SUB ADD SLT PUSH2 0x136 JUMPI PUSH2 0xE8 PUSH1 0xE0 PUSH1 0x40 MSTORE JUMP JUMPDEST DUP1 PUSH1 0x4 ADD CALLDATALOAD PUSH1 0x80 MSTORE PUSH1 0x24 DUP2 ADD CALLDATALOAD PUSH1 0xA0 MSTORE PUSH1 0x44 DUP2 ADD CALLDATALOAD SWAP2 DUP3 GT PUSH2 0x136 JUMPI ADD CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x132 JUMPI PUSH2 0x124 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x24 PUSH1 0x4 DUP3 ADD CALLDATALOAD SWAP2 ADD PUSH2 0x237 JUMP JUMPDEST PUSH1 0xC0 MSTORE PUSH2 0x12F PUSH2 0x6D1 JUMP JUMPDEST DUP1 RETURN JUMPDEST POP DUP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x18C JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x141 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x18C JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x18C JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1FB DUP3 PUSH2 0x170 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x18C JUMPI PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH2 0x243 DUP3 PUSH2 0x1FD JUMP JUMPDEST SWAP2 PUSH2 0x251 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x1AD JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x26E JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x286 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x276 JUMP JUMPDEST CALLVALUE PUSH2 0x26E JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x26E JUMPI PUSH1 0x60 PUSH1 0x40 DUP1 MLOAD PUSH2 0x2D4 DUP2 PUSH2 0x170 JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x40 PUSH1 0xA0 PUSH2 0x2ED PUSH2 0x5CD JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 MLOAD SWAP5 DUP6 SWAP4 PUSH1 0x20 DUP6 MSTORE DUP1 MLOAD PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x20 DUP2 ADD MLOAD DUP3 DUP7 ADD MSTORE ADD MLOAD PUSH1 0x60 DUP1 DUP6 ADD MSTORE PUSH2 0x34A DUP2 MLOAD DUP1 SWAP3 DUP2 PUSH1 0x80 DUP9 ADD MSTORE PUSH1 0x20 DUP9 DUP9 ADD SWAP2 ADD PUSH2 0x273 JUMP JUMPDEST ADD AND DUP2 ADD SUB ADD SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x26E JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x26E JUMPI PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x0 SLOAD PUSH1 0x10 SHR AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x26E JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x26E JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0x4 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x26E JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x26E JUMPI PUSH1 0x20 PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC SWAP1 PUSH1 0x20 DUP3 DUP3 ADD SLT PUSH2 0x26E JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x26E JUMPI DUP3 PUSH1 0x80 SWAP3 SUB ADD SLT PUSH2 0x26E JUMPI PUSH1 0x4 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x26E JUMPI PUSH2 0x483 CALLDATASIZE PUSH2 0x425 JUMP JUMPDEST PUSH2 0x495 PUSH2 0x48F DUP3 PUSH2 0x14A6 JUMP JUMPDEST ISZERO PUSH2 0xB9A JUMP JUMPDEST PUSH2 0x4A7 PUSH2 0x4A1 DUP3 PUSH2 0x184F JUMP JUMPDEST ISZERO PUSH2 0xC25 JUMP JUMPDEST PUSH1 0x3 DUP2 CALLDATALOAD DUP1 ISZERO PUSH2 0x53D JUMPI JUMPDEST PUSH1 0x1 DUP2 EQ PUSH2 0x520 JUMPI JUMPDEST PUSH1 0x2 DUP2 EQ PUSH2 0x503 JUMPI JUMPDEST EQ PUSH2 0x4DD JUMPI JUMPDEST PUSH2 0x19 PUSH2 0x4D8 PUSH1 0x5 SLOAD PUSH2 0xD30 JUMP JUMPDEST PUSH1 0x5 SSTORE JUMP JUMPDEST PUSH2 0x4F8 PUSH2 0x4F1 DUP3 PUSH1 0x20 PUSH2 0x4FD SWAP5 ADD SWAP1 PUSH2 0xCB0 JUMP JUMPDEST CALLDATASIZE SWAP2 PUSH2 0x237 JUMP JUMPDEST PUSH2 0xEE4 JUMP JUMPDEST CODESIZE PUSH2 0x4CA JUMP JUMPDEST PUSH2 0x51B PUSH2 0x516 PUSH2 0x4F1 PUSH1 0x20 DUP7 ADD DUP7 PUSH2 0xCB0 JUMP JUMPDEST PUSH2 0xD67 JUMP JUMPDEST PUSH2 0x4C4 JUMP JUMPDEST PUSH2 0x538 PUSH2 0x533 PUSH2 0x4F1 PUSH1 0x20 DUP7 ADD DUP7 PUSH2 0xCB0 JUMP JUMPDEST PUSH2 0x133D JUMP JUMPDEST PUSH2 0x4BB JUMP JUMPDEST PUSH2 0x555 PUSH2 0x550 PUSH2 0x4F1 PUSH1 0x20 DUP7 ADD DUP7 PUSH2 0xCB0 JUMP JUMPDEST PUSH2 0x104C JUMP JUMPDEST PUSH2 0x4B2 JUMP JUMPDEST CALLVALUE PUSH2 0x26E JUMPI PUSH1 0x20 PUSH2 0x572 PUSH2 0x56D CALLDATASIZE PUSH2 0x425 JUMP JUMPDEST PUSH2 0x1A8D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x5C3 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x594 JUMPI JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x589 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x5DA DUP3 PUSH2 0x170 JUMP JUMPDEST DUP2 PUSH1 0x1 SWAP1 DUP2 SLOAD DUP2 MSTORE PUSH1 0x2 SLOAD PUSH1 0x20 SWAP1 DUP2 DUP4 ADD MSTORE PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x3 SLOAD SWAP1 PUSH2 0x602 DUP3 PUSH2 0x57A JUMP JUMPDEST DUP1 DUP7 MSTORE SWAP2 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x694 JUMPI POP PUSH1 0x1 EQ PUSH2 0x62F JUMPI JUMPDEST POP POP POP PUSH1 0x40 SWAP3 SWAP2 PUSH2 0x62B SWAP2 SUB DUP5 PUSH2 0x1AD JUMP JUMPDEST ADD MSTORE JUMP JUMPDEST SWAP1 SWAP5 SWAP4 SWAP3 POP PUSH1 0x3 PUSH1 0x0 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B SWAP5 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x67C JUMPI POP SWAP4 SWAP5 POP SWAP2 SWAP3 POP SWAP1 DUP3 ADD ADD DUP2 PUSH2 0x62B PUSH1 0x40 PUSH2 0x619 JUMP JUMPDEST DUP7 SLOAD DUP9 DUP5 ADD DUP6 ADD MSTORE SWAP6 DUP7 ADD SWAP6 DUP8 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x65F JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP5 DUP8 ADD MSTORE POP POP ISZERO ISZERO PUSH1 0x5 SHL DUP4 ADD ADD SWAP1 POP DUP2 PUSH2 0x62B PUSH1 0x40 PUSH2 0x619 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF DUP2 PUSH1 0x8 SHR AND ISZERO DUP1 SWAP2 DUP2 SWAP3 PUSH2 0x86C JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x84C JUMPI JUMPDEST POP ISZERO PUSH2 0x7C8 JUMPI DUP1 PUSH2 0x723 PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 PUSH1 0x0 SLOAD AND OR PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH2 0x792 JUMPI JUMPDEST PUSH2 0x730 PUSH2 0x87A JUMP JUMPDEST PUSH2 0x736 JUMPI JUMP JUMPDEST PUSH2 0x763 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF PUSH1 0x0 SLOAD AND PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 SWAP1 LOG1 JUMP JUMPDEST PUSH2 0x7C3 PUSH2 0x100 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF PUSH1 0x0 SLOAD AND OR PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH2 0x728 JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST ADDRESS EXTCODESIZE ISZERO SWAP2 POP DUP2 PUSH2 0x85E JUMPI JUMPDEST POP CODESIZE PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x1 SWAP2 POP PUSH1 0xFF AND EQ CODESIZE PUSH2 0x857 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFF DUP3 AND LT SWAP2 POP PUSH2 0x6E5 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 PUSH1 0x4 SLOAD AND OR PUSH1 0x4 SSTORE PUSH1 0x80 MLOAD DUP2 SSTORE PUSH1 0xA0 MLOAD PUSH1 0x2 SSTORE PUSH1 0xC0 MLOAD SWAP1 DUP2 MLOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x18C JUMPI PUSH2 0x8DB DUP4 PUSH2 0x8D6 PUSH1 0x3 SLOAD PUSH2 0x57A JUMP JUMPDEST PUSH2 0xA1A JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 PUSH1 0x1F DUP6 GT PUSH1 0x1 EQ PUSH2 0x954 JUMPI POP PUSH1 0x0 SWAP2 DUP5 SWAP2 DUP3 PUSH2 0x929 JUMPI JUMPDEST POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP3 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x3 SSTORE JUMP JUMPDEST ADD MLOAD SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF CODESIZE PUSH2 0x8F6 JUMP JUMPDEST SWAP2 SWAP1 DUP5 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 SWAP6 SWAP7 AND PUSH2 0x9A8 PUSH1 0x3 PUSH1 0x0 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B SWAP1 JUMP JUMPDEST SWAP5 PUSH1 0x0 SWAP1 JUMPDEST DUP9 DUP4 DUP4 LT PUSH2 0xA00 JUMPI POP POP POP LT PUSH2 0x9C9 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x3 SSTORE JUMP JUMPDEST ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x9BE JUMP JUMPDEST DUP6 DUP8 ADD MLOAD DUP9 SSTORE SWAP1 SWAP7 ADD SWAP6 SWAP5 DUP6 ADD SWAP5 DUP8 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH2 0x9AD JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0xA26 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH1 0x3 DUP3 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B SWAP1 PUSH1 0x20 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP4 ADD SWAP5 LT PUSH2 0xA81 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0xA76 JUMPI POP POP POP JUMP JUMPDEST DUP2 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xA6A JUMP JUMPDEST SWAP1 SWAP3 POP DUP3 SWAP1 PUSH2 0xA61 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 SWAP1 DUP2 SSTORE PUSH1 0x40 PUSH1 0x20 SWAP3 DUP4 DUP2 ADD MLOAD PUSH1 0x2 SSTORE ADD MLOAD SWAP2 DUP3 MLOAD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT PUSH2 0x18C JUMPI PUSH2 0xAC2 DUP5 PUSH2 0x8D6 PUSH1 0x3 SLOAD PUSH2 0x57A JUMP JUMPDEST DUP2 PUSH1 0x1F DUP6 GT PUSH1 0x1 EQ PUSH2 0xB0C JUMPI POP PUSH1 0x0 SWAP2 DUP5 SWAP2 DUP3 PUSH2 0x929 JUMPI POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP3 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x3 SSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP5 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 SWAP6 SWAP7 AND PUSH2 0xB60 PUSH1 0x3 PUSH1 0x0 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B SWAP1 JUMP JUMPDEST SWAP5 PUSH1 0x0 SWAP1 JUMPDEST DUP9 DUP4 DUP4 LT PUSH2 0xB80 JUMPI POP POP POP LT PUSH2 0x9C9 JUMPI POP POP POP DUP2 SHL ADD PUSH1 0x3 SSTORE JUMP JUMPDEST DUP6 DUP8 ADD MLOAD DUP9 SSTORE SWAP1 SWAP7 ADD SWAP6 SWAP5 DUP6 ADD SWAP5 DUP8 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH2 0xB65 JUMP JUMPDEST ISZERO PUSH2 0xBA1 JUMPI JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4163636F756E743A205369676E617475726520766572696669636174696F6E20 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6661696C65640000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST ISZERO PUSH2 0xC2C JUMPI JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4163636F756E743A204E6F6E636520766572696669636174696F6E206661696C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6564000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 CALLDATALOAD SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x26E JUMPI ADD DUP1 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x26E JUMPI PUSH1 0x20 ADD SWAP2 DUP2 CALLDATASIZE SUB DUP4 SGT PUSH2 0x26E JUMPI JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xD3E JUMPI JUMP JUMPDEST PUSH2 0xD01 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x18C JUMPI PUSH1 0x40 MSTORE PUSH1 0x0 DUP3 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFF PUSH1 0x4 SLOAD AND ISZERO ISZERO SUB PUSH2 0xE1B JUMPI PUSH1 0x14 PUSH2 0xDEE SWAP2 ADD MLOAD PUSH2 0xDA6 PUSH2 0xD89 PUSH2 0x1EE JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xD9C PUSH2 0xD43 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0xA8B JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000FFFF PUSH22 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000 PUSH1 0x0 SLOAD SWAP3 PUSH1 0x10 SHL AND SWAP2 AND OR PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH2 0x1FB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 PUSH1 0x4 SLOAD AND PUSH1 0x4 SSTORE JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4163636F756E743A20416C72656164792061646472657373206F776E65722065 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E61626C65640000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x26E JUMPI DUP1 MLOAD PUSH2 0xEB5 DUP2 PUSH2 0x1FD JUMP JUMPDEST SWAP3 PUSH2 0xEC3 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x1AD JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 DUP3 DUP5 ADD ADD GT PUSH2 0x26E JUMPI PUSH2 0xEE1 SWAP2 PUSH1 0x20 DUP1 DUP6 ADD SWAP2 ADD PUSH2 0x273 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x4 SLOAD AND PUSH2 0xFAA JUMPI DUP1 MLOAD DUP2 ADD SWAP1 PUSH1 0x60 DUP2 DUP4 SUB SLT PUSH2 0x26E JUMPI PUSH1 0x20 DUP2 ADD MLOAD SWAP1 PUSH1 0x40 DUP2 ADD MLOAD SWAP1 PUSH1 0x60 DUP2 ADD MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x26E JUMPI PUSH1 0x20 PUSH2 0xF32 SWAP3 DUP2 PUSH2 0xF7A SWAP8 ADD SWAP3 ADD ADD PUSH2 0xE9F JUMP JUMPDEST SWAP1 PUSH2 0xF3B PUSH2 0x1EE JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0xF75 PUSH32 0xFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000FFFF PUSH1 0x0 SLOAD AND PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH2 0xA8B JUMP JUMPDEST PUSH2 0x1FB PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 PUSH1 0x4 SLOAD AND OR PUSH1 0x4 SSTORE JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4163636F756E743A20416C726561647920706173736B6579206F776E65722065 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E61626C65640000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND SUB PUSH2 0x26E JUMPI JUMP JUMPDEST DUP1 MLOAD DUP2 ADD PUSH1 0x60 DUP3 DUP3 SUB SLT PUSH2 0x26E JUMPI PUSH1 0x20 DUP3 ADD MLOAD SWAP1 PUSH2 0x1069 DUP3 PUSH2 0x102E JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MLOAD SWAP1 PUSH1 0x60 DUP5 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x26E JUMPI PUSH2 0x1FB SWAP5 PUSH1 0x20 PUSH2 0x10AD SWAP3 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 ADD SWAP3 ADD ADD PUSH2 0xE9F JUMP JUMPDEST SWAP3 AND PUSH2 0x1486 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x18C JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x26E JUMPI DUP1 MLOAD SWAP2 PUSH2 0x10E3 DUP4 PUSH2 0x10B4 JUMP JUMPDEST SWAP3 PUSH2 0x10F1 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x1AD JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 SWAP3 DUP4 DUP1 DUP7 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x26E JUMPI DUP4 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x111B JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP2 MLOAD DUP2 MSTORE SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0x110D JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x26E JUMPI DUP2 MLOAD SWAP1 PUSH2 0x1142 DUP3 PUSH2 0x10B4 JUMP JUMPDEST SWAP3 PUSH2 0x1150 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x1AD JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 SWAP3 DUP4 DUP1 DUP7 ADD SWAP2 PUSH1 0x5 SHL DUP4 ADD ADD SWAP3 DUP1 DUP5 GT PUSH2 0x26E JUMPI DUP5 DUP4 ADD SWAP2 JUMPDEST DUP5 DUP4 LT PUSH2 0x117E JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x26E JUMPI DUP7 SWAP2 PUSH2 0x11A0 DUP5 DUP5 DUP1 SWAP5 DUP10 ADD ADD PUSH2 0xE9F JUMP JUMPDEST DUP2 MSTORE ADD SWAP3 ADD SWAP2 PUSH2 0x116E JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x60 DUP3 DUP5 SUB SLT PUSH2 0x26E JUMPI DUP2 MLOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP2 GT PUSH2 0x26E JUMPI DUP2 ADD SWAP4 DUP1 PUSH1 0x1F DUP7 ADD SLT ISZERO PUSH2 0x26E JUMPI DUP5 MLOAD PUSH2 0x11E4 DUP2 PUSH2 0x10B4 JUMP JUMPDEST SWAP1 PUSH2 0x11F2 PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x1AD JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH1 0x20 SWAP7 DUP8 DUP1 DUP5 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP2 DUP5 DUP4 GT PUSH2 0x26E JUMPI DUP9 DUP1 SWAP3 ADD SWAP1 JUMPDEST DUP4 DUP3 LT PUSH2 0x124A JUMPI POP POP POP POP SWAP5 DUP3 ADD MLOAD DUP5 DUP2 GT PUSH2 0x26E JUMPI DUP2 PUSH2 0x1233 SWAP2 DUP5 ADD PUSH2 0x10CC JUMP JUMPDEST SWAP4 PUSH1 0x40 DUP4 ADD MLOAD SWAP1 DUP2 GT PUSH2 0x26E JUMPI PUSH2 0xEE1 SWAP3 ADD PUSH2 0x112A JUMP JUMPDEST DUP3 DUP1 SWAP2 DUP4 MLOAD PUSH2 0x1258 DUP2 PUSH2 0x102E JUMP JUMPDEST DUP2 MSTORE ADD SWAP2 ADD SWAP1 PUSH2 0x1211 JUMP JUMPDEST ISZERO PUSH2 0x126A JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x77726F6E67206172726179206C656E6774687300000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0xD3E JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x1338 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x12F5 JUMP JUMPDEST PUSH2 0x1350 SWAP1 PUSH1 0x20 DUP1 DUP3 MLOAD DUP4 ADD ADD SWAP2 ADD PUSH2 0x11AB JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x136A DUP3 MLOAD DUP6 MLOAD DUP1 SWAP2 EQ SWAP1 DUP2 PUSH2 0x1416 JUMPI JUMPDEST POP PUSH2 0x1263 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x13CC JUMPI POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x13C6 JUMPI DUP1 PUSH2 0x13BC PUSH2 0x13AB PUSH2 0x1391 PUSH2 0x13C1 SWAP5 DUP7 PUSH2 0x1324 JUMP JUMPDEST MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x13B5 DUP4 DUP9 PUSH2 0x1324 JUMP JUMPDEST MLOAD SWAP1 PUSH2 0x1435 JUMP JUMPDEST PUSH2 0x12C8 JUMP JUMPDEST PUSH2 0x1374 JUMP JUMPDEST POP POP SWAP1 POP JUMP JUMPDEST SWAP3 SWAP1 PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x140F JUMPI DUP1 PUSH2 0x13BC PUSH2 0x13EE PUSH2 0x1391 PUSH2 0x140A SWAP5 DUP7 PUSH2 0x1324 JUMP JUMPDEST PUSH2 0x13F8 DUP4 DUP10 PUSH2 0x1324 JUMP JUMPDEST MLOAD PUSH2 0x1403 DUP5 DUP9 PUSH2 0x1324 JUMP JUMPDEST MLOAD SWAP2 PUSH2 0x1486 JUMP JUMPDEST PUSH2 0x13D1 JUMP JUMPDEST POP POP POP SWAP1 POP JUMP JUMPDEST DUP4 MLOAD DUP1 ISZERO SWAP3 POP DUP3 ISZERO PUSH2 0x142B JUMPI JUMPDEST POP POP CODESIZE PUSH2 0x1364 JUMP JUMPDEST EQ SWAP1 POP CODESIZE DUP1 PUSH2 0x1423 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP3 PUSH1 0x20 DUP4 MLOAD SWAP4 ADD SWAP2 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x147E JUMPI RETURNDATASIZE SWAP1 PUSH2 0x1455 DUP3 PUSH2 0x1FD JUMP JUMPDEST SWAP2 PUSH2 0x1463 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x1AD JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST ISZERO PUSH2 0x1476 JUMPI POP JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD REVERT JUMPDEST PUSH1 0x60 SWAP1 PUSH2 0x146E JUMP JUMPDEST SWAP2 PUSH1 0x0 SWAP3 DUP4 SWAP3 PUSH1 0x20 DUP4 MLOAD SWAP4 ADD SWAP2 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x147E JUMPI RETURNDATASIZE SWAP1 PUSH2 0x1455 DUP3 PUSH2 0x1FD JUMP JUMPDEST PUSH2 0x14AF DUP2 PUSH2 0x1A8D JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x14F3 JUMPI PUSH2 0x14E1 SWAP1 PUSH2 0x14D2 PUSH2 0x4F1 DUP5 PUSH1 0x60 PUSH2 0x14E5 SWAP7 ADD SWAP1 PUSH2 0xCB0 JUMP JUMPDEST SWAP1 PUSH2 0x14DB PUSH2 0x5CD JUMP JUMPDEST SWAP2 PUSH2 0x1997 JUMP JUMPDEST ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x14EE JUMPI PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x1594 PUSH2 0x157B PUSH2 0x1541 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x0 MSTORE PUSH1 0x1C MSTORE PUSH1 0x3C PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x1575 PUSH2 0x4F1 PUSH2 0x156A PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 PUSH1 0x10 SHR AND SWAP1 JUMP JUMPDEST SWAP7 PUSH1 0x60 DUP2 ADD SWAP1 PUSH2 0xCB0 JUMP JUMPDEST SWAP1 PUSH2 0x15A0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP2 AND SUB PUSH2 0x14EE JUMPI PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0xEE1 SWAP2 PUSH2 0x15AD SWAP2 PUSH2 0x1777 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x15EE JUMP JUMPDEST PUSH1 0x5 GT ISZERO PUSH2 0x15BF JUMPI JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x15F7 DUP2 PUSH2 0x15B5 JUMP JUMPDEST DUP1 PUSH2 0x15FF JUMPI POP JUMP JUMPDEST PUSH2 0x1608 DUP2 PUSH2 0x15B5 JUMP JUMPDEST PUSH1 0x1 DUP2 SUB PUSH2 0x166F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0x1678 DUP2 PUSH2 0x15B5 JUMP JUMPDEST PUSH1 0x2 DUP2 SUB PUSH2 0x16DF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP1 PUSH2 0x16EB PUSH1 0x3 SWAP3 PUSH2 0x15B5 JUMP JUMPDEST EQ PUSH2 0x16F2 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 PUSH1 0x41 DUP2 MLOAD EQ PUSH1 0x0 EQ PUSH2 0x17A5 JUMPI PUSH2 0x17A1 SWAP2 PUSH1 0x20 DUP3 ADD MLOAD SWAP1 PUSH1 0x60 PUSH1 0x40 DUP5 ADD MLOAD SWAP4 ADD MLOAD PUSH1 0x0 BYTE SWAP1 PUSH2 0x17BB JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP1 PUSH1 0x2 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP3 SWAP2 SWAP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT PUSH2 0x1843 JUMPI SWAP2 PUSH1 0x80 SWAP5 SWAP4 SWAP2 PUSH1 0xFF PUSH1 0x20 SWAP5 PUSH1 0x40 MLOAD SWAP5 DUP6 MSTORE AND DUP5 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 SWAP4 DUP5 SWAP2 DUP3 DUP1 MSTORE PUSH1 0x1 GAS STATICCALL ISZERO PUSH2 0x183E JUMPI DUP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0x1838 JUMPI SWAP2 SWAP1 JUMP JUMPDEST POP PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x17AF JUMP JUMPDEST POP POP POP POP PUSH1 0x0 SWAP1 PUSH1 0x3 SWAP1 JUMP JUMPDEST PUSH1 0x40 PUSH1 0x5 SLOAD SWAP2 ADD CALLDATALOAD EQ PUSH2 0x1861 JUMPI PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x20 DUP3 MSTORE PUSH1 0x40 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x18C JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH2 0x18A3 PUSH1 0x20 SWAP3 DUP3 DUP2 MLOAD SWAP5 DUP6 SWAP3 ADD PUSH2 0x273 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1FB SWAP2 SWAP4 SWAP3 SWAP4 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP2 DUP4 MLOAD PUSH2 0x18C8 DUP2 PUSH1 0x20 SWAP7 DUP8 DUP1 DUP9 ADD SWAP2 ADD PUSH2 0x273 JUMP JUMPDEST DUP4 ADD PUSH2 0x18DC DUP3 MLOAD DUP1 SWAP4 DUP8 DUP1 DUP6 ADD SWAP2 ADD PUSH2 0x273 JUMP JUMPDEST ADD PUSH2 0x18EF DUP3 MLOAD DUP1 SWAP4 DUP7 DUP1 DUP6 ADD SWAP2 ADD PUSH2 0x273 JUMP JUMPDEST ADD SUB DUP1 DUP6 MSTORE ADD DUP4 PUSH2 0x1AD JUMP JUMPDEST PUSH1 0x40 PUSH2 0x1FB SWAP2 SWAP4 SWAP3 SWAP4 DUP2 MLOAD SWAP5 DUP2 PUSH2 0x191C DUP8 SWAP4 MLOAD DUP1 SWAP3 PUSH1 0x20 DUP1 DUP8 ADD SWAP2 ADD PUSH2 0x273 JUMP JUMPDEST DUP3 ADD SWAP1 PUSH1 0x20 DUP3 ADD MSTORE SUB PUSH1 0x20 DUP2 ADD DUP6 MSTORE ADD DUP4 PUSH2 0x1AD JUMP JUMPDEST ISZERO PUSH2 0x1939 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4B6579206E6F7420666F756E6400000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 DUP2 MLOAD DUP3 ADD SWAP1 PUSH1 0x20 SWAP3 PUSH1 0xC0 DUP2 DUP6 DUP6 ADD SWAP5 SUB SLT PUSH2 0x26E JUMPI PUSH1 0x40 DUP2 ADD MLOAD SWAP2 PUSH1 0x60 DUP3 ADD MLOAD SWAP4 PUSH1 0x80 DUP4 ADD MLOAD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF SWAP4 DUP5 DUP2 GT PUSH2 0x26E JUMPI DUP3 DUP9 PUSH2 0x19DE SWAP3 DUP5 ADD ADD PUSH2 0xE9F JUMP JUMPDEST SWAP4 PUSH1 0xA0 DUP3 ADD MLOAD DUP2 DUP2 GT PUSH2 0x26E JUMPI DUP4 DUP10 PUSH2 0x19F9 SWAP3 DUP6 ADD ADD PUSH2 0xE9F JUMP JUMPDEST SWAP4 PUSH1 0xC0 DUP4 ADD MLOAD SWAP2 DUP3 GT PUSH2 0x26E JUMPI DUP9 SWAP5 PUSH2 0x1A2F PUSH2 0x1A2A PUSH2 0x1A24 PUSH1 0x0 SWAP8 DUP10 PUSH2 0x1A35 SWAP8 PUSH2 0x1A41 SWAP10 ADD ADD PUSH2 0xE9F JUMP JUMPDEST SWAP4 PUSH2 0x1866 JUMP JUMPDEST PUSH2 0x1BCB JUMP JUMPDEST SWAP1 PUSH2 0x18A7 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 DUP1 SWAP3 PUSH2 0x1890 JUMP JUMPDEST SUB SWAP1 PUSH1 0x2 GAS STATICCALL ISZERO PUSH2 0x183E JUMPI PUSH1 0x0 PUSH2 0x1A5E PUSH2 0x1A35 DUP7 SWAP4 DUP4 MLOAD SWAP1 PUSH2 0x18FB JUMP JUMPDEST SUB SWAP1 PUSH1 0x2 GAS STATICCALL ISZERO PUSH2 0x183E JUMPI PUSH2 0xEE1 SWAP4 PUSH2 0x1A83 PUSH1 0x0 MLOAD SWAP5 DUP3 ADD MLOAD ISZERO ISZERO DUP1 PUSH2 0x1A88 JUMPI PUSH2 0x1932 JUMP JUMPDEST PUSH2 0x1C7D JUMP JUMPDEST PUSH2 0x1932 JUMP JUMPDEST PUSH2 0x1A9A PUSH1 0x20 DUP3 ADD DUP3 PUSH2 0xCB0 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x40 MLOAD SWAP2 DUP3 CALLDATACOPY KECCAK256 PUSH1 0x40 DUP1 MLOAD SWAP3 PUSH1 0x20 DUP5 ADD SWAP3 DUP2 CALLDATALOAD DUP5 MSTORE DUP3 DUP6 ADD MSTORE ADD CALLDATALOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x60 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 DUP3 DUP3 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT OR PUSH2 0x18C JUMPI DUP2 PUSH1 0x40 MSTORE DUP3 MLOAD SWAP1 KECCAK256 SWAP2 PUSH1 0xA0 DUP2 ADD SWAP3 DUP4 MSTORE ADDRESS PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 CHAINID SWAP2 ADD MSTORE PUSH1 0x60 DUP2 MSTORE PUSH2 0x1B01 DUP2 PUSH2 0x191 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1B14 DUP3 PUSH2 0x170 JUMP JUMPDEST PUSH1 0x40 DUP3 MSTORE PUSH32 0x6768696A6B6C6D6E6F707172737475767778797A303132333435363738392D5F PUSH1 0x40 DUP4 PUSH32 0x4142434445464748494A4B4C4D4E4F505152535455565758595A616263646566 PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x3 SHL SWAP2 DUP1 DUP4 DIV PUSH1 0x8 EQ SWAP1 ISZERO OR ISZERO PUSH2 0xD3E JUMPI JUMP JUMPDEST SWAP1 PUSH2 0x1B86 DUP3 PUSH2 0x1FD JUMP JUMPDEST PUSH2 0x1B93 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x1AD JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH2 0x1BC1 DUP3 SWAP5 PUSH2 0x1FD JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x1C74 JUMPI PUSH2 0x1BDA PUSH2 0x1B07 JUMP JUMPDEST PUSH2 0x1C00 PUSH2 0x1BF1 PUSH2 0x1BEA DUP5 MLOAD PUSH2 0x1B66 JUMP JUMPDEST PUSH1 0x6 SWAP1 DIV SWAP1 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x6 SWAP1 MOD PUSH2 0x1C66 JUMPI PUSH2 0x1B7C JUMP JUMPDEST SWAP2 PUSH1 0x20 DUP4 ADD SWAP2 DUP2 DUP1 MLOAD ADD SWAP3 JUMPDEST DUP4 DUP4 LT PUSH2 0x1C1A JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x4 SWAP1 PUSH1 0x3 DUP1 SWAP5 ADD SWAP4 DUP5 MLOAD PUSH1 0x1 SWAP1 PUSH1 0x3F SWAP1 DUP3 DUP3 DUP3 PUSH1 0x12 SHR AND DUP9 ADD ADD MLOAD DUP6 MSTORE8 DUP3 DUP3 DUP3 PUSH1 0xC SHR AND DUP9 ADD ADD MLOAD DUP4 DUP7 ADD MSTORE8 DUP3 DUP3 DUP3 PUSH1 0x6 SHR AND DUP9 ADD ADD MLOAD PUSH1 0x2 DUP7 ADD MSTORE8 AND DUP6 ADD ADD MLOAD SWAP1 DUP3 ADD MSTORE8 ADD PUSH2 0x1C0C JUMP JUMPDEST PUSH2 0x1C6F SWAP1 PUSH2 0x12C8 JUMP JUMPDEST PUSH2 0x1B7C JUMP JUMPDEST POP PUSH2 0xEE1 PUSH2 0xD43 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 DUP1 ISZERO DUP1 ISZERO PUSH2 0x1E98 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x1E6E JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x1E44 JUMPI JUMPDEST PUSH2 0x1E3B JUMPI PUSH2 0xEE1 SWAP4 PUSH2 0x1E30 PUSH2 0x1CAA PUSH2 0x2015 JUMP JUMPDEST SWAP2 PUSH2 0x1CB3 PUSH2 0x1EE JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP3 ADD MSTORE DUP4 MSTORE PUSH1 0x20 DUP2 MLOAD SWAP2 ADD MLOAD PUSH2 0x1CD6 PUSH2 0x1EE JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x1CF5 PUSH1 0x20 DUP5 ADD SWAP2 DUP1 DUP4 MSTORE PUSH2 0x20A4 JUMP JUMPDEST SWAP1 PUSH2 0x1E21 PUSH2 0x1D0B PUSH1 0x40 DUP7 ADD SWAP4 DUP1 DUP6 MSTORE DUP4 MLOAD PUSH2 0x205A JUMP JUMPDEST SWAP3 PUSH1 0x60 DUP7 ADD SWAP4 DUP5 MSTORE PUSH2 0x1E11 PUSH2 0x1E01 PUSH2 0x1D21 PUSH2 0x1EE JUMP JUMPDEST PUSH32 0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296 DUP2 MSTORE PUSH32 0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x1D84 PUSH1 0x80 DUP11 ADD SWAP2 DUP1 DUP4 MSTORE DUP8 MLOAD SWAP1 PUSH2 0x205A JUMP JUMPDEST PUSH1 0xA0 DUP11 ADD MSTORE PUSH2 0x1D96 DUP2 MLOAD DUP6 MLOAD SWAP1 PUSH2 0x205A JUMP JUMPDEST PUSH1 0xC0 DUP11 ADD MSTORE PUSH2 0x1DA8 DUP2 MLOAD DUP9 MLOAD SWAP1 PUSH2 0x205A JUMP JUMPDEST PUSH1 0xE0 DUP11 ADD MSTORE PUSH2 0x1DB7 DUP2 MLOAD PUSH2 0x20A4 JUMP JUMPDEST SWAP1 PUSH2 0x1DCC PUSH2 0x100 DUP12 ADD SWAP3 DUP1 DUP5 MSTORE DUP9 MLOAD SWAP1 PUSH2 0x205A JUMP JUMPDEST PUSH2 0x120 DUP12 ADD MSTORE PUSH2 0x1DDF DUP3 MLOAD DUP7 MLOAD SWAP1 PUSH2 0x205A JUMP JUMPDEST PUSH2 0x140 DUP12 ADD MSTORE PUSH2 0x1DF2 DUP3 MLOAD DUP10 MLOAD SWAP1 PUSH2 0x205A JUMP JUMPDEST PUSH2 0x160 DUP12 ADD MSTORE MLOAD SWAP1 MLOAD SWAP1 PUSH2 0x205A JUMP JUMPDEST PUSH2 0x180 DUP9 ADD SWAP5 DUP2 DUP7 MSTORE MLOAD SWAP1 PUSH2 0x205A JUMP JUMPDEST PUSH2 0x1A0 DUP8 ADD MSTORE DUP3 MLOAD SWAP1 MLOAD SWAP1 PUSH2 0x205A JUMP JUMPDEST PUSH2 0x1C0 DUP6 ADD MSTORE MLOAD SWAP1 MLOAD SWAP1 PUSH2 0x205A JUMP JUMPDEST PUSH2 0x1E0 DUP3 ADD MSTORE PUSH2 0x1EA0 JUMP JUMPDEST POP POP POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551 DUP3 LT ISZERO PUSH2 0x1C97 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551 DUP2 LT ISZERO PUSH2 0x1C90 JUMP JUMPDEST POP DUP2 ISZERO PUSH2 0x1C89 JUMP JUMPDEST SWAP4 SWAP3 SWAP1 SWAP2 PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551 SWAP1 DUP2 DUP5 LT DUP1 ISZERO SWAP1 PUSH2 0x1FB0 JUMPI JUMPDEST PUSH2 0x1FA6 JUMPI PUSH2 0x1EDF DUP3 SWAP2 PUSH2 0x236E JUMP JUMPDEST DUP1 SWAP4 MULMOD SWAP2 DUP4 MULMOD PUSH1 0x0 DUP1 SWAP2 DUP2 SWAP4 PUSH1 0x80 SWAP2 DUP3 JUMPDEST PUSH2 0x1F08 JUMPI POP POP POP PUSH2 0x1F03 SWAP4 SWAP5 SWAP6 POP PUSH2 0x20C4 JUMP JUMPDEST POP EQ SWAP1 JUMP JUMPDEST DUP6 PUSH2 0x1F84 JUMPI JUMPDEST DUP9 DUP2 PUSH1 0xFE SHR PUSH1 0xC DUP5 PUSH1 0xFC SHR AND OR DUP1 PUSH2 0x1F3B JUMPI JUMPDEST POP POP PUSH2 0x1F34 SWAP1 PUSH1 0x2 SWAP3 DUP4 SHL SWAP3 SHL SWAP3 PUSH2 0x1FCB JUMP JUMPDEST SWAP2 DUP3 PUSH2 0x1EF0 JUMP JUMPDEST PUSH2 0x1F77 SWAP4 SWAP8 PUSH2 0x1F34 SWAP8 PUSH1 0x40 PUSH2 0x1F6E PUSH2 0x1F56 DUP6 DUP8 SWAP12 SWAP9 SWAP12 PUSH2 0x1FBA JUMP JUMPDEST MLOAD MLOAD SWAP5 PUSH1 0x20 PUSH2 0x1F65 DUP3 DUP10 PUSH2 0x1FBA JUMP JUMPDEST MLOAD ADD MLOAD SWAP7 PUSH2 0x1FBA JUMP JUMPDEST MLOAD ADD MLOAD SWAP5 PUSH2 0x219B JUMP JUMPDEST SWAP6 SWAP1 SWAP5 POP SWAP1 SWAP3 DUP9 CODESIZE PUSH2 0x1F21 JUMP JUMPDEST SWAP3 SWAP5 PUSH2 0x1F95 SWAP2 SWAP5 PUSH2 0x1F9B SWAP4 SWAP7 PUSH2 0x22B8 JUMP JUMPDEST SWAP2 PUSH2 0x22B8 JUMP JUMPDEST SWAP5 SWAP2 SWAP4 SWAP1 SWAP4 SWAP3 PUSH2 0x1F0E JUMP JUMPDEST POP PUSH1 0x0 SWAP5 POP POP POP POP JUMP JUMPDEST POP DUP2 DUP2 LT ISZERO PUSH2 0x1ED1 JUMP JUMPDEST SWAP1 PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x1338 JUMPI PUSH1 0x5 SHL ADD SWAP1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xD3E JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x2003 DUP3 PUSH2 0x170 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP4 DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x200 DUP1 DUP4 ADD DUP4 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x18C JUMPI PUSH1 0x40 MSTORE DUP3 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x2045 JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH2 0x2050 PUSH2 0x1FF6 JUMP JUMPDEST DUP2 DUP5 ADD MSTORE ADD PUSH2 0x2039 JUMP JUMPDEST PUSH2 0x2087 SWAP2 PUSH2 0x2066 PUSH2 0x1FF6 JUMP JUMPDEST POP DUP2 MLOAD SWAP2 PUSH1 0x40 PUSH1 0x20 DUP3 ADD MLOAD SWAP2 ADD MLOAD DUP3 MLOAD SWAP2 PUSH1 0x40 PUSH1 0x20 DUP6 ADD MLOAD SWAP5 ADD MLOAD SWAP5 PUSH2 0x219B JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x2095 DUP5 PUSH2 0x170 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x2087 SWAP1 PUSH2 0x20B0 PUSH2 0x1FF6 JUMP JUMPDEST POP DUP1 MLOAD SWAP1 PUSH1 0x40 PUSH1 0x20 DUP3 ADD MLOAD SWAP2 ADD MLOAD SWAP2 PUSH2 0x22B8 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 DUP2 ISZERO PUSH2 0x218F JUMPI DUP2 PUSH1 0x0 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 DUP1 SWAP7 GT PUSH2 0x2185 JUMPI JUMPDEST POP POP PUSH1 0x40 MLOAD SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MSTORE PUSH1 0x20 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFD PUSH1 0x80 DUP4 ADD MSTORE DUP4 PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 PUSH1 0xC0 DUP2 PUSH1 0x5 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF STATICCALL ISZERO PUSH2 0x13E JUMPI POP DUP3 SWAP1 MLOAD DUP2 DUP1 DUP3 DUP1 MULMOD DUP1 SWAP8 MULMOD SWAP6 MULMOD SWAP1 MULMOD SWAP1 JUMP JUMPDEST MOD SWAP2 POP DUP4 CODESIZE PUSH2 0x20FB JUMP JUMPDEST POP POP SWAP1 POP PUSH1 0x0 SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP4 SWAP6 SWAP4 SWAP2 SWAP1 DUP2 PUSH2 0x21AD JUMPI POP POP POP SWAP3 SWAP2 SWAP1 JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP5 SWAP6 DUP7 ISZERO PUSH2 0x22AE JUMPI PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 DUP6 DUP2 SWAP7 SWAP6 DUP3 DUP1 DUP4 DUP2 SWAP10 MULMOD SWAP12 DUP2 DUP14 SWAP10 SWAP8 DUP2 DUP7 DUP2 DUP1 DUP1 DUP16 SWAP14 DUP9 DUP1 MULMOD DUP1 SWAP14 MULMOD SWAP13 DUP14 SWAP10 MULMOD SWAP13 DUP2 DUP8 DUP14 MULMOD SWAP1 MULMOD SWAP13 MULMOD SWAP1 MULMOD SWAP4 ADDMOD SWAP6 DUP2 DUP2 LT PUSH2 0x22A7 JUMPI JUMPDEST SUB SWAP6 DUP3 DUP1 DUP1 DUP10 PUSH1 0x2 MULMOD DUP1 MULMOD SWAP3 DUP2 DUP1 DUP5 DUP2 DUP8 DUP14 MULMOD SWAP4 DUP2 DUP2 LT PUSH2 0x22A0 JUMPI JUMPDEST SUB PUSH1 0x2 MULMOD SWAP5 DUP2 DUP7 DUP1 MULMOD SWAP9 MULMOD SWAP7 DUP3 DUP1 DUP10 PUSH1 0x2 MULMOD DUP4 ADDMOD SWAP1 DUP2 DUP2 LT PUSH2 0x2299 JUMPI JUMPDEST SUB SWAP12 DUP13 SWAP4 PUSH1 0x2 MULMOD MULMOD SWAP5 DUP2 DUP2 LT PUSH2 0x2292 JUMPI JUMPDEST SUB SWAP1 MULMOD SWAP8 DUP3 DUP10 LT PUSH2 0x2289 JUMPI JUMPDEST DUP6 SWAP2 DUP3 SWAP2 ADDMOD SWAP3 DUP1 MULMOD SWAP6 DUP3 DUP8 LT PUSH2 0x2280 JUMPI JUMPDEST SWAP7 SUB SWAP5 SUB MULMOD SWAP1 JUMP JUMPDEST SWAP6 DUP5 ADD SWAP6 PUSH2 0x2278 JUMP JUMPDEST SWAP8 DUP6 ADD SWAP8 PUSH2 0x2267 JUMP JUMPDEST DUP4 ADD PUSH2 0x225B JUMP JUMPDEST DUP4 ADD PUSH2 0x224A JUMP JUMPDEST DUP3 ADD PUSH2 0x222D JUMP JUMPDEST DUP4 ADD PUSH2 0x2211 JUMP JUMPDEST POP SWAP5 POP POP SWAP2 SWAP3 SWAP2 SWAP1 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP2 DUP2 DUP6 DUP1 MULMOD SWAP6 DUP3 DUP1 DUP1 DUP1 DUP1 DUP1 DUP13 DUP8 MULMOD PUSH1 0x4 MULMOD SWAP11 DUP1 MULMOD PUSH1 0x8 MULMOD SWAP3 DUP2 DUP1 DUP1 DUP1 DUP1 DUP10 DUP1 MULMOD DUP1 MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC MULMOD SWAP3 DUP1 MULMOD PUSH1 0x3 MULMOD ADDMOD DUP2 DUP10 PUSH1 0x2 MULMOD DUP3 DUP3 DUP1 MULMOD DUP2 DUP2 LT PUSH2 0x2367 JUMPI JUMPDEST SUB DUP10 DUP2 DUP1 SWAP12 LT PUSH2 0x2360 JUMPI JUMPDEST SUB SWAP1 MULMOD DUP2 DUP2 LT PUSH2 0x2359 JUMPI JUMPDEST SUB SWAP5 MULMOD PUSH1 0x2 MULMOD SWAP1 JUMP JUMPDEST DUP4 ADD PUSH2 0x2350 JUMP JUMPDEST DUP4 ADD PUSH2 0x2345 JUMP JUMPDEST DUP4 ADD PUSH2 0x233A JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551 DUP1 DUP3 GT PUSH2 0x240F JUMPI JUMPDEST PUSH1 0x40 MLOAD SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MSTORE PUSH1 0x20 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC63254F PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0xC0 DUP2 PUSH1 0x5 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF STATICCALL ISZERO PUSH2 0x26E JUMPI MLOAD SWAP1 JUMP JUMPDEST DUP1 SWAP2 MOD SWAP1 PUSH2 0x2397 JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"281:6995:19:-:0;;;;;;;;;-1:-1:-1;281:6995:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;2276:148;;:::i;:::-;281:6995;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;281:6995:19;;;;;;:::o;:::-;-1:-1:-1;281:6995:19;;;;;;;;;;-1:-1:-1;;281:6995:19;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;957:5;281:6995;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;2742:71;2709:23;;;:::i;:::-;2750:20;2742:71;:::i;:::-;2909:69;2877:22;;;:::i;:::-;2917;2909:69;:::i;:::-;3320:1;281:6995;;3011:24;;3007:79;;281:6995;3122:1;3099:24;;3095:84;;281:6995;3215:1;3192:24;;3188:96;;281:6995;3297:24;3293:103;;281:6995;3405:17;3413:9;:5;281:6995;3413:9;:::i;:::-;:5;281:6995;;3293:103;281:6995;3369:15;;;3337:48;3369:15;;;;:::i;:::-;281:6995;;;:::i;:::-;3337:48;:::i;:::-;3293:103;;;3188:96;3232:41;281:6995;3257:15;;;;;;:::i;281:6995::-;3232:41;:::i;:::-;3188:96;;3095:84;3139:29;281:6995;3152:15;;;;;;:::i;281:6995::-;3139:29;:::i;:::-;3095:84;;3007:79;3051:24;281:6995;3059:15;;;;;;:::i;281:6995::-;3051:24;:::i;:::-;3007:79;;281:6995;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;756:12;281:6995;;;;;;;;;;;;;;;;;;-1:-1:-1;281:6995:19;;;;;;;:::i;:::-;;;;;;;;;756:12;;;;281:6995;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;-1:-1:-1;281:6995:19;;;-1:-1:-1;281:6995:19;;;;;;;-1:-1:-1;281:6995:19;;-1:-1:-1;281:6995:19;;-1:-1:-1;281:6995:19;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;281:6995:19;;;;;;;;;;;;;-1:-1:-1;;281:6995:19;;;;;;;;-1:-1:-1;281:6995:19;;;;;3235:495:6;3291:13;281:6995:19;;;;;;3290:14:6;3336:34;;;;;;3235:495;3335:97;;;;3235:495;281:6995:19;;;;3514:16:6;;281:6995:19;;3291:13:6;281:6995:19;;;3291:13:6;281:6995:19;;3514:16:6;3540:65;;3235:495;3614:1;;:::i;:::-;3625:99;;3235:495::o;3625:99::-;3659:21;281:6995:19;3291:13:6;281:6995:19;;3291:13:6;281:6995:19;;3659:21:6;281:6995:19;;3529:1:6;281:6995:19;;3699:14:6;;281:6995:19;;3699:14:6;3235:495::o;3540:65::-;3574:20;281:6995:19;;3291:13:6;281:6995:19;;;3291:13:6;281:6995:19;;3574:20:6;3540:65;;281:6995:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;3335:97:6;3404:4;1702:19:10;:23;;-1:-1:-1;1702:23:10;3376:55:6;;3335:97;;;;;3376:55;3430:1;281:6995:19;;;;3414:17:6;3376:55;;;3336:34;3369:1;281:6995:19;;;3354:16:6;;-1:-1:-1;3336:34:6;;2276:148:19;2383:4;281:6995;;2359:28;281:6995;;;2359:28;281:6995;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;281:6995:19;;;;;;;;;;;;;;;;;;;;;2276:148::o;281:6995::-;;;;-1:-1:-1;281:6995:19;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;281:6995:19;;;;;;;;;;;;;;;;;;;;;;;2276:148::o;281:6995::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;281:6995:19;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;281:6995:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;281:6995:19;;;;2430:103;281:6995;;2504:22;281:6995;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;281:6995:19;;;;;;;;;;;;;;;;;;;;2430:103::o;281:6995::-;;;;;;;;;;;;;;;;;;-1:-1:-1;281:6995:19;;;;;;;;;;;;;;;;;;;;;;2430:103::o;281:6995::-;;;;;;;;;;;;;;;;;-1:-1:-1;281:6995:19;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;3122:1;281:6995;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;281:6995:19;;:::o;975:491::-;1096:4;281:6995;1071:21;281:6995;;;;1071:29;281:6995;;1263:69;2240:23;1263:69;;;1361:19;281:6995;;:::i;:::-;-1:-1:-1;281:6995:19;;-1:-1:-1;1361:19:19;;;281:6995;;;:::i;:::-;1361:19;;;281:6995;1361:19;:::i;:::-;281:6995;;-1:-1:-1;281:6995:19;;;;;;;;-1:-1:-1;281:6995:19;;2240:23;1430:29;281:6995;1071:21;281:6995;;1071:21;281:6995;;;;;;;;;;1071:21;281:6995;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;1472:544::-;281:6995;1575:21;281:6995;;;;;;1737:82;;281:6995;;;;;;;;1737:82;;;281:6995;;;;;;;;;;;;;;;;;1737:82;281:6995;1737:82;;1962:8;1737:82;;281:6995;;;;:::i;:::-;;;;:::i;:::-;;;;1737:82;1857:34;;281:6995;;1857:34;;281:6995;2240:23;281:6995;1600:5;281:6995;;1600:5;281:6995;;2240:23;1962:8;:::i;:::-;1981:28;2005:4;281:6995;1575:21;281:6995;;;1575:21;281:6995;;;;;;;;;;1575:21;281:6995;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3543:231::-;281:6995;;3652:81;;281:6995;;;;;;;3652:81;;;281:6995;;;;;:::i;:::-;;;;;;;;;;;;;;;3762:4;3652:81;;281:6995;3652:81;;281:6995;3652:81;;281:6995;;;;:::i;:::-;;;3762:4;:::i;281:6995::-;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;3948:707::-;4128:53;3948:707;4128:53;281:6995;;;4128:53;;;;;;:::i;:::-;281:6995;;;4191:162;281:6995;;;;4212:26;;;:96;;;;3948:707;4191:162;;:::i;:::-;281:6995;;4367:12;;4405:13;-1:-1:-1;4437:3:19;281:6995;;4420:15;;;;;4466:7;4460:26;4466:7;;4437:3;4466:7;;;:::i;:::-;281:6995;;;;;4466:7;4478;;;;:::i;:::-;;4460:26;;:::i;:::-;4437:3;:::i;:::-;4405:13;;4420:15;;;;;3948:707::o;4363:286::-;4536:13;;-1:-1:-1;4568:3:19;281:6995;;4551:15;;;;;4597:7;4616;4597;;4568:3;4597:7;;;:::i;:::-;4606:8;;;;:::i;:::-;281:6995;4616:7;;;;:::i;:::-;;;;:::i;4568:3::-;4536:13;;4551:15;;;;;;3948:707::o;4212:96::-;281:6995;;4259:17;;;-1:-1:-1;4259:48:19;;;;4212:96;;;;;;4259:48;4280:27;;-1:-1:-1;4259:48:19;;;;4661:286;4383:1;4661:286;;;4783:31;;;;;;;;;281:6995;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;4383:1;4783:31;281:6995;;;;4828:8;4824:117;;4661:286;:::o;4824:117::-;4783:31;4852:79;;;;;281:6995;;;;;4661:286;;4783:31;4661:286;;;4783:31;;;;;;;;281:6995;;;;;;;;;:::i;5007:595::-;5133:21;;;:::i;:::-;5168;281:6995;;;5168:21;;;5223:124;5259:16;281:6995;5259:16;;;5365:11;5259:16;;;;:::i;281:6995::-;;;;:::i;:::-;5223:124;;:::i;:::-;5365:11;;281:6995;5365:11;5361:25;;5407:1;5400:8;:::o;5361:25::-;5321:12;5378:8;:::o;5164:432::-;5507:46;5523:30;5454:35;281:6995;5454:35;7353:157:15;;;;;;;;7120:396;;5454:35:19;281:6995;5536:16;281:6995;5507:12;281:6995;;;;;;;;;5536:16;;;;;;:::i;281:6995::-;5523:30;;:::i;:::-;281:6995;;;;5507:46;281:6995;;5507:46;5503:60;;5507:12;5577:8;:::o;3661:227:15:-;3849:5;3661:227;3800:27;3661:227;3800:27;:::i;:::-;3849:5;;;;:::i;281:6995:19:-;;-1:-1:-1;281:6995:19;;;:::o;:::-;;;;;;;;;;570:511:15;281:6995:19;;;:::i;:::-;638:29:15;;;683:7;:::o;634:441::-;281:6995:19;;;:::i;:::-;743:29:15;734:38;;743:29;;281:6995:19;;788:34:15;;;281:6995:19;788:34:15;;;281:6995:19;;;;;;;;;;;;;788:34:15;730:345;281:6995:19;;;:::i;:::-;852:35:15;843:44;;852:35;;281:6995:19;;903:41:15;;;281:6995:19;903:41:15;;;281:6995:19;;;;;;;;;;;;;788:34:15;839:236;281:6995:19;;974:30:15;281:6995:19;;:::i;:::-;965:39:15;961:114;;570:511::o;961:114::-;281:6995:19;;1020:44:15;;;281:6995:19;1020:44:15;;;281:6995:19;;;;;;;;;;;;;;;;;;788:34:15;2145:730;;2283:2;281:6995:19;;2263:22:15;2259:610;2283:2;;;2746:25;2546:180;;;;;;;;;;;;;;-1:-1:-1;2546:180:15;2746:25;;:::i;:::-;2739:32;;:::o;2259:610::-;2802:56;;2818:1;2802:56;2822:35;2802:56;:::o;281:6995:19:-;;;;;;;;;;5009:1456:15;;;;6021:66;6008:79;;6004:161;;281:6995:19;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6276:24:15;;;;;;;;;;;;;;281:6995:19;;;6314:20:15;6310:101;;6421:37;5009:1456;:::o;6310:101::-;6350:50;6276:24;6350:50;:::o;6276:24::-;;:::i;6004:161::-;6103:51;;;;6119:1;6103:51;6123:30;6103:51;:::o;5651:164:19:-;5759:12;5775:5;281:6995;5759:12;;281:6995;5759:21;5755:35;;5807:1;5651:164;:::o;5755:35::-;-1:-1:-1;5782:8:19;:::o;281:6995::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;5821:1142;;281:6995;;6215:119;;;;;281:6995;6215:119;;;;281:6995;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;6376:37;6390:22;281:6995;-1:-1:-1;281:6995:19;;6454:114;281:6995;;;;;;:::i;:::-;6390:22;;:::i;:::-;6376:37;:::i;:::-;6454:114;;:::i;:::-;281:6995;;;;;;;:::i;:::-;6599:29;;;;;;;;-1:-1:-1;281:6995:19;6663:43;6599:29;;;;6663:43;;:::i;281:6995::-;6656:51;;6599:29;6656:51;;;;;6816:113;6656:51;6718:70;-1:-1:-1;6656:51:19;6726:15;;;281:6995;6726:20;;:44;;;6718:70;:::i;:::-;6816:113;:::i;6726:44::-;6718:70;:::i;6997:193::-;552:15:25;;;;;;:::i;:::-;1203:177;;;;;;;;;281:6995:19;;624:46:25;552:15;624:46;;281:6995:19;;;;;;;;;594:12:25;281:6995:19;;;;;;624:46:25;;281:6995:19;;;;;;;;;;;;;;1203:177:25;281:6995:19;;;871:23:25;;7127:55:19;;;;281:6995;;;7161:4;281:6995;;;;;7168:13;281:6995;;;;7127:55;;;;;:::i;:::-;281:6995;7117:66;;6997:193;:::o;281:6995::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o;491:66:23:-;;;;;;;;;1484:1;491:66;;;;;;;:::o;:::-;;281:6995:19;;;:::i;:::-;;;;;;;:::i;:::-;;;;491:66:23;;;;;:::i;:::-;;;;;;;;:::o;651:3206::-;281:6995:19;;941:16:23;937:31;;281:6995:19;;:::i;:::-;1593:21:23;1469;1470:15;281:6995:19;;1470:15:23;:::i;:::-;1489:1;491:66;;;;1469:21;281:6995:19;;1489:1:23;491:66;;1500:61;;1593:21;:::i;:::-;1668:2159;;;;;;;;;;;;;;;;3837:13;;;;651:3206;:::o;1668:2159::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1489:1;1668:2159;;;;;;;;;;;;;;;;;;;;;;1500:61;1539:11;;;:::i;:::-;1593:21;:::i;937:31::-;281:6995:19;;;:::i;1633:438:24:-;;;;1780:6;;:16;;;;1633:438;1780:27;;;;1633:438;1780:38;;;;1633:438;1776:163;;2027:37;281:6995:19;5341:33:24;281:6995:19;;:::i;:::-;;;;:::i;:::-;1785:1:24;281:6995:19;;1785:1:24;4506:15;;;281:6995:19;1785:1:24;4506:15;;;281:6995:19;4494:27:24;;4506:15;281:6995:19;;4567:15:24;;281:6995:19;;;:::i;:::-;;;;4506:15:24;4543:43;;281:6995:19;4584:1:24;4506:15;4543:43;;281:6995:19;4614:24:24;4506:15;1264:66;;4531:55;;;;4614:24;:::i;:::-;1264:66;5285:33;4660:32;4506:15;1264:66;;4602:36;;;;4671:9;;4660:32;:::i;:::-;1264:66;;;;4648:44;;;5229:33;5159:32;281:6995:19;;:::i;:::-;625:66:24;281:6995:19;;727:66:24;4506:15;4715:17;;281:6995:19;4584:1:24;4506:15;4715:17;;281:6995:19;4769:32:24;1264:66;;;4703:29;;;;4791:9;;4769:32;;:::i;:::-;1264:66;;;4757:44;4823:32;4834:9;;4845;;4823:32;;:::i;:::-;1264:66;;;4811:44;4877:32;4888:9;;4899;;4877:32;;:::i;:::-;1264:66;;;4865:44;4932:24;4946:9;;4932:24;:::i;:::-;1264:66;4993:32;1264:66;;;4920:36;;;;5015:9;;4993:32;;:::i;:::-;1264:66;;;4981:44;5048:32;5059:9;;5070;;5048:32;;:::i;:::-;1264:66;;;5035:45;5103:32;5114:9;;5125;;5103:32;;:::i;:::-;1264:66;;;5090:45;5170:9;5181;;5159:32;;:::i;:::-;1264:66;;;5146:45;;;;5252:9;5229:33;;:::i;:::-;1264:66;;;5216:46;5296:10;;5308:9;;5285:33;;:::i;:::-;1264:66;;;5272:46;5352:10;5364:9;;5341:33;;:::i;:::-;1264:66;;;5328:46;2027:37;:::i;1776:163::-;1916:12;;;;1785:1;1916:12;:::o;1780:38::-;1811:7;946:66;1811:7;;;1780:38;;:27;1800:7;946:66;1800:7;;;1780:27;;:16;1790:6;;;1780:16;;2077:445;;;;;946:66;2238:7;;;;;;:18;;;2077:445;2234:61;;10624:23;;;;:::i;:::-;2351:16;;;2387;;;-1:-1:-1;3108:10:24;3128;;3148:15;3160:3;3198:652;;3205:8;;;3868:28;;;;;;;;;:::i;:::-;2508:6;;2077:445;:::o;3198:652::-;3233:5;3229:150;;3198:652;281:6995:19;;;;;;;;;3416:83:24;3517:9;3513:263;;3198:652;281:6995:19;;3833:6:24;281:6995:19;;;;;;;3833:6:24;;:::i;:::-;3198:652;;;;3513:263;3558:203;3654:13;;3833:6;3654:13;3728:15;:13;3654;;;;;;;:::i;:::-;;281:6995:19;3691:13:24;:15;:13;;;;:::i;:::-;;:15;281:6995:19;3728:13:24;;:::i;:::-;;:15;281:6995:19;3558:203:24;;:::i;:::-;3546:215;;;-1:-1:-1;3546:215:24;;3513:263;;;;3229:150;3270:32;;;;;3332;3270;;;:::i;:::-;3332;;:::i;:::-;3320:44;;;;;3229:150;;;2234:61;-1:-1:-1;2279:5:24;;-1:-1:-1;;;;2272:12:24:o;2238:18::-;2249:7;;;;;2238:18;;1264:66;;;;;;;;;;;;:::o;:::-;;;;;;;;:::o;281:6995:19:-;;;;;;;:::i;:::-;-1:-1:-1;281:6995:19;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;281:6995:19;;;;;;;;;:::o;:::-;;;;;:::i;:::-;;;;;;;;5387:266:24;5573:41;5387:266;281:6995:19;;:::i;:::-;;;;5585:4:24;5591;5585;;;281:6995:19;5591:4:24;;281:6995:19;;;5603:4:24;5591;5585;5603;;281:6995:19;5609:4:24;;281:6995:19;5573:41:24;;:::i;:::-;281:6995:19;5591:4:24;281:6995:19;;;;;:::i;:::-;;;5585:4:24;5631:15;;281:6995:19;5591:4:24;5631:15;;281:6995:19;5387:266:24;:::o;5659:239::-;5821:38;5659:239;281:6995:19;;:::i;:::-;;;;5850:3:24;5855;5850;;;281:6995:19;5855:3:24;;281:6995:19;5821:38:24;;:::i;6053:366::-;;;;6191:6;;6187:50;;10624:23;-1:-1:-1;836:66:24;10965:721;;;;;;;6053:366;10965:721;;;;;;;;;;;;;;;;;;;;;;281:6995:19;10965:721:24;;;;;;;;;;;;;;;;;;;;;;;6299:22;;;;;6337:21;;;6383:24;;6373:39;;6053:366;:::o;10965:721::-;;;-1:-1:-1;10965:721:24;;;;6187:50;6213:13;;;;6196:1;6213:13;6196:1;6213:13;:::o;6611:2353::-;;;;;;6798:7;;;6885:19;;;;;;:::o;6794:248::-;6925:7;;;;;;;6921:121;;7052:1877;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6794:248;7052:1877;;;;;;;;;;;;;;;;;;;;;;;;6794:248;7052:1877;;;;;;;;;;;;;;;;;;;;;;;;6794:248;7052:1877;;;;;;;;;;;;;6794:248;7052:1877;;;;;;;;;6794:248;7052:1877;;;;;;;;;;;;;;6794:248;7052:1877;;;;;6611:2353;:::o;7052:1877::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6921:121;7012:19;;;;;;;;:::o;9116:1207::-;;;;9263:1054;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9116:1207;9263:1054;;;;;;;;9116:1207;9263:1054;;;;;;;;9116:1207;9263:1054;;;;;9116:1207;:::o;9263:1054::-;;;;;;;;;;;;;;;10801:891;946:66;10965:721;;;;;10801:891;10965:721;;;;;;;;;;;;;;;;;;;;281:6995:19;10965:721:24;;;;;;;;;;;;;;;;;;;;10801:891::o;10965:721::-;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"1850600","executionCost":"27298","totalCost":"1877898"},"external":{"entrypoint((uint256,bytes,uint256,bytes))":"infinite","getAddressOwner()":"2323","getNonce()":"2355","getPassKeyOwner()":"infinite","getUserOpHash((uint256,bytes,uint256,bytes))":"infinite","initialize((uint256,uint256,string))":"infinite","passKeyOwnerEnabled()":"2345"},"internal":{"_call(address,uint256,bytes memory)":"infinite","_changeAddressOwner(address)":"infinite","_changePassKeyOwner(struct PassKeyId memory)":"infinite","_initialize(struct PassKeyId memory)":"infinite","_validateNonce(struct UserOp calldata)":"2147","_validateUserOp(struct UserOp calldata)":"infinite","changeOwnershipToAddress(bytes memory)":"infinite","changeOwnershipToPassKeyAddress(bytes memory)":"infinite","execute(bytes memory)":"infinite","executeBatch(bytes memory)":"infinite","validatePassKeySig(bytes memory,bytes32,struct PassKeyId memory)":"infinite"}},"methodIdentifiers":{"entrypoint((uint256,bytes,uint256,bytes))":"f0f05cef","getAddressOwner()":"b627e20f","getNonce()":"d087d288","getPassKeyOwner()":"8fb41072","getUserOpHash((uint256,bytes,uint256,bytes))":"fd5c8d72","initialize((uint256,uint256,string))":"759a68c0","passKeyOwnerEnabled()":"be9ef843"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"functionType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"argument\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOp\",\"name\":\"userop\",\"type\":\"tuple\"}],\"name\":\"entrypoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPassKeyOwner\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pubKeyX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubKeyY\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"keyId\",\"type\":\"string\"}],\"internalType\":\"struct PassKeyId\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"functionType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"argument\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOp\",\"name\":\"userop\",\"type\":\"tuple\"}],\"name\":\"getUserOpHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pubKeyX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubKeyY\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"keyId\",\"type\":\"string\"}],\"internalType\":\"struct PassKeyId\",\"name\":\"anOwner\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"passKeyOwnerEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/aa/Account.sol\":\"Account\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x3d6069be9b4c01fb81840fb9c2c4dc58dd6a6a4aafaa2c6837de8699574d84c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/aa/Account.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport \\\"./utils/UserOp.sol\\\";\\nimport \\\"./utils/Secp256r1.sol\\\";\\nimport \\\"./utils/Base64.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\ncontract Account is Initializable {\\n    using UserOpLib for UserOp;\\n    using ECDSA for bytes32;\\n\\n    address addressOwner;\\n    PassKeyId passKeyOwner;\\n\\n    bool isPassKeyOwnerEnabled;\\n\\n    uint256 nonce;\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    // getter functions\\n    function getAddressOwner() public view returns (address) {\\n        return addressOwner;\\n    }\\n\\n    function getPassKeyOwner() public view returns (PassKeyId memory) {\\n        return passKeyOwner;\\n    }\\n\\n    function passKeyOwnerEnabled() public view returns (bool) {\\n        return isPassKeyOwnerEnabled;\\n    }\\n\\n    function getNonce() public view returns (uint256) {\\n        return nonce;\\n    }\\n\\n    function changeOwnershipToAddress(bytes memory argument) private {\\n        require(\\n            isPassKeyOwnerEnabled == true,\\n            \\\"Account: Already address owner enabled\\\"\\n        );\\n        // address newOwner = abi.decode(argument, (address));\\n        address newOwner;\\n        assembly {\\n            newOwner := mload(add(argument, 20))\\n        }\\n        _changePassKeyOwner(PassKeyId(0, 0, \\\"\\\"));\\n        _changeAddressOwner(newOwner);\\n        isPassKeyOwnerEnabled = false;\\n    }\\n\\n    function changeOwnershipToPassKeyAddress(bytes memory argument) private {\\n        require(\\n            isPassKeyOwnerEnabled == false,\\n            \\\"Account: Already passkey owner enabled\\\"\\n        );\\n        (uint256 pubKeyX, uint256 pubKeyY, string memory keyId) = abi.decode(\\n            argument,\\n            (uint256, uint256, string)\\n        );\\n        PassKeyId memory newOwner = PassKeyId(pubKeyX, pubKeyY, keyId);\\n        _changeAddressOwner(address(0));\\n        _changePassKeyOwner(newOwner);\\n        isPassKeyOwnerEnabled = true;\\n    }\\n\\n    // internal functions to change owners\\n    function _changePassKeyOwner(PassKeyId memory newOwner) private {\\n        passKeyOwner = newOwner;\\n    }\\n\\n    function _changeAddressOwner(address newOwner) private {\\n        addressOwner = newOwner;\\n    }\\n\\n    function initialize(PassKeyId memory anOwner) public virtual initializer {\\n        isPassKeyOwnerEnabled = true;\\n        _initialize(anOwner);\\n    }\\n\\n    function _initialize(PassKeyId memory anOwner) internal virtual {\\n        passKeyOwner = anOwner;\\n    }\\n\\n    // Main entry point for external callers\\n\\n    function entrypoint(UserOp calldata userop) public {\\n        // validate userop signature\\n        uint256 sigVerification = _validateUserOp(userop);\\n        require(sigVerification == 0, \\\"Account: Signature verification failed\\\");\\n        // validate nonce\\n        uint256 nonceVerification = _validateNonce(userop);\\n        require(nonceVerification == 0, \\\"Account: Nonce verification failed\\\");\\n        // execute\\n        if (userop.functionType == 0) {\\n            execute(userop.argument);\\n        }\\n        if (userop.functionType == 1) {\\n            executeBatch(userop.argument);\\n        }\\n        if (userop.functionType == 2) {\\n            changeOwnershipToAddress(userop.argument);\\n        }\\n        if (userop.functionType == 3) {\\n            changeOwnershipToPassKeyAddress(userop.argument);\\n        }\\n        nonce = nonce + 1;\\n        return;\\n    }\\n\\n    /**\\n     * execute a transaction (called directly from owner, or by entryPoint)\\n     */\\n    function execute(bytes memory argument) private {\\n        (address dest, uint256 value, bytes memory func) = abi.decode(\\n            argument,\\n            (address, uint256, bytes)\\n        );\\n        _call(dest, value, func);\\n    }\\n\\n    /**\\n     * execute a sequence of transactions\\n     * @dev to reduce gas consumption for trivial case (no value), use a zero-length array to mean zero value\\n     */\\n    function executeBatch(bytes memory argument) private {\\n        (\\n            address[] memory dest,\\n            uint256[] memory value,\\n            bytes[] memory func\\n        ) = abi.decode(argument, (address[], uint256[], bytes[]));\\n        require(\\n            dest.length == func.length &&\\n                (value.length == 0 || value.length == func.length),\\n            \\\"wrong array lengths\\\"\\n        );\\n        if (value.length == 0) {\\n            for (uint256 i = 0; i < dest.length; i++) {\\n                _call(dest[i], 0, func[i]);\\n            }\\n        } else {\\n            for (uint256 i = 0; i < dest.length; i++) {\\n                _call(dest[i], value[i], func[i]);\\n            }\\n        }\\n    }\\n\\n    function _call(address target, uint256 value, bytes memory data) internal {\\n        (bool success, bytes memory result) = target.call{value: value}(data);\\n        if (!success) {\\n            assembly {\\n                revert(add(result, 32), mload(result))\\n            }\\n        }\\n    }\\n\\n    // internal function to validate userop signature\\n    function _validateUserOp(\\n        UserOp calldata userop\\n    ) internal view returns (uint256) {\\n        bytes32 userOpHash = getUserOpHash(userop);\\n        if (isPassKeyOwnerEnabled) {\\n            bool isSigValid = validatePassKeySig(\\n                userop.signature,\\n                userOpHash,\\n                passKeyOwner\\n            );\\n            if (!isSigValid) return 1;\\n            return 0;\\n        } else {\\n            bytes32 hash = userOpHash.toEthSignedMessageHash();\\n            if (addressOwner != hash.recover(userop.signature)) return 1;\\n            return 0;\\n        }\\n    }\\n\\n    // internal function to validate nonce\\n    function _validateNonce(\\n        UserOp calldata userop\\n    ) internal view returns (uint256) {\\n        if (userop.nonce == nonce) return 0;\\n        return 1;\\n    }\\n\\n    function validatePassKeySig(\\n        bytes memory signature,\\n        bytes32 execHash,\\n        PassKeyId memory passkey\\n    ) internal view returns (bool) {\\n        (\\n            bytes32 keyHash,\\n            uint256 sigx,\\n            uint256 sigy,\\n            bytes memory authenticatorData,\\n            string memory clientDataJSONPre,\\n            string memory clientDataJSONPost\\n        ) = abi.decode(\\n                signature,\\n                (bytes32, uint256, uint256, bytes, string, string)\\n            );\\n\\n        string memory execHashBase64 = Base64.encode(bytes.concat(execHash));\\n        string memory clientDataJSON = string.concat(\\n            clientDataJSONPre,\\n            execHashBase64,\\n            clientDataJSONPost\\n        );\\n        bytes32 clientHash = sha256(bytes(clientDataJSON));\\n        bytes32 sigHash = sha256(bytes.concat(authenticatorData, clientHash));\\n\\n        require(passkey.pubKeyY != 0 && passkey.pubKeyY != 0, \\\"Key not found\\\");\\n        bool isSigValid = Secp256r1.Verify(\\n            passkey,\\n            sigx,\\n            sigy,\\n            uint256(sigHash)\\n        );\\n        return isSigValid;\\n    }\\n\\n    // gets the userOp hash\\n    function getUserOpHash(\\n        UserOp calldata userop\\n    ) public view returns (bytes32) {\\n        return\\n            keccak256(abi.encode(userop.hash(), address(this), block.chainid));\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xffc88e51e12629d1bfa349e34f51cecb413de441b1d21f996e78ca05ce9ddab3\",\"license\":\"GPL-3.0\"},\"contracts/aa/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n// modified for base64url encoding, does not pad with '='\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *  modified for base64url https://datatracker.ietf.org/doc/html/rfc4648#section-5\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE =\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        uint256 newlength = (data.length * 8) / 6;\\n        if (data.length % 6 > 0) {\\n            newlength++;\\n        }\\n        string memory result = new string(newlength);\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n            // let targetLength := add(resultPtr, newlength)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(\\n                    resultPtr,\\n                    mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                )\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                // if lt(resultPtr, targetLength) {\\n                mstore8(\\n                    resultPtr,\\n                    mload(add(tablePtr, and(shr(12, input), 0x3F)))\\n                )\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                // if lt(resultPtr, targetLength) {\\n                mstore8(\\n                    resultPtr,\\n                    mload(add(tablePtr, and(shr(6, input), 0x3F)))\\n                )\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                // if lt(resultPtr, targetLength) {\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n                // }\\n                // }\\n                // }\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xdae76c808cc5e424ff5e20688a02f913d6a5f834902e7329f0265fabf153a8fb\",\"license\":\"MIT\"},\"contracts/aa/utils/Secp256r1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.19;\\n//\\n// Heavily inspired from\\n// https://github.com/maxrobot/elliptic-solidity/blob/master/contracts/Secp256r1.sol\\n// https://github.com/tdrerup/elliptic-curve-solidity/blob/master/contracts/curves/EllipticCurve.sol\\n// modified to use precompile 0x05 modexp\\n// and modified jacobian double\\n// optimisations to avoid to an from from affine and jacobian coordinates\\n//\\nstruct PassKeyId {\\n    uint256 pubKeyX;\\n    uint256 pubKeyY;\\n    string keyId;\\n}\\n\\nstruct JPoint {\\n    uint256 x;\\n    uint256 y;\\n    uint256 z;\\n}\\n\\nlibrary Secp256r1 {\\n    uint256 constant gx =\\n        0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296;\\n    uint256 constant gy =\\n        0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5;\\n    uint256 public constant pp =\\n        0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    uint256 public constant nn =\\n        0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551;\\n    uint256 constant a =\\n        0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC;\\n    uint256 constant b =\\n        0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B;\\n    uint256 constant MOST_SIGNIFICANT =\\n        0xc000000000000000000000000000000000000000000000000000000000000000;\\n\\n    /*\\n     * Verify\\n     * @description - verifies that a public key has signed a given message\\n     * @param X - public key coordinate X\\n     * @param Y - public key coordinate Y\\n     * @param R - signature half R\\n     * @param S - signature half S\\n     * @param input - hashed message\\n     */\\n    function Verify(\\n        PassKeyId memory passKey,\\n        uint r,\\n        uint s,\\n        uint e\\n    ) internal view returns (bool) {\\n        if (r == 0 || s == 0 || r >= nn || s >= nn) {\\n            /* testing null signature, otherwise (0,0) is valid for any message*/\\n            return false;\\n        }\\n\\n        JPoint[16] memory points = _preComputeJacobianPoints(passKey);\\n        return VerifyWithPrecompute(points, r, s, e);\\n    }\\n\\n    function VerifyWithPrecompute(\\n        JPoint[16] memory points,\\n        uint r,\\n        uint s,\\n        uint e\\n    ) internal view returns (bool) {\\n        if (r >= nn || s >= nn) {\\n            return false;\\n        }\\n\\n        uint w = _primemod(s, nn);\\n\\n        uint u1 = mulmod(e, w, nn);\\n        uint u2 = mulmod(r, w, nn);\\n\\n        uint x;\\n        uint y;\\n\\n        (x, y) = ShamirMultJacobian(points, u1, u2);\\n        return (x == r);\\n    }\\n\\n    /*\\n     * Strauss Shamir trick for EC multiplication\\n     * https://stackoverflow.com/questions/50993471/ec-scalar-multiplication-with-strauss-shamir-method\\n     * we optimise on this a bit to do with 2 bits at a time rather than a single bit\\n     * the individual points for a single pass are precomputed\\n     * overall this reduces the number of additions while keeping the same number of doublings\\n     */\\n    function ShamirMultJacobian(\\n        JPoint[16] memory points,\\n        uint u1,\\n        uint u2\\n    ) internal view returns (uint, uint) {\\n        uint x = 0;\\n        uint y = 0;\\n        uint z = 0;\\n        uint bits = 128;\\n        uint index = 0;\\n\\n        while (bits > 0) {\\n            if (z > 0) {\\n                (x, y, z) = _modifiedJacobianDouble(x, y, z);\\n                (x, y, z) = _modifiedJacobianDouble(x, y, z);\\n            }\\n            index =\\n                ((u1 & MOST_SIGNIFICANT) >> 252) |\\n                ((u2 & MOST_SIGNIFICANT) >> 254);\\n            if (index > 0) {\\n                (x, y, z) = _jAdd(\\n                    x,\\n                    y,\\n                    z,\\n                    points[index].x,\\n                    points[index].y,\\n                    points[index].z\\n                );\\n            }\\n            u1 <<= 2;\\n            u2 <<= 2;\\n            bits--;\\n        }\\n        (x, y) = _affineFromJacobian(x, y, z);\\n        return (x, y);\\n    }\\n\\n    function _preComputeJacobianPoints(\\n        PassKeyId memory passKey\\n    ) internal pure returns (JPoint[16] memory points) {\\n        // JPoint[] memory u1Points = new JPoint[](4);\\n        // u1Points[0] = JPoint(0, 0, 0);\\n        // u1Points[1] = JPoint(gx, gy, 1); // u1\\n        // u1Points[2] = _jPointDouble(u1Points[1]);\\n        // u1Points[3] = _jPointAdd(u1Points[1], u1Points[2]);\\n        // avoiding this intermediate step by using it in a single array below\\n        // these are pre computed points for u1\\n\\n        // JPoint[16] memory points;\\n        points[0] = JPoint(0, 0, 0);\\n        points[1] = JPoint(passKey.pubKeyX, passKey.pubKeyY, 1); // u2\\n        points[2] = _jPointDouble(points[1]);\\n        points[3] = _jPointAdd(points[1], points[2]);\\n\\n        points[4] = JPoint(gx, gy, 1); // u1Points[1]\\n        points[5] = _jPointAdd(points[4], points[1]);\\n        points[6] = _jPointAdd(points[4], points[2]);\\n        points[7] = _jPointAdd(points[4], points[3]);\\n\\n        points[8] = _jPointDouble(points[4]); // u1Points[2]\\n        points[9] = _jPointAdd(points[8], points[1]);\\n        points[10] = _jPointAdd(points[8], points[2]);\\n        points[11] = _jPointAdd(points[8], points[3]);\\n\\n        points[12] = _jPointAdd(points[4], points[8]); // u1Points[3]\\n        points[13] = _jPointAdd(points[12], points[1]);\\n        points[14] = _jPointAdd(points[12], points[2]);\\n        points[15] = _jPointAdd(points[12], points[3]);\\n    }\\n\\n    function _jPointAdd(\\n        JPoint memory p1,\\n        JPoint memory p2\\n    ) internal pure returns (JPoint memory) {\\n        uint x;\\n        uint y;\\n        uint z;\\n        (x, y, z) = _jAdd(p1.x, p1.y, p1.z, p2.x, p2.y, p2.z);\\n        return JPoint(x, y, z);\\n    }\\n\\n    function _jPointDouble(\\n        JPoint memory p\\n    ) internal pure returns (JPoint memory) {\\n        uint x;\\n        uint y;\\n        uint z;\\n        (x, y, z) = _modifiedJacobianDouble(p.x, p.y, p.z);\\n        return JPoint(x, y, z);\\n    }\\n\\n    /* _affineFromJacobian\\n     * @desription returns affine coordinates from a jacobian input follows\\n     * golang elliptic/crypto library\\n     */\\n    function _affineFromJacobian(\\n        uint x,\\n        uint y,\\n        uint z\\n    ) internal view returns (uint ax, uint ay) {\\n        if (z == 0) {\\n            return (0, 0);\\n        }\\n\\n        uint zinv = _primemod(z, pp);\\n        uint zinvsq = mulmod(zinv, zinv, pp);\\n\\n        ax = mulmod(x, zinvsq, pp);\\n        ay = mulmod(y, mulmod(zinvsq, zinv, pp), pp);\\n    }\\n\\n    /*\\n     * _jAdd\\n     * @description performs double Jacobian as defined below:\\n     * https://hyperelliptic.org/EFD/g1p/auto-code/shortw/jacobian-3/doubling/mdbl-2007-bl.op3\\n     */\\n    function _jAdd(\\n        uint p1,\\n        uint p2,\\n        uint p3,\\n        uint q1,\\n        uint q2,\\n        uint q3\\n    ) internal pure returns (uint r1, uint r2, uint r3) {\\n        if (p3 == 0) {\\n            r1 = q1;\\n            r2 = q2;\\n            r3 = q3;\\n\\n            return (r1, r2, r3);\\n        } else if (q3 == 0) {\\n            r1 = p1;\\n            r2 = p2;\\n            r3 = p3;\\n\\n            return (r1, r2, r3);\\n        }\\n\\n        assembly {\\n            let\\n                pd\\n            := 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF\\n            let z1z1 := mulmod(p3, p3, pd) // Z1Z1 = Z1^2\\n            let z2z2 := mulmod(q3, q3, pd) // Z2Z2 = Z2^2\\n\\n            let u1 := mulmod(p1, z2z2, pd) // U1 = X1*Z2Z2\\n            let u2 := mulmod(q1, z1z1, pd) // U2 = X2*Z1Z1\\n\\n            let s1 := mulmod(p2, mulmod(z2z2, q3, pd), pd) // S1 = Y1*Z2*Z2Z2\\n            let s2 := mulmod(q2, mulmod(z1z1, p3, pd), pd) // S2 = Y2*Z1*Z1Z1\\n\\n            let p3q3 := addmod(p3, q3, pd)\\n\\n            if lt(u2, u1) {\\n                u2 := add(pd, u2) // u2 = u2+pd\\n            }\\n            let h := sub(u2, u1) // H = U2-U1\\n\\n            let i := mulmod(0x02, h, pd)\\n            i := mulmod(i, i, pd) // I = (2*H)^2\\n\\n            let j := mulmod(h, i, pd) // J = H*I\\n            if lt(s2, s1) {\\n                s2 := add(pd, s2) // u2 = u2+pd\\n            }\\n            let rr := mulmod(0x02, sub(s2, s1), pd) // r = 2*(S2-S1)\\n            r1 := mulmod(rr, rr, pd) // X3 = R^2\\n\\n            let v := mulmod(u1, i, pd) // V = U1*I\\n            let j2v := addmod(j, mulmod(0x02, v, pd), pd)\\n            if lt(r1, j2v) {\\n                r1 := add(pd, r1) // X3 = X3+pd\\n            }\\n            r1 := sub(r1, j2v)\\n\\n            // Y3 = r*(V-X3)-2*S1*J\\n            let s12j := mulmod(mulmod(0x02, s1, pd), j, pd)\\n\\n            if lt(v, r1) {\\n                v := add(pd, v)\\n            }\\n            r2 := mulmod(rr, sub(v, r1), pd)\\n\\n            if lt(r2, s12j) {\\n                r2 := add(pd, r2)\\n            }\\n            r2 := sub(r2, s12j)\\n\\n            // Z3 = ((Z1+Z2)^2-Z1Z1-Z2Z2)*H\\n            z1z1 := addmod(z1z1, z2z2, pd)\\n            j2v := mulmod(p3q3, p3q3, pd)\\n            if lt(j2v, z1z1) {\\n                j2v := add(pd, j2v)\\n            }\\n            r3 := mulmod(sub(j2v, z1z1), h, pd)\\n        }\\n        return (r1, r2, r3);\\n    }\\n\\n    // Point doubling on the modified jacobian coordinates\\n    // http://point-at-infinity.org/ecc/Prime_Curve_Modified_Jacobian_Coordinates.html\\n    function _modifiedJacobianDouble(\\n        uint x,\\n        uint y,\\n        uint z\\n    ) internal pure returns (uint x3, uint y3, uint z3) {\\n        assembly {\\n            let\\n                pd\\n            := 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF\\n            let z2 := mulmod(z, z, pd)\\n            let az4 := mulmod(\\n                0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC,\\n                mulmod(z2, z2, pd),\\n                pd\\n            )\\n            let y2 := mulmod(y, y, pd)\\n            let s := mulmod(0x04, mulmod(x, y2, pd), pd)\\n            let u := mulmod(0x08, mulmod(y2, y2, pd), pd)\\n            let m := addmod(mulmod(0x03, mulmod(x, x, pd), pd), az4, pd)\\n            let twos := mulmod(0x02, s, pd)\\n            let m2 := mulmod(m, m, pd)\\n            if lt(m2, twos) {\\n                m2 := add(pd, m2)\\n            }\\n            x3 := sub(m2, twos)\\n            if lt(s, x3) {\\n                s := add(pd, s)\\n            }\\n            y3 := mulmod(m, sub(s, x3), pd)\\n            if lt(y3, u) {\\n                y3 := add(pd, y3)\\n            }\\n            y3 := sub(y3, u)\\n            z3 := mulmod(0x02, mulmod(y, z, pd), pd)\\n        }\\n    }\\n\\n    // Fermats little theorem https://en.wikipedia.org/wiki/Fermat%27s_little_theorem\\n    // a^(p-1) = 1 mod p\\n    // a^(-1) \\u2245 a^(p-2) (mod p)\\n    // we then use the precompile bigModExp to compute a^(-1)\\n    function _primemod(uint value, uint p) internal view returns (uint ret) {\\n        ret = modexp(value, p - 2, p);\\n        return ret;\\n    }\\n\\n    // Wrapper for built-in BigNumber_modexp (contract 0x5) as described here. https://github.com/ethereum/EIPs/pull/198\\n    function modexp(\\n        uint _base,\\n        uint _exp,\\n        uint _mod\\n    ) internal view returns (uint ret) {\\n        // bigModExp(_base, _exp, _mod);\\n        assembly {\\n            if gt(_base, _mod) {\\n                _base := mod(_base, _mod)\\n            }\\n            // Free memory pointer is always stored at 0x40\\n            let freemem := mload(0x40)\\n\\n            mstore(freemem, 0x20)\\n            mstore(add(freemem, 0x20), 0x20)\\n            mstore(add(freemem, 0x40), 0x20)\\n\\n            mstore(add(freemem, 0x60), _base)\\n            mstore(add(freemem, 0x80), _exp)\\n            mstore(add(freemem, 0xa0), _mod)\\n\\n            let success := staticcall(not(0), 0x5, freemem, 0xc0, freemem, 0x20)\\n            switch success\\n            case 0 {\\n                revert(0x0, 0x0)\\n            }\\n            default {\\n                ret := mload(freemem)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd43f80b0a6bc9d21430e1f2a485960a59266972545d9f15c72fc21daebebaf42\",\"license\":\"GPL-3.0\"},\"contracts/aa/utils/UserOp.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.19;\\n// call type\\n// 00 -> single\\n// 01 -> batch\\n\\nstruct UserOp {\\n    uint256 functionType;\\n    bytes argument;\\n    uint256 nonce;\\n    bytes signature;\\n}\\n\\nlibrary UserOpLib {\\n    /**\\n     * Pack the user operation data into bytes for hashing.\\n     * @param userop - The user operation data.\\n     */\\n    function pack(\\n        UserOp calldata userop\\n    ) internal pure returns (bytes memory ret) {\\n        uint256 functionType = userop.functionType;\\n        bytes32 hashArguments = calldataKeccak(userop.argument);\\n        uint256 nonce = userop.nonce;\\n\\n        return abi.encode(functionType, hashArguments, nonce);\\n    }\\n\\n    /**\\n     * Hash the user operation data.\\n     * @param userop - The user operation data.\\n     */\\n    function hash(UserOp calldata userop) internal pure returns (bytes32) {\\n        return keccak256(pack(userop));\\n    }\\n\\n    /**\\n     * keccak function over calldata.\\n     * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n     */\\n    function calldataKeccak(\\n        bytes calldata data\\n    ) public pure returns (bytes32 ret) {\\n        assembly {\\n            let mem := mload(0x40)\\n            let len := data.length\\n            calldatacopy(mem, data.offset, len)\\n            ret := keccak256(mem, len)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe9d67905db0bceb2036a23b41879fc6bc6fb6476262b52e2b80c5aa67621038b\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[{"astId":440,"contract":"contracts/aa/Account.sol:Account","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":443,"contract":"contracts/aa/Account.sol:Account","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":3450,"contract":"contracts/aa/Account.sol:Account","label":"addressOwner","offset":2,"slot":"0","type":"t_address"},{"astId":3453,"contract":"contracts/aa/Account.sol:Account","label":"passKeyOwner","offset":0,"slot":"1","type":"t_struct(PassKeyId)4492_storage"},{"astId":3455,"contract":"contracts/aa/Account.sol:Account","label":"isPassKeyOwnerEnabled","offset":0,"slot":"4","type":"t_bool"},{"astId":3457,"contract":"contracts/aa/Account.sol:Account","label":"nonce","offset":0,"slot":"5","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(PassKeyId)4492_storage":{"encoding":"inplace","label":"struct PassKeyId","members":[{"astId":4487,"contract":"contracts/aa/Account.sol:Account","label":"pubKeyX","offset":0,"slot":"0","type":"t_uint256"},{"astId":4489,"contract":"contracts/aa/Account.sol:Account","label":"pubKeyY","offset":0,"slot":"1","type":"t_uint256"},{"astId":4491,"contract":"contracts/aa/Account.sol:Account","label":"keyId","offset":0,"slot":"2","type":"t_string_storage"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/aa/AccountFactory.sol":{"AccountFactory":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"accountImplementation","outputs":[{"internalType":"contract Account","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"pubKeyX","type":"uint256"},{"internalType":"uint256","name":"pubKeyY","type":"uint256"},{"internalType":"string","name":"keyId","type":"string"},{"internalType":"uint256","name":"salt","type":"uint256"}],"name":"createAccount","outputs":[{"internalType":"contract Account","name":"ret","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"pubKeyX","type":"uint256"},{"internalType":"uint256","name":"pubKeyY","type":"uint256"},{"internalType":"string","name":"keyId","type":"string"},{"internalType":"uint256","name":"salt","type":"uint256"}],"name":"getAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60a0806040523461007e576124ec8181016001600160401b03811183821017610068578291610a36833903906000f0801561005c576080526040516109b29081610084823960805181818160e6015281816103f301526105260152f35b6040513d6000823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c90816311464fbe1461009c57508063c8cb55ae1461007f5763cac8cfc21461004257600080fd5b3461007c57602061005e6100553661019a565b92919091610450565b73ffffffffffffffffffffffffffffffffffffffff60405191168152f35b80fd5b503461007c57602061005e6100933661019a565b9291909161031a565b90503461010a57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010a5760209073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b6060810190811067ffffffffffffffff82111761012a57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761012a57604052565b60807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82011261025357600435916024359167ffffffffffffffff604435818111610253578260238201121561025357806004013591821161012a576040519261022c60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8601160185610159565b82845260248383010111610253578160009260246020930183860137830101529060643590565b600080fd5b60005b83811061026b5750506000910152565b818101518382015260200161025b565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f6020936102b781518092818752878088019101610258565b0116010190565b608060406102ea936020845280516020850152602081015182850152015191606080820152019061027b565b90565b60409073ffffffffffffffffffffffffffffffffffffffff6102ea9493168152816020820152019061027b565b928092610342926040519561032e8761010e565b808752816020880152826040880152610450565b803b61043457506103b1610385926040519384917f759a68c0000000000000000000000000000000000000000000000000000000006020840152602483016102be565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101845283610159565b604051610403928382019382851067ffffffffffffffff86111761012a578291610419916105a3843973ffffffffffffffffffffffffffffffffffffffff95867f000000000000000000000000000000000000000000000000000000000000000016906102ed565b03906000f58015610428571690565b6040513d6000823e3d90fd5b73ffffffffffffffffffffffffffffffffffffffff1692915050565b92600b92916055946040938451916104678361010e565b8252602092838301528482015261057e61058a83610403936104d088519161049184880184610159565b868352838301966105a3883989519182917f759a68c00000000000000000000000000000000000000000000000000000000086840152602483016102be565b036105017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe091828101845283610159565b6105588a51918261054c8782019573ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016876102ed565b03908101835282610159565b895195869361056f868601998a9251928391610258565b84019151809386840190610258565b01038084520182610159565b5190208351938401528201523081520160ff8153209056fe604060808152610403908138038061001681610218565b93843982019181818403126102135780516001600160a01b038116808203610213576020838101516001600160401b0394919391858211610213570186601f820112156102135780519061007161006c83610253565b610218565b918083528583019886828401011161021357888661008f930161026e565b813b156101b9577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b031916841790556000927fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8480a28051158015906101b2575b61010b575b855160be90816103458239f35b855194606086019081118682101761019e578697849283926101889952602788527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c87890152660819985a5b195960ca1b8a8901525190845af4913d15610194573d9061017a61006c83610253565b91825281943d92013e610291565b508038808080806100fe565b5060609250610291565b634e487b7160e01b84526041600452602484fd5b50826100f9565b855162461bcd60e51b815260048101859052602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b600080fd5b6040519190601f01601f191682016001600160401b0381118382101761023d57604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161023d57601f01601f191660200190565b60005b8381106102815750506000910152565b8181015183820152602001610271565b919290156102f357508151156102a5575090565b3b156102ae5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156103065750805190602001fd5b6044604051809262461bcd60e51b825260206004830152610336815180928160248601526020868601910161026e565b601f01601f19168101030190fdfe60806040523615605f5773ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54166000808092368280378136915af43d82803e15605b573d90f35b3d90fd5b73ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54166000808092368280378136915af43d82803e15605b573d90f3fea164736f6c6343000813000aa164736f6c6343000813000a608080604052346100c1576000549060ff8260081c1661006f575060ff80821603610034575b60405161242590816100c78239f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a138610025565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe6080604052600436101561001b575b361561001957600080fd5b005b6000803560e01c908163759a68c01461008e575080638fb4107214610089578063b627e20f14610084578063be9ef8431461007f578063d087d2881461007a578063f0f05cef146100755763fd5c8d720361000e5761055a565b610475565b6103e9565b6103a8565b610353565b610296565b3461013e577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc6020813601126101325760043567ffffffffffffffff9182821161013a576060908236030112610136576100e860e0604052565b8060040135608052602481013560a052604481013591821161013657013660238201121561013257610124903690602460048201359101610237565b60c05261012f6106d1565b80f35b5080fd5b8280fd5b8380fd5b80fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761018c57604052565b610141565b6080810190811067ffffffffffffffff82111761018c57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761018c57604052565b604051906101fb82610170565b565b67ffffffffffffffff811161018c57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b929192610243826101fd565b9161025160405193846101ad565b82948184528183011161026e578281602093846000960137010152565b600080fd5b60005b8381106102865750506000910152565b8181015183820152602001610276565b3461026e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026e576060604080516102d481610170565b60008152600060208201520152604060a06102ed6105cd565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84519485936020855280516020860152602081015182860152015160608085015261034a8151809281608088015260208888019101610273565b01168101030190f35b3461026e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026e57602073ffffffffffffffffffffffffffffffffffffffff60005460101c16604051908152f35b3461026e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026e57602060ff600454166040519015158152f35b3461026e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261026e576020600554604051908152f35b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc9060208282011261026e576004359167ffffffffffffffff831161026e578260809203011261026e5760040190565b3461026e5761048336610425565b61049561048f826114a6565b15610b9a565b6104a76104a18261184f565b15610c25565b60038135801561053d575b60018114610520575b60028114610503575b146104dd575b6100196104d8600554610d30565b600555565b6104f86104f18260206104fd940190610cb0565b3691610237565b610ee4565b386104ca565b61051b6105166104f16020860186610cb0565b610d67565b6104c4565b6105386105336104f16020860186610cb0565b61133d565b6104bb565b6105556105506104f16020860186610cb0565b61104c565b6104b2565b3461026e57602061057261056d36610425565b611a8d565b604051908152f35b90600182811c921680156105c3575b602083101461059457565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691610589565b604051906105da82610170565b816001908154815260025460209081830152604051928391600091600354906106028261057a565b80865291818116908115610694575060011461062f575b5050506040929161062b9103846101ad565b0152565b909493925060036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b946000915b81831061067c5750939450919250908201018161062b6040610619565b8654888401850152958601958794509183019161065f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016848701525050151560051b83010190508161062b6040610619565b60005460ff8160081c16158091819261086c575b811561084c575b50156107c8578061072360017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff006000541617600055565b610792575b61073061087a565b61073657565b6107637fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff60005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1565b6107c36101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff6000541617600055565b610728565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b303b1591508161085e575b50386106ec565b6001915060ff161438610857565b600160ff82161091506106e5565b6001807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff006004541617600455608051815560a05160025560c0519081519167ffffffffffffffff831161018c576108db836108d660035461057a565b610a1a565b60209081601f85116001146109545750600091849182610929575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91921b9260031b1c191617600355565b015191507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff386108f6565b9190847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0819596166109a860036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90565b946000905b88838310610a0057505050106109c9575b505050811b01600355565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c191690553880806109be565b8587015188559096019594850194879350908101906109ad565b601f8111610a26575050565b600090600382527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b906020601f850160051c83019410610a81575b601f0160051c01915b828110610a7657505050565b818155600101610a6a565b9092508290610a61565b8051600190815560406020928381015160025501519182519267ffffffffffffffff841161018c57610ac2846108d660035461057a565b81601f8511600114610b0c57506000918491826109295750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91921b9260031b1c191617600355565b9190847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081959616610b6060036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90565b946000905b88838310610b8057505050106109c957505050811b01600355565b858701518855909601959485019487935090810190610b65565b15610ba157565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4163636f756e743a205369676e617475726520766572696669636174696f6e2060448201527f6661696c656400000000000000000000000000000000000000000000000000006064820152fd5b15610c2c57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4163636f756e743a204e6f6e636520766572696669636174696f6e206661696c60448201527f65640000000000000000000000000000000000000000000000000000000000006064820152fd5b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18136030182121561026e570180359067ffffffffffffffff821161026e5760200191813603831361026e57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9060018201809211610d3e57565b610d01565b604051906020820182811067ffffffffffffffff82111761018c5760405260008252565b600160ff60045416151503610e1b576014610dee910151610da6610d896101ee565b6000815260006020820152610d9c610d43565b6040820152610a8b565b7fffffffffffffffffffff0000000000000000000000000000000000000000ffff75ffffffffffffffffffffffffffffffffffffffff00006000549260101b16911617600055565b6101fb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0060045416600455565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4163636f756e743a20416c72656164792061646472657373206f776e6572206560448201527f6e61626c656400000000000000000000000000000000000000000000000000006064820152fd5b81601f8201121561026e578051610eb5816101fd565b92610ec360405194856101ad565b8184526020828401011161026e57610ee19160208085019101610273565b90565b60ff60045416610faa57805181019060608183031261026e5760208101519060408101519060608101519067ffffffffffffffff821161026e576020610f329281610f7a9701920101610e9f565b90610f3b6101ee565b92835260208301526040820152610f757fffffffffffffffffffff0000000000000000000000000000000000000000ffff60005416600055565b610a8b565b6101fb60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff006004541617600455565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4163636f756e743a20416c726561647920706173736b6579206f776e6572206560448201527f6e61626c656400000000000000000000000000000000000000000000000000006064820152fd5b73ffffffffffffffffffffffffffffffffffffffff81160361026e57565b8051810160608282031261026e576020820151906110698261102e565b604083015190606084015167ffffffffffffffff811161026e576101fb9460206110ad928173ffffffffffffffffffffffffffffffffffffffff9501920101610e9f565b9216611486565b67ffffffffffffffff811161018c5760051b60200190565b81601f8201121561026e578051916110e3836110b4565b926110f160405194856101ad565b808452602092838086019260051b82010192831161026e578301905b82821061111b575050505090565b8151815290830190830161110d565b9080601f8301121561026e57815190611142826110b4565b9261115060405194856101ad565b828452602092838086019160051b8301019280841161026e57848301915b84831061117e5750505050505090565b825167ffffffffffffffff811161026e5786916111a084848094890101610e9f565b81520192019161116e565b909160608284031261026e5781519167ffffffffffffffff9283811161026e5781019380601f8601121561026e5784516111e4816110b4565b906111f260405192836101ad565b808252602096878084019260051b8201019184831161026e5788809201905b83821061124a57505050509482015184811161026e57816112339184016110cc565b93604083015190811161026e57610ee1920161112a565b82809183516112588161102e565b815201910190611211565b1561126a57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f77726f6e67206172726179206c656e67746873000000000000000000000000006044820152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610d3e5760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80518210156113385760209160051b010190565b6112f5565b61135090602080825183010191016111ab565b92919061136a825185518091149081611416575b50611263565b80516113cc575060005b81518110156113c657806113bc6113ab6113916113c19486611324565b5173ffffffffffffffffffffffffffffffffffffffff1690565b6113b58388611324565b5190611435565b6112c8565b611374565b50509050565b929060005b815181101561140f57806113bc6113ee61139161140a9486611324565b6113f88389611324565b516114038488611324565b5191611486565b6113d1565b5050509050565b835180159250821561142b575b505038611364565b1490503880611423565b600091829182602083519301915af13d1561147e573d90611455826101fd565b9161146360405193846101ad565b82523d6000602084013e5b156114765750565b602081519101fd5b60609061146e565b916000928392602083519301915af13d1561147e573d90611455826101fd565b6114af81611a8d565b60045460ff16156114f3576114e1906114d26104f18460606114e5960190610cb0565b906114db6105cd565b91611997565b1590565b6114ee57600090565b600190565b61159461157b61154173ffffffffffffffffffffffffffffffffffffffff937f19457468657265756d205369676e6564204d6573736167653a0a333200000000600052601c52603c60002090565b6115756104f161156a60005473ffffffffffffffffffffffffffffffffffffffff9060101c1690565b966060810190610cb0565b906115a0565b73ffffffffffffffffffffffffffffffffffffffff1690565b9116036114ee57600090565b610ee1916115ad91611777565b9190916115ee565b600511156115bf57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6115f7816115b5565b806115ff5750565b611608816115b5565b6001810361166f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606490fd5b611678816115b5565b600281036116df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606490fd5b806116eb6003926115b5565b146116f257565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608490fd5b9060418151146000146117a5576117a1916020820151906060604084015193015160001a906117bb565b9091565b5050600090600290565b6040513d6000823e3d90fd5b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083116118435791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa1561183e57815173ffffffffffffffffffffffffffffffffffffffff811615611838579190565b50600190565b6117af565b50505050600090600390565b60406005549101351461186157600190565b600090565b90604051916020830152602082526040820182811067ffffffffffffffff82111761018c57604052565b906118a360209282815194859201610273565b0190565b6101fb9193929360405194859183516118c881602096878088019101610273565b83016118dc82518093878085019101610273565b016118ef82518093868085019101610273565b010380855201836101ad565b60406101fb919392938151948161191c879351809260208087019101610273565b82019060208201520360208101855201836101ad565b1561193957565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4b6579206e6f7420666f756e64000000000000000000000000000000000000006044820152fd5b90815182019060209260c08185850194031261026e5760408101519160608201519360808301519267ffffffffffffffff9384811161026e5782886119de92840101610e9f565b9360a082015181811161026e5783896119f992850101610e9f565b9360c083015191821161026e578894611a2f611a2a611a2460009789611a3597611a41990101610e9f565b93611866565b611bcb565b906118a7565b60405191828092611890565b039060025afa1561183e576000611a5e611a3586938351906118fb565b039060025afa1561183e57610ee193611a8360005194820151151580611a8857611932565b611c7d565b611932565b611a9a6020820182610cb0565b9081604051918237206040805192602084019281358452828501520135606083015260608252608082019082821067ffffffffffffffff83111761018c5781604052825190209160a081019283523060c082015260e04691015260608152611b0181610191565b51902090565b60405190611b1482610170565b604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392d5f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b908160031b9180830460081490151715610d3e57565b90611b86826101fd565b611b9360405191826101ad565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0611bc182946101fd565b0190602036910137565b805115611c7457611bda611b07565b611c00611bf1611bea8451611b66565b6006900490565b835160069006611c6657611b7c565b91602083019181805101925b838310611c1a575050505090565b6004906003809401938451600190603f9082828260121c16880101518553828282600c1c16880101518386015382828260061c1688010151600286015316850101519082015301611c0c565b611c6f906112c8565b611b7c565b50610ee1610d43565b92919080158015611e98575b8015611e6e575b8015611e44575b611e3b57610ee193611e30611caa612015565b91611cb36101ee565b600081526000602082015260006040820152835260208151910151611cd66101ee565b918252602082015260016040820152611cf560208401918083526120a4565b90611e21611d0b6040860193808552835161205a565b9260608601938452611e11611e01611d216101ee565b7f6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c29681527f4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5602082015260016040820152611d8460808a019180835287519061205a565b60a08a0152611d96815185519061205a565b60c08a0152611da8815188519061205a565b60e08a0152611db781516120a4565b90611dcc6101008b019280845288519061205a565b6101208b0152611ddf825186519061205a565b6101408b0152611df2825189519061205a565b6101608b01525190519061205a565b610180880194818652519061205a565b6101a0870152825190519061205a565b6101c08501525190519061205a565b6101e0820152611ea0565b50505050600090565b507fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551821015611c97565b507fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551811015611c90565b508115611c89565b939290917fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255190818410801590611fb0575b611fa657611edf829161236e565b809309918309600080918193608091825b611f0857505050611f03939495506120c4565b501490565b85611f84575b888160fe1c600c8460fc1c161780611f3b575b5050611f3490600292831b921b92611fcb565b9182611ef0565b611f779397611f34976040611f6e611f5685879b989b611fba565b5151946020611f658289611fba565b51015196611fba565b5101519461219b565b9590945090928838611f21565b9294611f959194611f9b93966122b8565b916122b8565b949193909392611f0e565b5060009450505050565b5081811015611ed1565b9060108110156113385760051b0190565b8015610d3e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b6040519061200382610170565b60006040838281528260208201520152565b6040519061020080830183811067ffffffffffffffff82111761018c576040528260005b82811061204557505050565b602090612050611ff6565b8184015201612039565b61208791612066611ff6565b5081519160406020820151910151825191604060208501519401519461219b565b906040519261209584610170565b83526020830152604082015290565b612087906120b0611ff6565b5080519060406020820151910151916122b8565b929190811561218f578160007fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8481809611612185575b505060405191602083526020808401526020604084015260608301527fffffffff00000001000000000000000000000000fffffffffffffffffffffffd60808301528360a083015260208260c08160057ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa1561013e575082905181808280098097099509900990565b06915083386120fb565b50509050600090600090565b9395939190816121ad57505050929190565b909291949586156122ae577fffffffff00000001000000000000000000000000ffffffffffffffffffffffff9586858196958280838199099b818d999781868180808f9d888009809d099c8d99099c81878d0990099c0990099308958181106122a7575b03958280808960020980099281808481878d09938181106122a0575b036002099481868009980996828089600209830890818110612299575b039b8c936002090994818110612292575b03900997828910612289575b859182910892800995828710612280575b960394030990565b95840195612278565b97850197612267565b830161225b565b830161224a565b820161222d565b8301612211565b5094505091929190565b9290917fffffffff00000001000000000000000000000000ffffffffffffffffffffffff809181858009958280808080808c87096004099a800960080992818080808089800980097fffffffff00000001000000000000000000000000fffffffffffffffffffffffc0992800960030908818960020982828009818110612367575b038981809b10612360575b039009818110612359575b03940960020990565b8301612350565b8301612345565b830161233a565b7fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255180821161240f575b60405191602083526020808401526020604084015260608301527fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254f608083015260a082015260208160c08160057ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa1561026e575190565b8091069061239756fea164736f6c6343000813000a","opcodes":"PUSH1 0xA0 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x7E JUMPI PUSH2 0x24EC DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH2 0x68 JUMPI DUP3 SWAP2 PUSH2 0xA36 DUP4 CODECOPY SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO PUSH2 0x5C JUMPI PUSH1 0x80 MSTORE PUSH1 0x40 MLOAD PUSH2 0x9B2 SWAP1 DUP2 PUSH2 0x84 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 DUP2 DUP2 PUSH1 0xE6 ADD MSTORE DUP2 DUP2 PUSH2 0x3F3 ADD MSTORE PUSH2 0x526 ADD MSTORE RETURN JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x11464FBE EQ PUSH2 0x9C JUMPI POP DUP1 PUSH4 0xC8CB55AE EQ PUSH2 0x7F JUMPI PUSH4 0xCAC8CFC2 EQ PUSH2 0x42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x7C JUMPI PUSH1 0x20 PUSH2 0x5E PUSH2 0x55 CALLDATASIZE PUSH2 0x19A JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP2 PUSH2 0x450 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x7C JUMPI PUSH1 0x20 PUSH2 0x5E PUSH2 0x93 CALLDATASIZE PUSH2 0x19A JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP2 PUSH2 0x31A JUMP JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x10A JUMPI DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x10A JUMPI PUSH1 0x20 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x12A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x12A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x80 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC DUP3 ADD SLT PUSH2 0x253 JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH1 0x24 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x44 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x253 JUMPI DUP3 PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x253 JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD SWAP2 DUP3 GT PUSH2 0x12A JUMPI PUSH1 0x40 MLOAD SWAP3 PUSH2 0x22C PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP7 ADD AND ADD DUP6 PUSH2 0x159 JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x24 DUP4 DUP4 ADD ADD GT PUSH2 0x253 JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x24 PUSH1 0x20 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 PUSH1 0x64 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x26B JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x25B JUMP JUMPDEST SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F PUSH1 0x20 SWAP4 PUSH2 0x2B7 DUP2 MLOAD DUP1 SWAP3 DUP2 DUP8 MSTORE DUP8 DUP1 DUP9 ADD SWAP2 ADD PUSH2 0x258 JUMP JUMPDEST ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 PUSH2 0x2EA SWAP4 PUSH1 0x20 DUP5 MSTORE DUP1 MLOAD PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x20 DUP2 ADD MLOAD DUP3 DUP6 ADD MSTORE ADD MLOAD SWAP2 PUSH1 0x60 DUP1 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x27B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x2EA SWAP5 SWAP4 AND DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x27B JUMP JUMPDEST SWAP3 DUP1 SWAP3 PUSH2 0x342 SWAP3 PUSH1 0x40 MLOAD SWAP6 PUSH2 0x32E DUP8 PUSH2 0x10E JUMP JUMPDEST DUP1 DUP8 MSTORE DUP2 PUSH1 0x20 DUP9 ADD MSTORE DUP3 PUSH1 0x40 DUP9 ADD MSTORE PUSH2 0x450 JUMP JUMPDEST DUP1 EXTCODESIZE PUSH2 0x434 JUMPI POP PUSH2 0x3B1 PUSH2 0x385 SWAP3 PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP2 PUSH32 0x759A68C000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD PUSH2 0x2BE JUMP JUMPDEST SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 ADD DUP5 MSTORE DUP4 PUSH2 0x159 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x403 SWAP3 DUP4 DUP3 ADD SWAP4 DUP3 DUP6 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP7 GT OR PUSH2 0x12A JUMPI DUP3 SWAP2 PUSH2 0x419 SWAP2 PUSH2 0x5A3 DUP5 CODECOPY PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 PUSH32 0x0 AND SWAP1 PUSH2 0x2ED JUMP JUMPDEST SUB SWAP1 PUSH1 0x0 CREATE2 DUP1 ISZERO PUSH2 0x428 JUMPI AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP3 PUSH1 0xB SWAP3 SWAP2 PUSH1 0x55 SWAP5 PUSH1 0x40 SWAP4 DUP5 MLOAD SWAP2 PUSH2 0x467 DUP4 PUSH2 0x10E JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 SWAP3 DUP4 DUP4 ADD MSTORE DUP5 DUP3 ADD MSTORE PUSH2 0x57E PUSH2 0x58A DUP4 PUSH2 0x403 SWAP4 PUSH2 0x4D0 DUP9 MLOAD SWAP2 PUSH2 0x491 DUP5 DUP9 ADD DUP5 PUSH2 0x159 JUMP JUMPDEST DUP7 DUP4 MSTORE DUP4 DUP4 ADD SWAP7 PUSH2 0x5A3 DUP9 CODECOPY DUP10 MLOAD SWAP2 DUP3 SWAP2 PUSH32 0x759A68C000000000000000000000000000000000000000000000000000000000 DUP7 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD PUSH2 0x2BE JUMP JUMPDEST SUB PUSH2 0x501 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 DUP3 DUP2 ADD DUP5 MSTORE DUP4 PUSH2 0x159 JUMP JUMPDEST PUSH2 0x558 DUP11 MLOAD SWAP2 DUP3 PUSH2 0x54C DUP8 DUP3 ADD SWAP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP8 PUSH2 0x2ED JUMP JUMPDEST SUB SWAP1 DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x159 JUMP JUMPDEST DUP10 MLOAD SWAP6 DUP7 SWAP4 PUSH2 0x56F DUP7 DUP7 ADD SWAP10 DUP11 SWAP3 MLOAD SWAP3 DUP4 SWAP2 PUSH2 0x258 JUMP JUMPDEST DUP5 ADD SWAP2 MLOAD DUP1 SWAP4 DUP7 DUP5 ADD SWAP1 PUSH2 0x258 JUMP JUMPDEST ADD SUB DUP1 DUP5 MSTORE ADD DUP3 PUSH2 0x159 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 DUP4 MLOAD SWAP4 DUP5 ADD MSTORE DUP3 ADD MSTORE ADDRESS DUP2 MSTORE ADD PUSH1 0xFF DUP2 MSTORE8 KECCAK256 SWAP1 JUMP INVALID PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH2 0x403 SWAP1 DUP2 CODESIZE SUB DUP1 PUSH2 0x16 DUP2 PUSH2 0x218 JUMP JUMPDEST SWAP4 DUP5 CODECOPY DUP3 ADD SWAP2 DUP2 DUP2 DUP5 SUB SLT PUSH2 0x213 JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 DUP3 SUB PUSH2 0x213 JUMPI PUSH1 0x20 DUP4 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP5 SWAP2 SWAP4 SWAP2 DUP6 DUP3 GT PUSH2 0x213 JUMPI ADD DUP7 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x213 JUMPI DUP1 MLOAD SWAP1 PUSH2 0x71 PUSH2 0x6C DUP4 PUSH2 0x253 JUMP JUMPDEST PUSH2 0x218 JUMP JUMPDEST SWAP2 DUP1 DUP4 MSTORE DUP6 DUP4 ADD SWAP9 DUP7 DUP3 DUP5 ADD ADD GT PUSH2 0x213 JUMPI DUP9 DUP7 PUSH2 0x8F SWAP4 ADD PUSH2 0x26E JUMP JUMPDEST DUP2 EXTCODESIZE ISZERO PUSH2 0x1B9 JUMPI PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP5 OR SWAP1 SSTORE PUSH1 0x0 SWAP3 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B DUP5 DUP1 LOG2 DUP1 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1B2 JUMPI JUMPDEST PUSH2 0x10B JUMPI JUMPDEST DUP6 MLOAD PUSH1 0xBE SWAP1 DUP2 PUSH2 0x345 DUP3 CODECOPY RETURN JUMPDEST DUP6 MLOAD SWAP5 PUSH1 0x60 DUP7 ADD SWAP1 DUP2 GT DUP7 DUP3 LT OR PUSH2 0x19E JUMPI DUP7 SWAP8 DUP5 SWAP3 DUP4 SWAP3 PUSH2 0x188 SWAP10 MSTORE PUSH1 0x27 DUP9 MSTORE PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C DUP8 DUP10 ADD MSTORE PUSH7 0x819985A5B1959 PUSH1 0xCA SHL DUP11 DUP10 ADD MSTORE MLOAD SWAP1 DUP5 GAS DELEGATECALL SWAP2 RETURNDATASIZE ISZERO PUSH2 0x194 JUMPI RETURNDATASIZE SWAP1 PUSH2 0x17A PUSH2 0x6C DUP4 PUSH2 0x253 JUMP JUMPDEST SWAP2 DUP3 MSTORE DUP2 SWAP5 RETURNDATASIZE SWAP3 ADD RETURNDATACOPY PUSH2 0x291 JUMP JUMPDEST POP DUP1 CODESIZE DUP1 DUP1 DUP1 DUP1 PUSH2 0xFE JUMP JUMPDEST POP PUSH1 0x60 SWAP3 POP PUSH2 0x291 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST POP DUP3 PUSH2 0xF9 JUMP JUMPDEST DUP6 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH2 0x23D JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x23D JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x281 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x271 JUMP JUMPDEST SWAP2 SWAP3 SWAP1 ISZERO PUSH2 0x2F3 JUMPI POP DUP2 MLOAD ISZERO PUSH2 0x2A5 JUMPI POP SWAP1 JUMP JUMPDEST EXTCODESIZE ISZERO PUSH2 0x2AE JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x306 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x44 PUSH1 0x40 MLOAD DUP1 SWAP3 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x20 PUSH1 0x4 DUP4 ADD MSTORE PUSH2 0x336 DUP2 MLOAD DUP1 SWAP3 DUP2 PUSH1 0x24 DUP7 ADD MSTORE PUSH1 0x20 DUP7 DUP7 ADD SWAP2 ADD PUSH2 0x26E JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP2 ADD SUB ADD SWAP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE ISZERO PUSH1 0x5F JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD AND PUSH1 0x0 DUP1 DUP1 SWAP3 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE DUP3 DUP1 RETURNDATACOPY ISZERO PUSH1 0x5B JUMPI RETURNDATASIZE SWAP1 RETURN JUMPDEST RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD AND PUSH1 0x0 DUP1 DUP1 SWAP3 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE DUP3 DUP1 RETURNDATACOPY ISZERO PUSH1 0x5B JUMPI RETURNDATASIZE SWAP1 RETURN INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0xC1 JUMPI PUSH1 0x0 SLOAD SWAP1 PUSH1 0xFF DUP3 PUSH1 0x8 SHR AND PUSH2 0x6F JUMPI POP PUSH1 0xFF DUP1 DUP3 AND SUB PUSH2 0x34 JUMPI JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2425 SWAP1 DUP2 PUSH2 0xC7 DUP3 CODECOPY RETURN JUMPDEST PUSH1 0xFF SWAP1 DUP2 NOT AND OR PUSH1 0x0 SSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0xFF DUP2 MSTORE LOG1 CODESIZE PUSH2 0x25 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x616C697A696E67 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x1B JUMPI JUMPDEST CALLDATASIZE ISZERO PUSH2 0x19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x759A68C0 EQ PUSH2 0x8E JUMPI POP DUP1 PUSH4 0x8FB41072 EQ PUSH2 0x89 JUMPI DUP1 PUSH4 0xB627E20F EQ PUSH2 0x84 JUMPI DUP1 PUSH4 0xBE9EF843 EQ PUSH2 0x7F JUMPI DUP1 PUSH4 0xD087D288 EQ PUSH2 0x7A JUMPI DUP1 PUSH4 0xF0F05CEF EQ PUSH2 0x75 JUMPI PUSH4 0xFD5C8D72 SUB PUSH2 0xE JUMPI PUSH2 0x55A JUMP JUMPDEST PUSH2 0x475 JUMP JUMPDEST PUSH2 0x3E9 JUMP JUMPDEST PUSH2 0x3A8 JUMP JUMPDEST PUSH2 0x353 JUMP JUMPDEST PUSH2 0x296 JUMP JUMPDEST CALLVALUE PUSH2 0x13E JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC PUSH1 0x20 DUP2 CALLDATASIZE ADD SLT PUSH2 0x132 JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP2 DUP3 DUP3 GT PUSH2 0x13A JUMPI PUSH1 0x60 SWAP1 DUP3 CALLDATASIZE SUB ADD SLT PUSH2 0x136 JUMPI PUSH2 0xE8 PUSH1 0xE0 PUSH1 0x40 MSTORE JUMP JUMPDEST DUP1 PUSH1 0x4 ADD CALLDATALOAD PUSH1 0x80 MSTORE PUSH1 0x24 DUP2 ADD CALLDATALOAD PUSH1 0xA0 MSTORE PUSH1 0x44 DUP2 ADD CALLDATALOAD SWAP2 DUP3 GT PUSH2 0x136 JUMPI ADD CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x132 JUMPI PUSH2 0x124 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x24 PUSH1 0x4 DUP3 ADD CALLDATALOAD SWAP2 ADD PUSH2 0x237 JUMP JUMPDEST PUSH1 0xC0 MSTORE PUSH2 0x12F PUSH2 0x6D1 JUMP JUMPDEST DUP1 RETURN JUMPDEST POP DUP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x18C JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x141 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x18C JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x18C JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1FB DUP3 PUSH2 0x170 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x18C JUMPI PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH2 0x243 DUP3 PUSH2 0x1FD JUMP JUMPDEST SWAP2 PUSH2 0x251 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x1AD JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x26E JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x286 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x276 JUMP JUMPDEST CALLVALUE PUSH2 0x26E JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x26E JUMPI PUSH1 0x60 PUSH1 0x40 DUP1 MLOAD PUSH2 0x2D4 DUP2 PUSH2 0x170 JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x40 PUSH1 0xA0 PUSH2 0x2ED PUSH2 0x5CD JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 MLOAD SWAP5 DUP6 SWAP4 PUSH1 0x20 DUP6 MSTORE DUP1 MLOAD PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x20 DUP2 ADD MLOAD DUP3 DUP7 ADD MSTORE ADD MLOAD PUSH1 0x60 DUP1 DUP6 ADD MSTORE PUSH2 0x34A DUP2 MLOAD DUP1 SWAP3 DUP2 PUSH1 0x80 DUP9 ADD MSTORE PUSH1 0x20 DUP9 DUP9 ADD SWAP2 ADD PUSH2 0x273 JUMP JUMPDEST ADD AND DUP2 ADD SUB ADD SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x26E JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x26E JUMPI PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x0 SLOAD PUSH1 0x10 SHR AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x26E JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x26E JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0x4 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x26E JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x26E JUMPI PUSH1 0x20 PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC SWAP1 PUSH1 0x20 DUP3 DUP3 ADD SLT PUSH2 0x26E JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x26E JUMPI DUP3 PUSH1 0x80 SWAP3 SUB ADD SLT PUSH2 0x26E JUMPI PUSH1 0x4 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x26E JUMPI PUSH2 0x483 CALLDATASIZE PUSH2 0x425 JUMP JUMPDEST PUSH2 0x495 PUSH2 0x48F DUP3 PUSH2 0x14A6 JUMP JUMPDEST ISZERO PUSH2 0xB9A JUMP JUMPDEST PUSH2 0x4A7 PUSH2 0x4A1 DUP3 PUSH2 0x184F JUMP JUMPDEST ISZERO PUSH2 0xC25 JUMP JUMPDEST PUSH1 0x3 DUP2 CALLDATALOAD DUP1 ISZERO PUSH2 0x53D JUMPI JUMPDEST PUSH1 0x1 DUP2 EQ PUSH2 0x520 JUMPI JUMPDEST PUSH1 0x2 DUP2 EQ PUSH2 0x503 JUMPI JUMPDEST EQ PUSH2 0x4DD JUMPI JUMPDEST PUSH2 0x19 PUSH2 0x4D8 PUSH1 0x5 SLOAD PUSH2 0xD30 JUMP JUMPDEST PUSH1 0x5 SSTORE JUMP JUMPDEST PUSH2 0x4F8 PUSH2 0x4F1 DUP3 PUSH1 0x20 PUSH2 0x4FD SWAP5 ADD SWAP1 PUSH2 0xCB0 JUMP JUMPDEST CALLDATASIZE SWAP2 PUSH2 0x237 JUMP JUMPDEST PUSH2 0xEE4 JUMP JUMPDEST CODESIZE PUSH2 0x4CA JUMP JUMPDEST PUSH2 0x51B PUSH2 0x516 PUSH2 0x4F1 PUSH1 0x20 DUP7 ADD DUP7 PUSH2 0xCB0 JUMP JUMPDEST PUSH2 0xD67 JUMP JUMPDEST PUSH2 0x4C4 JUMP JUMPDEST PUSH2 0x538 PUSH2 0x533 PUSH2 0x4F1 PUSH1 0x20 DUP7 ADD DUP7 PUSH2 0xCB0 JUMP JUMPDEST PUSH2 0x133D JUMP JUMPDEST PUSH2 0x4BB JUMP JUMPDEST PUSH2 0x555 PUSH2 0x550 PUSH2 0x4F1 PUSH1 0x20 DUP7 ADD DUP7 PUSH2 0xCB0 JUMP JUMPDEST PUSH2 0x104C JUMP JUMPDEST PUSH2 0x4B2 JUMP JUMPDEST CALLVALUE PUSH2 0x26E JUMPI PUSH1 0x20 PUSH2 0x572 PUSH2 0x56D CALLDATASIZE PUSH2 0x425 JUMP JUMPDEST PUSH2 0x1A8D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x5C3 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x594 JUMPI JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x589 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x5DA DUP3 PUSH2 0x170 JUMP JUMPDEST DUP2 PUSH1 0x1 SWAP1 DUP2 SLOAD DUP2 MSTORE PUSH1 0x2 SLOAD PUSH1 0x20 SWAP1 DUP2 DUP4 ADD MSTORE PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x3 SLOAD SWAP1 PUSH2 0x602 DUP3 PUSH2 0x57A JUMP JUMPDEST DUP1 DUP7 MSTORE SWAP2 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x694 JUMPI POP PUSH1 0x1 EQ PUSH2 0x62F JUMPI JUMPDEST POP POP POP PUSH1 0x40 SWAP3 SWAP2 PUSH2 0x62B SWAP2 SUB DUP5 PUSH2 0x1AD JUMP JUMPDEST ADD MSTORE JUMP JUMPDEST SWAP1 SWAP5 SWAP4 SWAP3 POP PUSH1 0x3 PUSH1 0x0 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B SWAP5 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x67C JUMPI POP SWAP4 SWAP5 POP SWAP2 SWAP3 POP SWAP1 DUP3 ADD ADD DUP2 PUSH2 0x62B PUSH1 0x40 PUSH2 0x619 JUMP JUMPDEST DUP7 SLOAD DUP9 DUP5 ADD DUP6 ADD MSTORE SWAP6 DUP7 ADD SWAP6 DUP8 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x65F JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP5 DUP8 ADD MSTORE POP POP ISZERO ISZERO PUSH1 0x5 SHL DUP4 ADD ADD SWAP1 POP DUP2 PUSH2 0x62B PUSH1 0x40 PUSH2 0x619 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF DUP2 PUSH1 0x8 SHR AND ISZERO DUP1 SWAP2 DUP2 SWAP3 PUSH2 0x86C JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x84C JUMPI JUMPDEST POP ISZERO PUSH2 0x7C8 JUMPI DUP1 PUSH2 0x723 PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 PUSH1 0x0 SLOAD AND OR PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH2 0x792 JUMPI JUMPDEST PUSH2 0x730 PUSH2 0x87A JUMP JUMPDEST PUSH2 0x736 JUMPI JUMP JUMPDEST PUSH2 0x763 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF PUSH1 0x0 SLOAD AND PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 SWAP1 LOG1 JUMP JUMPDEST PUSH2 0x7C3 PUSH2 0x100 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF PUSH1 0x0 SLOAD AND OR PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH2 0x728 JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST ADDRESS EXTCODESIZE ISZERO SWAP2 POP DUP2 PUSH2 0x85E JUMPI JUMPDEST POP CODESIZE PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x1 SWAP2 POP PUSH1 0xFF AND EQ CODESIZE PUSH2 0x857 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFF DUP3 AND LT SWAP2 POP PUSH2 0x6E5 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 PUSH1 0x4 SLOAD AND OR PUSH1 0x4 SSTORE PUSH1 0x80 MLOAD DUP2 SSTORE PUSH1 0xA0 MLOAD PUSH1 0x2 SSTORE PUSH1 0xC0 MLOAD SWAP1 DUP2 MLOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x18C JUMPI PUSH2 0x8DB DUP4 PUSH2 0x8D6 PUSH1 0x3 SLOAD PUSH2 0x57A JUMP JUMPDEST PUSH2 0xA1A JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 PUSH1 0x1F DUP6 GT PUSH1 0x1 EQ PUSH2 0x954 JUMPI POP PUSH1 0x0 SWAP2 DUP5 SWAP2 DUP3 PUSH2 0x929 JUMPI JUMPDEST POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP3 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x3 SSTORE JUMP JUMPDEST ADD MLOAD SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF CODESIZE PUSH2 0x8F6 JUMP JUMPDEST SWAP2 SWAP1 DUP5 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 SWAP6 SWAP7 AND PUSH2 0x9A8 PUSH1 0x3 PUSH1 0x0 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B SWAP1 JUMP JUMPDEST SWAP5 PUSH1 0x0 SWAP1 JUMPDEST DUP9 DUP4 DUP4 LT PUSH2 0xA00 JUMPI POP POP POP LT PUSH2 0x9C9 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x3 SSTORE JUMP JUMPDEST ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x9BE JUMP JUMPDEST DUP6 DUP8 ADD MLOAD DUP9 SSTORE SWAP1 SWAP7 ADD SWAP6 SWAP5 DUP6 ADD SWAP5 DUP8 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH2 0x9AD JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0xA26 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH1 0x3 DUP3 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B SWAP1 PUSH1 0x20 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP4 ADD SWAP5 LT PUSH2 0xA81 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0xA76 JUMPI POP POP POP JUMP JUMPDEST DUP2 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xA6A JUMP JUMPDEST SWAP1 SWAP3 POP DUP3 SWAP1 PUSH2 0xA61 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 SWAP1 DUP2 SSTORE PUSH1 0x40 PUSH1 0x20 SWAP3 DUP4 DUP2 ADD MLOAD PUSH1 0x2 SSTORE ADD MLOAD SWAP2 DUP3 MLOAD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT PUSH2 0x18C JUMPI PUSH2 0xAC2 DUP5 PUSH2 0x8D6 PUSH1 0x3 SLOAD PUSH2 0x57A JUMP JUMPDEST DUP2 PUSH1 0x1F DUP6 GT PUSH1 0x1 EQ PUSH2 0xB0C JUMPI POP PUSH1 0x0 SWAP2 DUP5 SWAP2 DUP3 PUSH2 0x929 JUMPI POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP3 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x3 SSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP5 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 SWAP6 SWAP7 AND PUSH2 0xB60 PUSH1 0x3 PUSH1 0x0 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B SWAP1 JUMP JUMPDEST SWAP5 PUSH1 0x0 SWAP1 JUMPDEST DUP9 DUP4 DUP4 LT PUSH2 0xB80 JUMPI POP POP POP LT PUSH2 0x9C9 JUMPI POP POP POP DUP2 SHL ADD PUSH1 0x3 SSTORE JUMP JUMPDEST DUP6 DUP8 ADD MLOAD DUP9 SSTORE SWAP1 SWAP7 ADD SWAP6 SWAP5 DUP6 ADD SWAP5 DUP8 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH2 0xB65 JUMP JUMPDEST ISZERO PUSH2 0xBA1 JUMPI JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4163636F756E743A205369676E617475726520766572696669636174696F6E20 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6661696C65640000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST ISZERO PUSH2 0xC2C JUMPI JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4163636F756E743A204E6F6E636520766572696669636174696F6E206661696C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6564000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 CALLDATALOAD SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x26E JUMPI ADD DUP1 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x26E JUMPI PUSH1 0x20 ADD SWAP2 DUP2 CALLDATASIZE SUB DUP4 SGT PUSH2 0x26E JUMPI JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xD3E JUMPI JUMP JUMPDEST PUSH2 0xD01 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x18C JUMPI PUSH1 0x40 MSTORE PUSH1 0x0 DUP3 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFF PUSH1 0x4 SLOAD AND ISZERO ISZERO SUB PUSH2 0xE1B JUMPI PUSH1 0x14 PUSH2 0xDEE SWAP2 ADD MLOAD PUSH2 0xDA6 PUSH2 0xD89 PUSH2 0x1EE JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xD9C PUSH2 0xD43 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0xA8B JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000FFFF PUSH22 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000 PUSH1 0x0 SLOAD SWAP3 PUSH1 0x10 SHL AND SWAP2 AND OR PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH2 0x1FB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 PUSH1 0x4 SLOAD AND PUSH1 0x4 SSTORE JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4163636F756E743A20416C72656164792061646472657373206F776E65722065 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E61626C65640000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x26E JUMPI DUP1 MLOAD PUSH2 0xEB5 DUP2 PUSH2 0x1FD JUMP JUMPDEST SWAP3 PUSH2 0xEC3 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x1AD JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 DUP3 DUP5 ADD ADD GT PUSH2 0x26E JUMPI PUSH2 0xEE1 SWAP2 PUSH1 0x20 DUP1 DUP6 ADD SWAP2 ADD PUSH2 0x273 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x4 SLOAD AND PUSH2 0xFAA JUMPI DUP1 MLOAD DUP2 ADD SWAP1 PUSH1 0x60 DUP2 DUP4 SUB SLT PUSH2 0x26E JUMPI PUSH1 0x20 DUP2 ADD MLOAD SWAP1 PUSH1 0x40 DUP2 ADD MLOAD SWAP1 PUSH1 0x60 DUP2 ADD MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x26E JUMPI PUSH1 0x20 PUSH2 0xF32 SWAP3 DUP2 PUSH2 0xF7A SWAP8 ADD SWAP3 ADD ADD PUSH2 0xE9F JUMP JUMPDEST SWAP1 PUSH2 0xF3B PUSH2 0x1EE JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0xF75 PUSH32 0xFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000FFFF PUSH1 0x0 SLOAD AND PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH2 0xA8B JUMP JUMPDEST PUSH2 0x1FB PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 PUSH1 0x4 SLOAD AND OR PUSH1 0x4 SSTORE JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4163636F756E743A20416C726561647920706173736B6579206F776E65722065 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E61626C65640000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND SUB PUSH2 0x26E JUMPI JUMP JUMPDEST DUP1 MLOAD DUP2 ADD PUSH1 0x60 DUP3 DUP3 SUB SLT PUSH2 0x26E JUMPI PUSH1 0x20 DUP3 ADD MLOAD SWAP1 PUSH2 0x1069 DUP3 PUSH2 0x102E JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MLOAD SWAP1 PUSH1 0x60 DUP5 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x26E JUMPI PUSH2 0x1FB SWAP5 PUSH1 0x20 PUSH2 0x10AD SWAP3 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 ADD SWAP3 ADD ADD PUSH2 0xE9F JUMP JUMPDEST SWAP3 AND PUSH2 0x1486 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x18C JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x26E JUMPI DUP1 MLOAD SWAP2 PUSH2 0x10E3 DUP4 PUSH2 0x10B4 JUMP JUMPDEST SWAP3 PUSH2 0x10F1 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x1AD JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 SWAP3 DUP4 DUP1 DUP7 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x26E JUMPI DUP4 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x111B JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP2 MLOAD DUP2 MSTORE SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0x110D JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x26E JUMPI DUP2 MLOAD SWAP1 PUSH2 0x1142 DUP3 PUSH2 0x10B4 JUMP JUMPDEST SWAP3 PUSH2 0x1150 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x1AD JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 SWAP3 DUP4 DUP1 DUP7 ADD SWAP2 PUSH1 0x5 SHL DUP4 ADD ADD SWAP3 DUP1 DUP5 GT PUSH2 0x26E JUMPI DUP5 DUP4 ADD SWAP2 JUMPDEST DUP5 DUP4 LT PUSH2 0x117E JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x26E JUMPI DUP7 SWAP2 PUSH2 0x11A0 DUP5 DUP5 DUP1 SWAP5 DUP10 ADD ADD PUSH2 0xE9F JUMP JUMPDEST DUP2 MSTORE ADD SWAP3 ADD SWAP2 PUSH2 0x116E JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x60 DUP3 DUP5 SUB SLT PUSH2 0x26E JUMPI DUP2 MLOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP2 GT PUSH2 0x26E JUMPI DUP2 ADD SWAP4 DUP1 PUSH1 0x1F DUP7 ADD SLT ISZERO PUSH2 0x26E JUMPI DUP5 MLOAD PUSH2 0x11E4 DUP2 PUSH2 0x10B4 JUMP JUMPDEST SWAP1 PUSH2 0x11F2 PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x1AD JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH1 0x20 SWAP7 DUP8 DUP1 DUP5 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP2 DUP5 DUP4 GT PUSH2 0x26E JUMPI DUP9 DUP1 SWAP3 ADD SWAP1 JUMPDEST DUP4 DUP3 LT PUSH2 0x124A JUMPI POP POP POP POP SWAP5 DUP3 ADD MLOAD DUP5 DUP2 GT PUSH2 0x26E JUMPI DUP2 PUSH2 0x1233 SWAP2 DUP5 ADD PUSH2 0x10CC JUMP JUMPDEST SWAP4 PUSH1 0x40 DUP4 ADD MLOAD SWAP1 DUP2 GT PUSH2 0x26E JUMPI PUSH2 0xEE1 SWAP3 ADD PUSH2 0x112A JUMP JUMPDEST DUP3 DUP1 SWAP2 DUP4 MLOAD PUSH2 0x1258 DUP2 PUSH2 0x102E JUMP JUMPDEST DUP2 MSTORE ADD SWAP2 ADD SWAP1 PUSH2 0x1211 JUMP JUMPDEST ISZERO PUSH2 0x126A JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x77726F6E67206172726179206C656E6774687300000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0xD3E JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x1338 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x12F5 JUMP JUMPDEST PUSH2 0x1350 SWAP1 PUSH1 0x20 DUP1 DUP3 MLOAD DUP4 ADD ADD SWAP2 ADD PUSH2 0x11AB JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x136A DUP3 MLOAD DUP6 MLOAD DUP1 SWAP2 EQ SWAP1 DUP2 PUSH2 0x1416 JUMPI JUMPDEST POP PUSH2 0x1263 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x13CC JUMPI POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x13C6 JUMPI DUP1 PUSH2 0x13BC PUSH2 0x13AB PUSH2 0x1391 PUSH2 0x13C1 SWAP5 DUP7 PUSH2 0x1324 JUMP JUMPDEST MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x13B5 DUP4 DUP9 PUSH2 0x1324 JUMP JUMPDEST MLOAD SWAP1 PUSH2 0x1435 JUMP JUMPDEST PUSH2 0x12C8 JUMP JUMPDEST PUSH2 0x1374 JUMP JUMPDEST POP POP SWAP1 POP JUMP JUMPDEST SWAP3 SWAP1 PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x140F JUMPI DUP1 PUSH2 0x13BC PUSH2 0x13EE PUSH2 0x1391 PUSH2 0x140A SWAP5 DUP7 PUSH2 0x1324 JUMP JUMPDEST PUSH2 0x13F8 DUP4 DUP10 PUSH2 0x1324 JUMP JUMPDEST MLOAD PUSH2 0x1403 DUP5 DUP9 PUSH2 0x1324 JUMP JUMPDEST MLOAD SWAP2 PUSH2 0x1486 JUMP JUMPDEST PUSH2 0x13D1 JUMP JUMPDEST POP POP POP SWAP1 POP JUMP JUMPDEST DUP4 MLOAD DUP1 ISZERO SWAP3 POP DUP3 ISZERO PUSH2 0x142B JUMPI JUMPDEST POP POP CODESIZE PUSH2 0x1364 JUMP JUMPDEST EQ SWAP1 POP CODESIZE DUP1 PUSH2 0x1423 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP3 PUSH1 0x20 DUP4 MLOAD SWAP4 ADD SWAP2 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x147E JUMPI RETURNDATASIZE SWAP1 PUSH2 0x1455 DUP3 PUSH2 0x1FD JUMP JUMPDEST SWAP2 PUSH2 0x1463 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x1AD JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST ISZERO PUSH2 0x1476 JUMPI POP JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD REVERT JUMPDEST PUSH1 0x60 SWAP1 PUSH2 0x146E JUMP JUMPDEST SWAP2 PUSH1 0x0 SWAP3 DUP4 SWAP3 PUSH1 0x20 DUP4 MLOAD SWAP4 ADD SWAP2 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x147E JUMPI RETURNDATASIZE SWAP1 PUSH2 0x1455 DUP3 PUSH2 0x1FD JUMP JUMPDEST PUSH2 0x14AF DUP2 PUSH2 0x1A8D JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x14F3 JUMPI PUSH2 0x14E1 SWAP1 PUSH2 0x14D2 PUSH2 0x4F1 DUP5 PUSH1 0x60 PUSH2 0x14E5 SWAP7 ADD SWAP1 PUSH2 0xCB0 JUMP JUMPDEST SWAP1 PUSH2 0x14DB PUSH2 0x5CD JUMP JUMPDEST SWAP2 PUSH2 0x1997 JUMP JUMPDEST ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x14EE JUMPI PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x1594 PUSH2 0x157B PUSH2 0x1541 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x0 MSTORE PUSH1 0x1C MSTORE PUSH1 0x3C PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x1575 PUSH2 0x4F1 PUSH2 0x156A PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 PUSH1 0x10 SHR AND SWAP1 JUMP JUMPDEST SWAP7 PUSH1 0x60 DUP2 ADD SWAP1 PUSH2 0xCB0 JUMP JUMPDEST SWAP1 PUSH2 0x15A0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP2 AND SUB PUSH2 0x14EE JUMPI PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0xEE1 SWAP2 PUSH2 0x15AD SWAP2 PUSH2 0x1777 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x15EE JUMP JUMPDEST PUSH1 0x5 GT ISZERO PUSH2 0x15BF JUMPI JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x15F7 DUP2 PUSH2 0x15B5 JUMP JUMPDEST DUP1 PUSH2 0x15FF JUMPI POP JUMP JUMPDEST PUSH2 0x1608 DUP2 PUSH2 0x15B5 JUMP JUMPDEST PUSH1 0x1 DUP2 SUB PUSH2 0x166F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0x1678 DUP2 PUSH2 0x15B5 JUMP JUMPDEST PUSH1 0x2 DUP2 SUB PUSH2 0x16DF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP1 PUSH2 0x16EB PUSH1 0x3 SWAP3 PUSH2 0x15B5 JUMP JUMPDEST EQ PUSH2 0x16F2 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 PUSH1 0x41 DUP2 MLOAD EQ PUSH1 0x0 EQ PUSH2 0x17A5 JUMPI PUSH2 0x17A1 SWAP2 PUSH1 0x20 DUP3 ADD MLOAD SWAP1 PUSH1 0x60 PUSH1 0x40 DUP5 ADD MLOAD SWAP4 ADD MLOAD PUSH1 0x0 BYTE SWAP1 PUSH2 0x17BB JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP1 PUSH1 0x2 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP3 SWAP2 SWAP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT PUSH2 0x1843 JUMPI SWAP2 PUSH1 0x80 SWAP5 SWAP4 SWAP2 PUSH1 0xFF PUSH1 0x20 SWAP5 PUSH1 0x40 MLOAD SWAP5 DUP6 MSTORE AND DUP5 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 SWAP4 DUP5 SWAP2 DUP3 DUP1 MSTORE PUSH1 0x1 GAS STATICCALL ISZERO PUSH2 0x183E JUMPI DUP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0x1838 JUMPI SWAP2 SWAP1 JUMP JUMPDEST POP PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x17AF JUMP JUMPDEST POP POP POP POP PUSH1 0x0 SWAP1 PUSH1 0x3 SWAP1 JUMP JUMPDEST PUSH1 0x40 PUSH1 0x5 SLOAD SWAP2 ADD CALLDATALOAD EQ PUSH2 0x1861 JUMPI PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x20 DUP3 MSTORE PUSH1 0x40 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x18C JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH2 0x18A3 PUSH1 0x20 SWAP3 DUP3 DUP2 MLOAD SWAP5 DUP6 SWAP3 ADD PUSH2 0x273 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1FB SWAP2 SWAP4 SWAP3 SWAP4 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP2 DUP4 MLOAD PUSH2 0x18C8 DUP2 PUSH1 0x20 SWAP7 DUP8 DUP1 DUP9 ADD SWAP2 ADD PUSH2 0x273 JUMP JUMPDEST DUP4 ADD PUSH2 0x18DC DUP3 MLOAD DUP1 SWAP4 DUP8 DUP1 DUP6 ADD SWAP2 ADD PUSH2 0x273 JUMP JUMPDEST ADD PUSH2 0x18EF DUP3 MLOAD DUP1 SWAP4 DUP7 DUP1 DUP6 ADD SWAP2 ADD PUSH2 0x273 JUMP JUMPDEST ADD SUB DUP1 DUP6 MSTORE ADD DUP4 PUSH2 0x1AD JUMP JUMPDEST PUSH1 0x40 PUSH2 0x1FB SWAP2 SWAP4 SWAP3 SWAP4 DUP2 MLOAD SWAP5 DUP2 PUSH2 0x191C DUP8 SWAP4 MLOAD DUP1 SWAP3 PUSH1 0x20 DUP1 DUP8 ADD SWAP2 ADD PUSH2 0x273 JUMP JUMPDEST DUP3 ADD SWAP1 PUSH1 0x20 DUP3 ADD MSTORE SUB PUSH1 0x20 DUP2 ADD DUP6 MSTORE ADD DUP4 PUSH2 0x1AD JUMP JUMPDEST ISZERO PUSH2 0x1939 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4B6579206E6F7420666F756E6400000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 DUP2 MLOAD DUP3 ADD SWAP1 PUSH1 0x20 SWAP3 PUSH1 0xC0 DUP2 DUP6 DUP6 ADD SWAP5 SUB SLT PUSH2 0x26E JUMPI PUSH1 0x40 DUP2 ADD MLOAD SWAP2 PUSH1 0x60 DUP3 ADD MLOAD SWAP4 PUSH1 0x80 DUP4 ADD MLOAD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF SWAP4 DUP5 DUP2 GT PUSH2 0x26E JUMPI DUP3 DUP9 PUSH2 0x19DE SWAP3 DUP5 ADD ADD PUSH2 0xE9F JUMP JUMPDEST SWAP4 PUSH1 0xA0 DUP3 ADD MLOAD DUP2 DUP2 GT PUSH2 0x26E JUMPI DUP4 DUP10 PUSH2 0x19F9 SWAP3 DUP6 ADD ADD PUSH2 0xE9F JUMP JUMPDEST SWAP4 PUSH1 0xC0 DUP4 ADD MLOAD SWAP2 DUP3 GT PUSH2 0x26E JUMPI DUP9 SWAP5 PUSH2 0x1A2F PUSH2 0x1A2A PUSH2 0x1A24 PUSH1 0x0 SWAP8 DUP10 PUSH2 0x1A35 SWAP8 PUSH2 0x1A41 SWAP10 ADD ADD PUSH2 0xE9F JUMP JUMPDEST SWAP4 PUSH2 0x1866 JUMP JUMPDEST PUSH2 0x1BCB JUMP JUMPDEST SWAP1 PUSH2 0x18A7 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 DUP1 SWAP3 PUSH2 0x1890 JUMP JUMPDEST SUB SWAP1 PUSH1 0x2 GAS STATICCALL ISZERO PUSH2 0x183E JUMPI PUSH1 0x0 PUSH2 0x1A5E PUSH2 0x1A35 DUP7 SWAP4 DUP4 MLOAD SWAP1 PUSH2 0x18FB JUMP JUMPDEST SUB SWAP1 PUSH1 0x2 GAS STATICCALL ISZERO PUSH2 0x183E JUMPI PUSH2 0xEE1 SWAP4 PUSH2 0x1A83 PUSH1 0x0 MLOAD SWAP5 DUP3 ADD MLOAD ISZERO ISZERO DUP1 PUSH2 0x1A88 JUMPI PUSH2 0x1932 JUMP JUMPDEST PUSH2 0x1C7D JUMP JUMPDEST PUSH2 0x1932 JUMP JUMPDEST PUSH2 0x1A9A PUSH1 0x20 DUP3 ADD DUP3 PUSH2 0xCB0 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x40 MLOAD SWAP2 DUP3 CALLDATACOPY KECCAK256 PUSH1 0x40 DUP1 MLOAD SWAP3 PUSH1 0x20 DUP5 ADD SWAP3 DUP2 CALLDATALOAD DUP5 MSTORE DUP3 DUP6 ADD MSTORE ADD CALLDATALOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x60 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 DUP3 DUP3 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT OR PUSH2 0x18C JUMPI DUP2 PUSH1 0x40 MSTORE DUP3 MLOAD SWAP1 KECCAK256 SWAP2 PUSH1 0xA0 DUP2 ADD SWAP3 DUP4 MSTORE ADDRESS PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 CHAINID SWAP2 ADD MSTORE PUSH1 0x60 DUP2 MSTORE PUSH2 0x1B01 DUP2 PUSH2 0x191 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1B14 DUP3 PUSH2 0x170 JUMP JUMPDEST PUSH1 0x40 DUP3 MSTORE PUSH32 0x6768696A6B6C6D6E6F707172737475767778797A303132333435363738392D5F PUSH1 0x40 DUP4 PUSH32 0x4142434445464748494A4B4C4D4E4F505152535455565758595A616263646566 PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x3 SHL SWAP2 DUP1 DUP4 DIV PUSH1 0x8 EQ SWAP1 ISZERO OR ISZERO PUSH2 0xD3E JUMPI JUMP JUMPDEST SWAP1 PUSH2 0x1B86 DUP3 PUSH2 0x1FD JUMP JUMPDEST PUSH2 0x1B93 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x1AD JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH2 0x1BC1 DUP3 SWAP5 PUSH2 0x1FD JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x1C74 JUMPI PUSH2 0x1BDA PUSH2 0x1B07 JUMP JUMPDEST PUSH2 0x1C00 PUSH2 0x1BF1 PUSH2 0x1BEA DUP5 MLOAD PUSH2 0x1B66 JUMP JUMPDEST PUSH1 0x6 SWAP1 DIV SWAP1 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x6 SWAP1 MOD PUSH2 0x1C66 JUMPI PUSH2 0x1B7C JUMP JUMPDEST SWAP2 PUSH1 0x20 DUP4 ADD SWAP2 DUP2 DUP1 MLOAD ADD SWAP3 JUMPDEST DUP4 DUP4 LT PUSH2 0x1C1A JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x4 SWAP1 PUSH1 0x3 DUP1 SWAP5 ADD SWAP4 DUP5 MLOAD PUSH1 0x1 SWAP1 PUSH1 0x3F SWAP1 DUP3 DUP3 DUP3 PUSH1 0x12 SHR AND DUP9 ADD ADD MLOAD DUP6 MSTORE8 DUP3 DUP3 DUP3 PUSH1 0xC SHR AND DUP9 ADD ADD MLOAD DUP4 DUP7 ADD MSTORE8 DUP3 DUP3 DUP3 PUSH1 0x6 SHR AND DUP9 ADD ADD MLOAD PUSH1 0x2 DUP7 ADD MSTORE8 AND DUP6 ADD ADD MLOAD SWAP1 DUP3 ADD MSTORE8 ADD PUSH2 0x1C0C JUMP JUMPDEST PUSH2 0x1C6F SWAP1 PUSH2 0x12C8 JUMP JUMPDEST PUSH2 0x1B7C JUMP JUMPDEST POP PUSH2 0xEE1 PUSH2 0xD43 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 DUP1 ISZERO DUP1 ISZERO PUSH2 0x1E98 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x1E6E JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x1E44 JUMPI JUMPDEST PUSH2 0x1E3B JUMPI PUSH2 0xEE1 SWAP4 PUSH2 0x1E30 PUSH2 0x1CAA PUSH2 0x2015 JUMP JUMPDEST SWAP2 PUSH2 0x1CB3 PUSH2 0x1EE JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP3 ADD MSTORE DUP4 MSTORE PUSH1 0x20 DUP2 MLOAD SWAP2 ADD MLOAD PUSH2 0x1CD6 PUSH2 0x1EE JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x1CF5 PUSH1 0x20 DUP5 ADD SWAP2 DUP1 DUP4 MSTORE PUSH2 0x20A4 JUMP JUMPDEST SWAP1 PUSH2 0x1E21 PUSH2 0x1D0B PUSH1 0x40 DUP7 ADD SWAP4 DUP1 DUP6 MSTORE DUP4 MLOAD PUSH2 0x205A JUMP JUMPDEST SWAP3 PUSH1 0x60 DUP7 ADD SWAP4 DUP5 MSTORE PUSH2 0x1E11 PUSH2 0x1E01 PUSH2 0x1D21 PUSH2 0x1EE JUMP JUMPDEST PUSH32 0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296 DUP2 MSTORE PUSH32 0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x1D84 PUSH1 0x80 DUP11 ADD SWAP2 DUP1 DUP4 MSTORE DUP8 MLOAD SWAP1 PUSH2 0x205A JUMP JUMPDEST PUSH1 0xA0 DUP11 ADD MSTORE PUSH2 0x1D96 DUP2 MLOAD DUP6 MLOAD SWAP1 PUSH2 0x205A JUMP JUMPDEST PUSH1 0xC0 DUP11 ADD MSTORE PUSH2 0x1DA8 DUP2 MLOAD DUP9 MLOAD SWAP1 PUSH2 0x205A JUMP JUMPDEST PUSH1 0xE0 DUP11 ADD MSTORE PUSH2 0x1DB7 DUP2 MLOAD PUSH2 0x20A4 JUMP JUMPDEST SWAP1 PUSH2 0x1DCC PUSH2 0x100 DUP12 ADD SWAP3 DUP1 DUP5 MSTORE DUP9 MLOAD SWAP1 PUSH2 0x205A JUMP JUMPDEST PUSH2 0x120 DUP12 ADD MSTORE PUSH2 0x1DDF DUP3 MLOAD DUP7 MLOAD SWAP1 PUSH2 0x205A JUMP JUMPDEST PUSH2 0x140 DUP12 ADD MSTORE PUSH2 0x1DF2 DUP3 MLOAD DUP10 MLOAD SWAP1 PUSH2 0x205A JUMP JUMPDEST PUSH2 0x160 DUP12 ADD MSTORE MLOAD SWAP1 MLOAD SWAP1 PUSH2 0x205A JUMP JUMPDEST PUSH2 0x180 DUP9 ADD SWAP5 DUP2 DUP7 MSTORE MLOAD SWAP1 PUSH2 0x205A JUMP JUMPDEST PUSH2 0x1A0 DUP8 ADD MSTORE DUP3 MLOAD SWAP1 MLOAD SWAP1 PUSH2 0x205A JUMP JUMPDEST PUSH2 0x1C0 DUP6 ADD MSTORE MLOAD SWAP1 MLOAD SWAP1 PUSH2 0x205A JUMP JUMPDEST PUSH2 0x1E0 DUP3 ADD MSTORE PUSH2 0x1EA0 JUMP JUMPDEST POP POP POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551 DUP3 LT ISZERO PUSH2 0x1C97 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551 DUP2 LT ISZERO PUSH2 0x1C90 JUMP JUMPDEST POP DUP2 ISZERO PUSH2 0x1C89 JUMP JUMPDEST SWAP4 SWAP3 SWAP1 SWAP2 PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551 SWAP1 DUP2 DUP5 LT DUP1 ISZERO SWAP1 PUSH2 0x1FB0 JUMPI JUMPDEST PUSH2 0x1FA6 JUMPI PUSH2 0x1EDF DUP3 SWAP2 PUSH2 0x236E JUMP JUMPDEST DUP1 SWAP4 MULMOD SWAP2 DUP4 MULMOD PUSH1 0x0 DUP1 SWAP2 DUP2 SWAP4 PUSH1 0x80 SWAP2 DUP3 JUMPDEST PUSH2 0x1F08 JUMPI POP POP POP PUSH2 0x1F03 SWAP4 SWAP5 SWAP6 POP PUSH2 0x20C4 JUMP JUMPDEST POP EQ SWAP1 JUMP JUMPDEST DUP6 PUSH2 0x1F84 JUMPI JUMPDEST DUP9 DUP2 PUSH1 0xFE SHR PUSH1 0xC DUP5 PUSH1 0xFC SHR AND OR DUP1 PUSH2 0x1F3B JUMPI JUMPDEST POP POP PUSH2 0x1F34 SWAP1 PUSH1 0x2 SWAP3 DUP4 SHL SWAP3 SHL SWAP3 PUSH2 0x1FCB JUMP JUMPDEST SWAP2 DUP3 PUSH2 0x1EF0 JUMP JUMPDEST PUSH2 0x1F77 SWAP4 SWAP8 PUSH2 0x1F34 SWAP8 PUSH1 0x40 PUSH2 0x1F6E PUSH2 0x1F56 DUP6 DUP8 SWAP12 SWAP9 SWAP12 PUSH2 0x1FBA JUMP JUMPDEST MLOAD MLOAD SWAP5 PUSH1 0x20 PUSH2 0x1F65 DUP3 DUP10 PUSH2 0x1FBA JUMP JUMPDEST MLOAD ADD MLOAD SWAP7 PUSH2 0x1FBA JUMP JUMPDEST MLOAD ADD MLOAD SWAP5 PUSH2 0x219B JUMP JUMPDEST SWAP6 SWAP1 SWAP5 POP SWAP1 SWAP3 DUP9 CODESIZE PUSH2 0x1F21 JUMP JUMPDEST SWAP3 SWAP5 PUSH2 0x1F95 SWAP2 SWAP5 PUSH2 0x1F9B SWAP4 SWAP7 PUSH2 0x22B8 JUMP JUMPDEST SWAP2 PUSH2 0x22B8 JUMP JUMPDEST SWAP5 SWAP2 SWAP4 SWAP1 SWAP4 SWAP3 PUSH2 0x1F0E JUMP JUMPDEST POP PUSH1 0x0 SWAP5 POP POP POP POP JUMP JUMPDEST POP DUP2 DUP2 LT ISZERO PUSH2 0x1ED1 JUMP JUMPDEST SWAP1 PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x1338 JUMPI PUSH1 0x5 SHL ADD SWAP1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xD3E JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x2003 DUP3 PUSH2 0x170 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP4 DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x200 DUP1 DUP4 ADD DUP4 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x18C JUMPI PUSH1 0x40 MSTORE DUP3 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x2045 JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH2 0x2050 PUSH2 0x1FF6 JUMP JUMPDEST DUP2 DUP5 ADD MSTORE ADD PUSH2 0x2039 JUMP JUMPDEST PUSH2 0x2087 SWAP2 PUSH2 0x2066 PUSH2 0x1FF6 JUMP JUMPDEST POP DUP2 MLOAD SWAP2 PUSH1 0x40 PUSH1 0x20 DUP3 ADD MLOAD SWAP2 ADD MLOAD DUP3 MLOAD SWAP2 PUSH1 0x40 PUSH1 0x20 DUP6 ADD MLOAD SWAP5 ADD MLOAD SWAP5 PUSH2 0x219B JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x2095 DUP5 PUSH2 0x170 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x2087 SWAP1 PUSH2 0x20B0 PUSH2 0x1FF6 JUMP JUMPDEST POP DUP1 MLOAD SWAP1 PUSH1 0x40 PUSH1 0x20 DUP3 ADD MLOAD SWAP2 ADD MLOAD SWAP2 PUSH2 0x22B8 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 DUP2 ISZERO PUSH2 0x218F JUMPI DUP2 PUSH1 0x0 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 DUP1 SWAP7 GT PUSH2 0x2185 JUMPI JUMPDEST POP POP PUSH1 0x40 MLOAD SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MSTORE PUSH1 0x20 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFD PUSH1 0x80 DUP4 ADD MSTORE DUP4 PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 PUSH1 0xC0 DUP2 PUSH1 0x5 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF STATICCALL ISZERO PUSH2 0x13E JUMPI POP DUP3 SWAP1 MLOAD DUP2 DUP1 DUP3 DUP1 MULMOD DUP1 SWAP8 MULMOD SWAP6 MULMOD SWAP1 MULMOD SWAP1 JUMP JUMPDEST MOD SWAP2 POP DUP4 CODESIZE PUSH2 0x20FB JUMP JUMPDEST POP POP SWAP1 POP PUSH1 0x0 SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP4 SWAP6 SWAP4 SWAP2 SWAP1 DUP2 PUSH2 0x21AD JUMPI POP POP POP SWAP3 SWAP2 SWAP1 JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP5 SWAP6 DUP7 ISZERO PUSH2 0x22AE JUMPI PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 DUP6 DUP2 SWAP7 SWAP6 DUP3 DUP1 DUP4 DUP2 SWAP10 MULMOD SWAP12 DUP2 DUP14 SWAP10 SWAP8 DUP2 DUP7 DUP2 DUP1 DUP1 DUP16 SWAP14 DUP9 DUP1 MULMOD DUP1 SWAP14 MULMOD SWAP13 DUP14 SWAP10 MULMOD SWAP13 DUP2 DUP8 DUP14 MULMOD SWAP1 MULMOD SWAP13 MULMOD SWAP1 MULMOD SWAP4 ADDMOD SWAP6 DUP2 DUP2 LT PUSH2 0x22A7 JUMPI JUMPDEST SUB SWAP6 DUP3 DUP1 DUP1 DUP10 PUSH1 0x2 MULMOD DUP1 MULMOD SWAP3 DUP2 DUP1 DUP5 DUP2 DUP8 DUP14 MULMOD SWAP4 DUP2 DUP2 LT PUSH2 0x22A0 JUMPI JUMPDEST SUB PUSH1 0x2 MULMOD SWAP5 DUP2 DUP7 DUP1 MULMOD SWAP9 MULMOD SWAP7 DUP3 DUP1 DUP10 PUSH1 0x2 MULMOD DUP4 ADDMOD SWAP1 DUP2 DUP2 LT PUSH2 0x2299 JUMPI JUMPDEST SUB SWAP12 DUP13 SWAP4 PUSH1 0x2 MULMOD MULMOD SWAP5 DUP2 DUP2 LT PUSH2 0x2292 JUMPI JUMPDEST SUB SWAP1 MULMOD SWAP8 DUP3 DUP10 LT PUSH2 0x2289 JUMPI JUMPDEST DUP6 SWAP2 DUP3 SWAP2 ADDMOD SWAP3 DUP1 MULMOD SWAP6 DUP3 DUP8 LT PUSH2 0x2280 JUMPI JUMPDEST SWAP7 SUB SWAP5 SUB MULMOD SWAP1 JUMP JUMPDEST SWAP6 DUP5 ADD SWAP6 PUSH2 0x2278 JUMP JUMPDEST SWAP8 DUP6 ADD SWAP8 PUSH2 0x2267 JUMP JUMPDEST DUP4 ADD PUSH2 0x225B JUMP JUMPDEST DUP4 ADD PUSH2 0x224A JUMP JUMPDEST DUP3 ADD PUSH2 0x222D JUMP JUMPDEST DUP4 ADD PUSH2 0x2211 JUMP JUMPDEST POP SWAP5 POP POP SWAP2 SWAP3 SWAP2 SWAP1 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP2 DUP2 DUP6 DUP1 MULMOD SWAP6 DUP3 DUP1 DUP1 DUP1 DUP1 DUP1 DUP13 DUP8 MULMOD PUSH1 0x4 MULMOD SWAP11 DUP1 MULMOD PUSH1 0x8 MULMOD SWAP3 DUP2 DUP1 DUP1 DUP1 DUP1 DUP10 DUP1 MULMOD DUP1 MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC MULMOD SWAP3 DUP1 MULMOD PUSH1 0x3 MULMOD ADDMOD DUP2 DUP10 PUSH1 0x2 MULMOD DUP3 DUP3 DUP1 MULMOD DUP2 DUP2 LT PUSH2 0x2367 JUMPI JUMPDEST SUB DUP10 DUP2 DUP1 SWAP12 LT PUSH2 0x2360 JUMPI JUMPDEST SUB SWAP1 MULMOD DUP2 DUP2 LT PUSH2 0x2359 JUMPI JUMPDEST SUB SWAP5 MULMOD PUSH1 0x2 MULMOD SWAP1 JUMP JUMPDEST DUP4 ADD PUSH2 0x2350 JUMP JUMPDEST DUP4 ADD PUSH2 0x2345 JUMP JUMPDEST DUP4 ADD PUSH2 0x233A JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551 DUP1 DUP3 GT PUSH2 0x240F JUMPI JUMPDEST PUSH1 0x40 MLOAD SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MSTORE PUSH1 0x20 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC63254F PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0xC0 DUP2 PUSH1 0x5 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF STATICCALL ISZERO PUSH2 0x26E JUMPI MLOAD SWAP1 JUMP JUMPDEST DUP1 SWAP2 MOD SWAP1 PUSH2 0x2397 JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"237:2027:20:-:0;;;;;;;368:13;;;;-1:-1:-1;;;;;368:13:20;;;;;;;;;;;;;;;;;;;;;344:37;;237:2027;;;;;;;;344:37;237:2027;;;;;;;;;;;;;;;;368:13;237:2027;;;368:13;237:2027;;;;;368:13;237:2027;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"abi_decode_uint256t_uint256t_stringt_uint256":{"entryPoint":410,"id":null,"parameterSlots":1,"returnSlots":4},"abi_encode_address_bytes":{"entryPoint":749,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_string":{"entryPoint":635,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_struct_PassKeyId":{"entryPoint":702,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":600,"id":null,"parameterSlots":3,"returnSlots":0},"finalize_allocation":{"entryPoint":345,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_1160":{"entryPoint":270,"id":null,"parameterSlots":1,"returnSlots":0},"fun_createAccount":{"entryPoint":794,"id":4196,"parameterSlots":4,"returnSlots":1},"fun_getAddress":{"entryPoint":1104,"id":4251,"parameterSlots":4,"returnSlots":1}},"generatedSources":[],"immutableReferences":{"4105":[{"length":32,"start":230},{"length":32,"start":1011},{"length":32,"start":1318}]},"linkReferences":{},"object":"608080604052600436101561001357600080fd5b600090813560e01c90816311464fbe1461009c57508063c8cb55ae1461007f5763cac8cfc21461004257600080fd5b3461007c57602061005e6100553661019a565b92919091610450565b73ffffffffffffffffffffffffffffffffffffffff60405191168152f35b80fd5b503461007c57602061005e6100933661019a565b9291909161031a565b90503461010a57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010a5760209073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b6060810190811067ffffffffffffffff82111761012a57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761012a57604052565b60807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82011261025357600435916024359167ffffffffffffffff604435818111610253578260238201121561025357806004013591821161012a576040519261022c60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8601160185610159565b82845260248383010111610253578160009260246020930183860137830101529060643590565b600080fd5b60005b83811061026b5750506000910152565b818101518382015260200161025b565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f6020936102b781518092818752878088019101610258565b0116010190565b608060406102ea936020845280516020850152602081015182850152015191606080820152019061027b565b90565b60409073ffffffffffffffffffffffffffffffffffffffff6102ea9493168152816020820152019061027b565b928092610342926040519561032e8761010e565b808752816020880152826040880152610450565b803b61043457506103b1610385926040519384917f759a68c0000000000000000000000000000000000000000000000000000000006020840152602483016102be565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101845283610159565b604051610403928382019382851067ffffffffffffffff86111761012a578291610419916105a3843973ffffffffffffffffffffffffffffffffffffffff95867f000000000000000000000000000000000000000000000000000000000000000016906102ed565b03906000f58015610428571690565b6040513d6000823e3d90fd5b73ffffffffffffffffffffffffffffffffffffffff1692915050565b92600b92916055946040938451916104678361010e565b8252602092838301528482015261057e61058a83610403936104d088519161049184880184610159565b868352838301966105a3883989519182917f759a68c00000000000000000000000000000000000000000000000000000000086840152602483016102be565b036105017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe091828101845283610159565b6105588a51918261054c8782019573ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016876102ed565b03908101835282610159565b895195869361056f868601998a9251928391610258565b84019151809386840190610258565b01038084520182610159565b5190208351938401528201523081520160ff8153209056fe604060808152610403908138038061001681610218565b93843982019181818403126102135780516001600160a01b038116808203610213576020838101516001600160401b0394919391858211610213570186601f820112156102135780519061007161006c83610253565b610218565b918083528583019886828401011161021357888661008f930161026e565b813b156101b9577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b031916841790556000927fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8480a28051158015906101b2575b61010b575b855160be90816103458239f35b855194606086019081118682101761019e578697849283926101889952602788527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c87890152660819985a5b195960ca1b8a8901525190845af4913d15610194573d9061017a61006c83610253565b91825281943d92013e610291565b508038808080806100fe565b5060609250610291565b634e487b7160e01b84526041600452602484fd5b50826100f9565b855162461bcd60e51b815260048101859052602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b600080fd5b6040519190601f01601f191682016001600160401b0381118382101761023d57604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161023d57601f01601f191660200190565b60005b8381106102815750506000910152565b8181015183820152602001610271565b919290156102f357508151156102a5575090565b3b156102ae5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156103065750805190602001fd5b6044604051809262461bcd60e51b825260206004830152610336815180928160248601526020868601910161026e565b601f01601f19168101030190fdfe60806040523615605f5773ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54166000808092368280378136915af43d82803e15605b573d90f35b3d90fd5b73ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54166000808092368280378136915af43d82803e15605b573d90f3fea164736f6c6343000813000aa164736f6c6343000813000a","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x11464FBE EQ PUSH2 0x9C JUMPI POP DUP1 PUSH4 0xC8CB55AE EQ PUSH2 0x7F JUMPI PUSH4 0xCAC8CFC2 EQ PUSH2 0x42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x7C JUMPI PUSH1 0x20 PUSH2 0x5E PUSH2 0x55 CALLDATASIZE PUSH2 0x19A JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP2 PUSH2 0x450 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x7C JUMPI PUSH1 0x20 PUSH2 0x5E PUSH2 0x93 CALLDATASIZE PUSH2 0x19A JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP2 PUSH2 0x31A JUMP JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x10A JUMPI DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x10A JUMPI PUSH1 0x20 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x12A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x12A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x80 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC DUP3 ADD SLT PUSH2 0x253 JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH1 0x24 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x44 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x253 JUMPI DUP3 PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x253 JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD SWAP2 DUP3 GT PUSH2 0x12A JUMPI PUSH1 0x40 MLOAD SWAP3 PUSH2 0x22C PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP7 ADD AND ADD DUP6 PUSH2 0x159 JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x24 DUP4 DUP4 ADD ADD GT PUSH2 0x253 JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x24 PUSH1 0x20 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 PUSH1 0x64 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x26B JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x25B JUMP JUMPDEST SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F PUSH1 0x20 SWAP4 PUSH2 0x2B7 DUP2 MLOAD DUP1 SWAP3 DUP2 DUP8 MSTORE DUP8 DUP1 DUP9 ADD SWAP2 ADD PUSH2 0x258 JUMP JUMPDEST ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 PUSH2 0x2EA SWAP4 PUSH1 0x20 DUP5 MSTORE DUP1 MLOAD PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x20 DUP2 ADD MLOAD DUP3 DUP6 ADD MSTORE ADD MLOAD SWAP2 PUSH1 0x60 DUP1 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x27B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x2EA SWAP5 SWAP4 AND DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x27B JUMP JUMPDEST SWAP3 DUP1 SWAP3 PUSH2 0x342 SWAP3 PUSH1 0x40 MLOAD SWAP6 PUSH2 0x32E DUP8 PUSH2 0x10E JUMP JUMPDEST DUP1 DUP8 MSTORE DUP2 PUSH1 0x20 DUP9 ADD MSTORE DUP3 PUSH1 0x40 DUP9 ADD MSTORE PUSH2 0x450 JUMP JUMPDEST DUP1 EXTCODESIZE PUSH2 0x434 JUMPI POP PUSH2 0x3B1 PUSH2 0x385 SWAP3 PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP2 PUSH32 0x759A68C000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD PUSH2 0x2BE JUMP JUMPDEST SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 ADD DUP5 MSTORE DUP4 PUSH2 0x159 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x403 SWAP3 DUP4 DUP3 ADD SWAP4 DUP3 DUP6 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP7 GT OR PUSH2 0x12A JUMPI DUP3 SWAP2 PUSH2 0x419 SWAP2 PUSH2 0x5A3 DUP5 CODECOPY PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 PUSH32 0x0 AND SWAP1 PUSH2 0x2ED JUMP JUMPDEST SUB SWAP1 PUSH1 0x0 CREATE2 DUP1 ISZERO PUSH2 0x428 JUMPI AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP3 PUSH1 0xB SWAP3 SWAP2 PUSH1 0x55 SWAP5 PUSH1 0x40 SWAP4 DUP5 MLOAD SWAP2 PUSH2 0x467 DUP4 PUSH2 0x10E JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 SWAP3 DUP4 DUP4 ADD MSTORE DUP5 DUP3 ADD MSTORE PUSH2 0x57E PUSH2 0x58A DUP4 PUSH2 0x403 SWAP4 PUSH2 0x4D0 DUP9 MLOAD SWAP2 PUSH2 0x491 DUP5 DUP9 ADD DUP5 PUSH2 0x159 JUMP JUMPDEST DUP7 DUP4 MSTORE DUP4 DUP4 ADD SWAP7 PUSH2 0x5A3 DUP9 CODECOPY DUP10 MLOAD SWAP2 DUP3 SWAP2 PUSH32 0x759A68C000000000000000000000000000000000000000000000000000000000 DUP7 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD PUSH2 0x2BE JUMP JUMPDEST SUB PUSH2 0x501 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 DUP3 DUP2 ADD DUP5 MSTORE DUP4 PUSH2 0x159 JUMP JUMPDEST PUSH2 0x558 DUP11 MLOAD SWAP2 DUP3 PUSH2 0x54C DUP8 DUP3 ADD SWAP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP8 PUSH2 0x2ED JUMP JUMPDEST SUB SWAP1 DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x159 JUMP JUMPDEST DUP10 MLOAD SWAP6 DUP7 SWAP4 PUSH2 0x56F DUP7 DUP7 ADD SWAP10 DUP11 SWAP3 MLOAD SWAP3 DUP4 SWAP2 PUSH2 0x258 JUMP JUMPDEST DUP5 ADD SWAP2 MLOAD DUP1 SWAP4 DUP7 DUP5 ADD SWAP1 PUSH2 0x258 JUMP JUMPDEST ADD SUB DUP1 DUP5 MSTORE ADD DUP3 PUSH2 0x159 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 DUP4 MLOAD SWAP4 DUP5 ADD MSTORE DUP3 ADD MSTORE ADDRESS DUP2 MSTORE ADD PUSH1 0xFF DUP2 MSTORE8 KECCAK256 SWAP1 JUMP INVALID PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH2 0x403 SWAP1 DUP2 CODESIZE SUB DUP1 PUSH2 0x16 DUP2 PUSH2 0x218 JUMP JUMPDEST SWAP4 DUP5 CODECOPY DUP3 ADD SWAP2 DUP2 DUP2 DUP5 SUB SLT PUSH2 0x213 JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 DUP3 SUB PUSH2 0x213 JUMPI PUSH1 0x20 DUP4 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP5 SWAP2 SWAP4 SWAP2 DUP6 DUP3 GT PUSH2 0x213 JUMPI ADD DUP7 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x213 JUMPI DUP1 MLOAD SWAP1 PUSH2 0x71 PUSH2 0x6C DUP4 PUSH2 0x253 JUMP JUMPDEST PUSH2 0x218 JUMP JUMPDEST SWAP2 DUP1 DUP4 MSTORE DUP6 DUP4 ADD SWAP9 DUP7 DUP3 DUP5 ADD ADD GT PUSH2 0x213 JUMPI DUP9 DUP7 PUSH2 0x8F SWAP4 ADD PUSH2 0x26E JUMP JUMPDEST DUP2 EXTCODESIZE ISZERO PUSH2 0x1B9 JUMPI PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP5 OR SWAP1 SSTORE PUSH1 0x0 SWAP3 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B DUP5 DUP1 LOG2 DUP1 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1B2 JUMPI JUMPDEST PUSH2 0x10B JUMPI JUMPDEST DUP6 MLOAD PUSH1 0xBE SWAP1 DUP2 PUSH2 0x345 DUP3 CODECOPY RETURN JUMPDEST DUP6 MLOAD SWAP5 PUSH1 0x60 DUP7 ADD SWAP1 DUP2 GT DUP7 DUP3 LT OR PUSH2 0x19E JUMPI DUP7 SWAP8 DUP5 SWAP3 DUP4 SWAP3 PUSH2 0x188 SWAP10 MSTORE PUSH1 0x27 DUP9 MSTORE PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C DUP8 DUP10 ADD MSTORE PUSH7 0x819985A5B1959 PUSH1 0xCA SHL DUP11 DUP10 ADD MSTORE MLOAD SWAP1 DUP5 GAS DELEGATECALL SWAP2 RETURNDATASIZE ISZERO PUSH2 0x194 JUMPI RETURNDATASIZE SWAP1 PUSH2 0x17A PUSH2 0x6C DUP4 PUSH2 0x253 JUMP JUMPDEST SWAP2 DUP3 MSTORE DUP2 SWAP5 RETURNDATASIZE SWAP3 ADD RETURNDATACOPY PUSH2 0x291 JUMP JUMPDEST POP DUP1 CODESIZE DUP1 DUP1 DUP1 DUP1 PUSH2 0xFE JUMP JUMPDEST POP PUSH1 0x60 SWAP3 POP PUSH2 0x291 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST POP DUP3 PUSH2 0xF9 JUMP JUMPDEST DUP6 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH2 0x23D JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x23D JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x281 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x271 JUMP JUMPDEST SWAP2 SWAP3 SWAP1 ISZERO PUSH2 0x2F3 JUMPI POP DUP2 MLOAD ISZERO PUSH2 0x2A5 JUMPI POP SWAP1 JUMP JUMPDEST EXTCODESIZE ISZERO PUSH2 0x2AE JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x306 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x44 PUSH1 0x40 MLOAD DUP1 SWAP3 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x20 PUSH1 0x4 DUP4 ADD MSTORE PUSH2 0x336 DUP2 MLOAD DUP1 SWAP3 DUP2 PUSH1 0x24 DUP7 ADD MSTORE PUSH1 0x20 DUP7 DUP7 ADD SWAP2 ADD PUSH2 0x26E JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP2 ADD SUB ADD SWAP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE ISZERO PUSH1 0x5F JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD AND PUSH1 0x0 DUP1 DUP1 SWAP3 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE DUP3 DUP1 RETURNDATACOPY ISZERO PUSH1 0x5B JUMPI RETURNDATASIZE SWAP1 RETURN JUMPDEST RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD AND PUSH1 0x0 DUP1 DUP1 SWAP3 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE DUP3 DUP1 RETURNDATACOPY ISZERO PUSH1 0x5B JUMPI RETURNDATASIZE SWAP1 RETURN INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"237:2027:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;267:46;237:2027;267:46;237:2027;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;237:2027:20;;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;237:2027:20;;;;;;;;;;-1:-1:-1;;237:2027:20;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;768:682::-;;;;1021:41;768:682;237:2027;;;;;;:::i;:::-;;;;962:34;;;;237:2027;962:34;237:2027;962:34;;237:2027;1021:41;:::i;:::-;1088:16;;1114:72;;237:2027;1358:43;;237:2027;;;1358:43;;;;962:34;1358:43;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;237:2027;;1247:172;;;;;;;;;;;;;;;;;;;;;;237:2027;1314:21;;;237:2027;1247:172;;:::i;:::-;;;-1:-1:-1;1247:172:20;;;;;237:2027;768:682;:::o;1247:172::-;237:2027;;;-1:-1:-1;237:2027:20;;;;;1114:72;237:2027;;;1146:29;-1:-1:-1;;1146:29:20:o;1575:687::-;;2345:1598:12;1575:687:20;;2345:1598:12;1575:687:20;237:2027;;;;;;;;:::i;:::-;;;1767:34;;;;;237:2027;1767:34;;;237:2027;;1933:290;1975:31;;237:2027;2132:43;237:2027;;1975:31;237:2027;1975:31;;;237:2027;;:::i;:::-;1975:31;;;;;;;;;;237:2027;;2132:43;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;2032:169;237:2027;;2032:169;;;;;;2080:21;237:2027;2080:21;237:2027;2032:169;;:::i;:::-;;;;;;;;;:::i;:::-;237:2027;;1933:290;;;237:2027;1933:290;;;237:2027;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;1933:290;;;;;;;:::i;:::-;237:2027;1902:339;;2345:1598:12;;;;;;;;;1921:4;2345:1598;;;;;;;1575:687:20;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"496400","executionCost":"infinite","totalCost":"infinite"},"external":{"accountImplementation()":"infinite","createAccount(uint256,uint256,string,uint256)":"infinite","getAddress(uint256,uint256,string,uint256)":"infinite"}},"methodIdentifiers":{"accountImplementation()":"11464fbe","createAccount(uint256,uint256,string,uint256)":"c8cb55ae","getAddress(uint256,uint256,string,uint256)":"cac8cfc2"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"accountImplementation\",\"outputs\":[{\"internalType\":\"contract Account\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pubKeyX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubKeyY\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"keyId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"contract Account\",\"name\":\"ret\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pubKeyX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubKeyY\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"keyId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createAccount(uint256,uint256,string,uint256)\":{\"notice\":\"create an account, and return its address. returns the address even if the account is already deployed. Note that during UserOperation execution, this method is called only if the account is not deployed. This method returns an existing account address so that entryPoint.getSenderAddress() would work even after account creation\"},\"getAddress(uint256,uint256,string,uint256)\":{\"notice\":\"calculate the counterfactual address of this account as it would be returned by createAccount()\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/aa/AccountFactory.sol\":\"AccountFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x3d6069be9b4c01fb81840fb9c2c4dc58dd6a6a4aafaa2c6837de8699574d84c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e00f269073ffc4350e56b7e8153c9092d5f70bfba423299990514183101ef89\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/aa/Account.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport \\\"./utils/UserOp.sol\\\";\\nimport \\\"./utils/Secp256r1.sol\\\";\\nimport \\\"./utils/Base64.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\ncontract Account is Initializable {\\n    using UserOpLib for UserOp;\\n    using ECDSA for bytes32;\\n\\n    address addressOwner;\\n    PassKeyId passKeyOwner;\\n\\n    bool isPassKeyOwnerEnabled;\\n\\n    uint256 nonce;\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    // getter functions\\n    function getAddressOwner() public view returns (address) {\\n        return addressOwner;\\n    }\\n\\n    function getPassKeyOwner() public view returns (PassKeyId memory) {\\n        return passKeyOwner;\\n    }\\n\\n    function passKeyOwnerEnabled() public view returns (bool) {\\n        return isPassKeyOwnerEnabled;\\n    }\\n\\n    function getNonce() public view returns (uint256) {\\n        return nonce;\\n    }\\n\\n    function changeOwnershipToAddress(bytes memory argument) private {\\n        require(\\n            isPassKeyOwnerEnabled == true,\\n            \\\"Account: Already address owner enabled\\\"\\n        );\\n        // address newOwner = abi.decode(argument, (address));\\n        address newOwner;\\n        assembly {\\n            newOwner := mload(add(argument, 20))\\n        }\\n        _changePassKeyOwner(PassKeyId(0, 0, \\\"\\\"));\\n        _changeAddressOwner(newOwner);\\n        isPassKeyOwnerEnabled = false;\\n    }\\n\\n    function changeOwnershipToPassKeyAddress(bytes memory argument) private {\\n        require(\\n            isPassKeyOwnerEnabled == false,\\n            \\\"Account: Already passkey owner enabled\\\"\\n        );\\n        (uint256 pubKeyX, uint256 pubKeyY, string memory keyId) = abi.decode(\\n            argument,\\n            (uint256, uint256, string)\\n        );\\n        PassKeyId memory newOwner = PassKeyId(pubKeyX, pubKeyY, keyId);\\n        _changeAddressOwner(address(0));\\n        _changePassKeyOwner(newOwner);\\n        isPassKeyOwnerEnabled = true;\\n    }\\n\\n    // internal functions to change owners\\n    function _changePassKeyOwner(PassKeyId memory newOwner) private {\\n        passKeyOwner = newOwner;\\n    }\\n\\n    function _changeAddressOwner(address newOwner) private {\\n        addressOwner = newOwner;\\n    }\\n\\n    function initialize(PassKeyId memory anOwner) public virtual initializer {\\n        isPassKeyOwnerEnabled = true;\\n        _initialize(anOwner);\\n    }\\n\\n    function _initialize(PassKeyId memory anOwner) internal virtual {\\n        passKeyOwner = anOwner;\\n    }\\n\\n    // Main entry point for external callers\\n\\n    function entrypoint(UserOp calldata userop) public {\\n        // validate userop signature\\n        uint256 sigVerification = _validateUserOp(userop);\\n        require(sigVerification == 0, \\\"Account: Signature verification failed\\\");\\n        // validate nonce\\n        uint256 nonceVerification = _validateNonce(userop);\\n        require(nonceVerification == 0, \\\"Account: Nonce verification failed\\\");\\n        // execute\\n        if (userop.functionType == 0) {\\n            execute(userop.argument);\\n        }\\n        if (userop.functionType == 1) {\\n            executeBatch(userop.argument);\\n        }\\n        if (userop.functionType == 2) {\\n            changeOwnershipToAddress(userop.argument);\\n        }\\n        if (userop.functionType == 3) {\\n            changeOwnershipToPassKeyAddress(userop.argument);\\n        }\\n        nonce = nonce + 1;\\n        return;\\n    }\\n\\n    /**\\n     * execute a transaction (called directly from owner, or by entryPoint)\\n     */\\n    function execute(bytes memory argument) private {\\n        (address dest, uint256 value, bytes memory func) = abi.decode(\\n            argument,\\n            (address, uint256, bytes)\\n        );\\n        _call(dest, value, func);\\n    }\\n\\n    /**\\n     * execute a sequence of transactions\\n     * @dev to reduce gas consumption for trivial case (no value), use a zero-length array to mean zero value\\n     */\\n    function executeBatch(bytes memory argument) private {\\n        (\\n            address[] memory dest,\\n            uint256[] memory value,\\n            bytes[] memory func\\n        ) = abi.decode(argument, (address[], uint256[], bytes[]));\\n        require(\\n            dest.length == func.length &&\\n                (value.length == 0 || value.length == func.length),\\n            \\\"wrong array lengths\\\"\\n        );\\n        if (value.length == 0) {\\n            for (uint256 i = 0; i < dest.length; i++) {\\n                _call(dest[i], 0, func[i]);\\n            }\\n        } else {\\n            for (uint256 i = 0; i < dest.length; i++) {\\n                _call(dest[i], value[i], func[i]);\\n            }\\n        }\\n    }\\n\\n    function _call(address target, uint256 value, bytes memory data) internal {\\n        (bool success, bytes memory result) = target.call{value: value}(data);\\n        if (!success) {\\n            assembly {\\n                revert(add(result, 32), mload(result))\\n            }\\n        }\\n    }\\n\\n    // internal function to validate userop signature\\n    function _validateUserOp(\\n        UserOp calldata userop\\n    ) internal view returns (uint256) {\\n        bytes32 userOpHash = getUserOpHash(userop);\\n        if (isPassKeyOwnerEnabled) {\\n            bool isSigValid = validatePassKeySig(\\n                userop.signature,\\n                userOpHash,\\n                passKeyOwner\\n            );\\n            if (!isSigValid) return 1;\\n            return 0;\\n        } else {\\n            bytes32 hash = userOpHash.toEthSignedMessageHash();\\n            if (addressOwner != hash.recover(userop.signature)) return 1;\\n            return 0;\\n        }\\n    }\\n\\n    // internal function to validate nonce\\n    function _validateNonce(\\n        UserOp calldata userop\\n    ) internal view returns (uint256) {\\n        if (userop.nonce == nonce) return 0;\\n        return 1;\\n    }\\n\\n    function validatePassKeySig(\\n        bytes memory signature,\\n        bytes32 execHash,\\n        PassKeyId memory passkey\\n    ) internal view returns (bool) {\\n        (\\n            bytes32 keyHash,\\n            uint256 sigx,\\n            uint256 sigy,\\n            bytes memory authenticatorData,\\n            string memory clientDataJSONPre,\\n            string memory clientDataJSONPost\\n        ) = abi.decode(\\n                signature,\\n                (bytes32, uint256, uint256, bytes, string, string)\\n            );\\n\\n        string memory execHashBase64 = Base64.encode(bytes.concat(execHash));\\n        string memory clientDataJSON = string.concat(\\n            clientDataJSONPre,\\n            execHashBase64,\\n            clientDataJSONPost\\n        );\\n        bytes32 clientHash = sha256(bytes(clientDataJSON));\\n        bytes32 sigHash = sha256(bytes.concat(authenticatorData, clientHash));\\n\\n        require(passkey.pubKeyY != 0 && passkey.pubKeyY != 0, \\\"Key not found\\\");\\n        bool isSigValid = Secp256r1.Verify(\\n            passkey,\\n            sigx,\\n            sigy,\\n            uint256(sigHash)\\n        );\\n        return isSigValid;\\n    }\\n\\n    // gets the userOp hash\\n    function getUserOpHash(\\n        UserOp calldata userop\\n    ) public view returns (bytes32) {\\n        return\\n            keccak256(abi.encode(userop.hash(), address(this), block.chainid));\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xffc88e51e12629d1bfa349e34f51cecb413de441b1d21f996e78ca05ce9ddab3\",\"license\":\"GPL-3.0\"},\"contracts/aa/AccountFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\n\\nimport \\\"./Account.sol\\\";\\nimport \\\"./utils/Secp256r1.sol\\\";\\n\\ncontract AccountFactory {\\n    Account public immutable accountImplementation;\\n\\n    constructor() {\\n        accountImplementation = new Account();\\n    }\\n\\n    /**\\n     * create an account, and return its address.\\n     * returns the address even if the account is already deployed.\\n     * Note that during UserOperation execution, this method is called only if the account is not deployed.\\n     * This method returns an existing account address so that entryPoint.getSenderAddress() would work even after account creation\\n     */\\n    function createAccount(\\n        uint256 pubKeyX,\\n        uint256 pubKeyY,\\n        string memory keyId,\\n        uint256 salt\\n    ) public returns (Account ret) {\\n        PassKeyId memory owner = PassKeyId(pubKeyX, pubKeyY, keyId);\\n        address addr = getAddress(pubKeyX, pubKeyY, keyId, salt);\\n        uint codeSize = addr.code.length;\\n        if (codeSize > 0) {\\n            return Account(payable(addr));\\n        }\\n        ret = Account(\\n            payable(\\n                new ERC1967Proxy{salt: bytes32(salt)}(\\n                    address(accountImplementation),\\n                    abi.encodeCall(Account.initialize, (owner))\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * calculate the counterfactual address of this account as it would be returned by createAccount()\\n     */\\n    function getAddress(\\n        uint256 pubKeyX,\\n        uint256 pubKeyY,\\n        string memory keyId,\\n        uint256 salt\\n    ) public view returns (address) {\\n        PassKeyId memory owner = PassKeyId(pubKeyX, pubKeyY, keyId);\\n\\n        return\\n            Create2.computeAddress(\\n                bytes32(salt),\\n                keccak256(\\n                    abi.encodePacked(\\n                        type(ERC1967Proxy).creationCode,\\n                        abi.encode(\\n                            address(accountImplementation),\\n                            abi.encodeCall(Account.initialize, (owner))\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xef6d730c63e5c8d749b43ae52b751dabfe7fb67bb132aeeaa97a48fb449a2d22\",\"license\":\"GPL-3.0\"},\"contracts/aa/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n// modified for base64url encoding, does not pad with '='\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *  modified for base64url https://datatracker.ietf.org/doc/html/rfc4648#section-5\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE =\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        uint256 newlength = (data.length * 8) / 6;\\n        if (data.length % 6 > 0) {\\n            newlength++;\\n        }\\n        string memory result = new string(newlength);\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n            // let targetLength := add(resultPtr, newlength)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(\\n                    resultPtr,\\n                    mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                )\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                // if lt(resultPtr, targetLength) {\\n                mstore8(\\n                    resultPtr,\\n                    mload(add(tablePtr, and(shr(12, input), 0x3F)))\\n                )\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                // if lt(resultPtr, targetLength) {\\n                mstore8(\\n                    resultPtr,\\n                    mload(add(tablePtr, and(shr(6, input), 0x3F)))\\n                )\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                // if lt(resultPtr, targetLength) {\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n                // }\\n                // }\\n                // }\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xdae76c808cc5e424ff5e20688a02f913d6a5f834902e7329f0265fabf153a8fb\",\"license\":\"MIT\"},\"contracts/aa/utils/Secp256r1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.19;\\n//\\n// Heavily inspired from\\n// https://github.com/maxrobot/elliptic-solidity/blob/master/contracts/Secp256r1.sol\\n// https://github.com/tdrerup/elliptic-curve-solidity/blob/master/contracts/curves/EllipticCurve.sol\\n// modified to use precompile 0x05 modexp\\n// and modified jacobian double\\n// optimisations to avoid to an from from affine and jacobian coordinates\\n//\\nstruct PassKeyId {\\n    uint256 pubKeyX;\\n    uint256 pubKeyY;\\n    string keyId;\\n}\\n\\nstruct JPoint {\\n    uint256 x;\\n    uint256 y;\\n    uint256 z;\\n}\\n\\nlibrary Secp256r1 {\\n    uint256 constant gx =\\n        0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296;\\n    uint256 constant gy =\\n        0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5;\\n    uint256 public constant pp =\\n        0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    uint256 public constant nn =\\n        0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551;\\n    uint256 constant a =\\n        0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC;\\n    uint256 constant b =\\n        0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B;\\n    uint256 constant MOST_SIGNIFICANT =\\n        0xc000000000000000000000000000000000000000000000000000000000000000;\\n\\n    /*\\n     * Verify\\n     * @description - verifies that a public key has signed a given message\\n     * @param X - public key coordinate X\\n     * @param Y - public key coordinate Y\\n     * @param R - signature half R\\n     * @param S - signature half S\\n     * @param input - hashed message\\n     */\\n    function Verify(\\n        PassKeyId memory passKey,\\n        uint r,\\n        uint s,\\n        uint e\\n    ) internal view returns (bool) {\\n        if (r == 0 || s == 0 || r >= nn || s >= nn) {\\n            /* testing null signature, otherwise (0,0) is valid for any message*/\\n            return false;\\n        }\\n\\n        JPoint[16] memory points = _preComputeJacobianPoints(passKey);\\n        return VerifyWithPrecompute(points, r, s, e);\\n    }\\n\\n    function VerifyWithPrecompute(\\n        JPoint[16] memory points,\\n        uint r,\\n        uint s,\\n        uint e\\n    ) internal view returns (bool) {\\n        if (r >= nn || s >= nn) {\\n            return false;\\n        }\\n\\n        uint w = _primemod(s, nn);\\n\\n        uint u1 = mulmod(e, w, nn);\\n        uint u2 = mulmod(r, w, nn);\\n\\n        uint x;\\n        uint y;\\n\\n        (x, y) = ShamirMultJacobian(points, u1, u2);\\n        return (x == r);\\n    }\\n\\n    /*\\n     * Strauss Shamir trick for EC multiplication\\n     * https://stackoverflow.com/questions/50993471/ec-scalar-multiplication-with-strauss-shamir-method\\n     * we optimise on this a bit to do with 2 bits at a time rather than a single bit\\n     * the individual points for a single pass are precomputed\\n     * overall this reduces the number of additions while keeping the same number of doublings\\n     */\\n    function ShamirMultJacobian(\\n        JPoint[16] memory points,\\n        uint u1,\\n        uint u2\\n    ) internal view returns (uint, uint) {\\n        uint x = 0;\\n        uint y = 0;\\n        uint z = 0;\\n        uint bits = 128;\\n        uint index = 0;\\n\\n        while (bits > 0) {\\n            if (z > 0) {\\n                (x, y, z) = _modifiedJacobianDouble(x, y, z);\\n                (x, y, z) = _modifiedJacobianDouble(x, y, z);\\n            }\\n            index =\\n                ((u1 & MOST_SIGNIFICANT) >> 252) |\\n                ((u2 & MOST_SIGNIFICANT) >> 254);\\n            if (index > 0) {\\n                (x, y, z) = _jAdd(\\n                    x,\\n                    y,\\n                    z,\\n                    points[index].x,\\n                    points[index].y,\\n                    points[index].z\\n                );\\n            }\\n            u1 <<= 2;\\n            u2 <<= 2;\\n            bits--;\\n        }\\n        (x, y) = _affineFromJacobian(x, y, z);\\n        return (x, y);\\n    }\\n\\n    function _preComputeJacobianPoints(\\n        PassKeyId memory passKey\\n    ) internal pure returns (JPoint[16] memory points) {\\n        // JPoint[] memory u1Points = new JPoint[](4);\\n        // u1Points[0] = JPoint(0, 0, 0);\\n        // u1Points[1] = JPoint(gx, gy, 1); // u1\\n        // u1Points[2] = _jPointDouble(u1Points[1]);\\n        // u1Points[3] = _jPointAdd(u1Points[1], u1Points[2]);\\n        // avoiding this intermediate step by using it in a single array below\\n        // these are pre computed points for u1\\n\\n        // JPoint[16] memory points;\\n        points[0] = JPoint(0, 0, 0);\\n        points[1] = JPoint(passKey.pubKeyX, passKey.pubKeyY, 1); // u2\\n        points[2] = _jPointDouble(points[1]);\\n        points[3] = _jPointAdd(points[1], points[2]);\\n\\n        points[4] = JPoint(gx, gy, 1); // u1Points[1]\\n        points[5] = _jPointAdd(points[4], points[1]);\\n        points[6] = _jPointAdd(points[4], points[2]);\\n        points[7] = _jPointAdd(points[4], points[3]);\\n\\n        points[8] = _jPointDouble(points[4]); // u1Points[2]\\n        points[9] = _jPointAdd(points[8], points[1]);\\n        points[10] = _jPointAdd(points[8], points[2]);\\n        points[11] = _jPointAdd(points[8], points[3]);\\n\\n        points[12] = _jPointAdd(points[4], points[8]); // u1Points[3]\\n        points[13] = _jPointAdd(points[12], points[1]);\\n        points[14] = _jPointAdd(points[12], points[2]);\\n        points[15] = _jPointAdd(points[12], points[3]);\\n    }\\n\\n    function _jPointAdd(\\n        JPoint memory p1,\\n        JPoint memory p2\\n    ) internal pure returns (JPoint memory) {\\n        uint x;\\n        uint y;\\n        uint z;\\n        (x, y, z) = _jAdd(p1.x, p1.y, p1.z, p2.x, p2.y, p2.z);\\n        return JPoint(x, y, z);\\n    }\\n\\n    function _jPointDouble(\\n        JPoint memory p\\n    ) internal pure returns (JPoint memory) {\\n        uint x;\\n        uint y;\\n        uint z;\\n        (x, y, z) = _modifiedJacobianDouble(p.x, p.y, p.z);\\n        return JPoint(x, y, z);\\n    }\\n\\n    /* _affineFromJacobian\\n     * @desription returns affine coordinates from a jacobian input follows\\n     * golang elliptic/crypto library\\n     */\\n    function _affineFromJacobian(\\n        uint x,\\n        uint y,\\n        uint z\\n    ) internal view returns (uint ax, uint ay) {\\n        if (z == 0) {\\n            return (0, 0);\\n        }\\n\\n        uint zinv = _primemod(z, pp);\\n        uint zinvsq = mulmod(zinv, zinv, pp);\\n\\n        ax = mulmod(x, zinvsq, pp);\\n        ay = mulmod(y, mulmod(zinvsq, zinv, pp), pp);\\n    }\\n\\n    /*\\n     * _jAdd\\n     * @description performs double Jacobian as defined below:\\n     * https://hyperelliptic.org/EFD/g1p/auto-code/shortw/jacobian-3/doubling/mdbl-2007-bl.op3\\n     */\\n    function _jAdd(\\n        uint p1,\\n        uint p2,\\n        uint p3,\\n        uint q1,\\n        uint q2,\\n        uint q3\\n    ) internal pure returns (uint r1, uint r2, uint r3) {\\n        if (p3 == 0) {\\n            r1 = q1;\\n            r2 = q2;\\n            r3 = q3;\\n\\n            return (r1, r2, r3);\\n        } else if (q3 == 0) {\\n            r1 = p1;\\n            r2 = p2;\\n            r3 = p3;\\n\\n            return (r1, r2, r3);\\n        }\\n\\n        assembly {\\n            let\\n                pd\\n            := 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF\\n            let z1z1 := mulmod(p3, p3, pd) // Z1Z1 = Z1^2\\n            let z2z2 := mulmod(q3, q3, pd) // Z2Z2 = Z2^2\\n\\n            let u1 := mulmod(p1, z2z2, pd) // U1 = X1*Z2Z2\\n            let u2 := mulmod(q1, z1z1, pd) // U2 = X2*Z1Z1\\n\\n            let s1 := mulmod(p2, mulmod(z2z2, q3, pd), pd) // S1 = Y1*Z2*Z2Z2\\n            let s2 := mulmod(q2, mulmod(z1z1, p3, pd), pd) // S2 = Y2*Z1*Z1Z1\\n\\n            let p3q3 := addmod(p3, q3, pd)\\n\\n            if lt(u2, u1) {\\n                u2 := add(pd, u2) // u2 = u2+pd\\n            }\\n            let h := sub(u2, u1) // H = U2-U1\\n\\n            let i := mulmod(0x02, h, pd)\\n            i := mulmod(i, i, pd) // I = (2*H)^2\\n\\n            let j := mulmod(h, i, pd) // J = H*I\\n            if lt(s2, s1) {\\n                s2 := add(pd, s2) // u2 = u2+pd\\n            }\\n            let rr := mulmod(0x02, sub(s2, s1), pd) // r = 2*(S2-S1)\\n            r1 := mulmod(rr, rr, pd) // X3 = R^2\\n\\n            let v := mulmod(u1, i, pd) // V = U1*I\\n            let j2v := addmod(j, mulmod(0x02, v, pd), pd)\\n            if lt(r1, j2v) {\\n                r1 := add(pd, r1) // X3 = X3+pd\\n            }\\n            r1 := sub(r1, j2v)\\n\\n            // Y3 = r*(V-X3)-2*S1*J\\n            let s12j := mulmod(mulmod(0x02, s1, pd), j, pd)\\n\\n            if lt(v, r1) {\\n                v := add(pd, v)\\n            }\\n            r2 := mulmod(rr, sub(v, r1), pd)\\n\\n            if lt(r2, s12j) {\\n                r2 := add(pd, r2)\\n            }\\n            r2 := sub(r2, s12j)\\n\\n            // Z3 = ((Z1+Z2)^2-Z1Z1-Z2Z2)*H\\n            z1z1 := addmod(z1z1, z2z2, pd)\\n            j2v := mulmod(p3q3, p3q3, pd)\\n            if lt(j2v, z1z1) {\\n                j2v := add(pd, j2v)\\n            }\\n            r3 := mulmod(sub(j2v, z1z1), h, pd)\\n        }\\n        return (r1, r2, r3);\\n    }\\n\\n    // Point doubling on the modified jacobian coordinates\\n    // http://point-at-infinity.org/ecc/Prime_Curve_Modified_Jacobian_Coordinates.html\\n    function _modifiedJacobianDouble(\\n        uint x,\\n        uint y,\\n        uint z\\n    ) internal pure returns (uint x3, uint y3, uint z3) {\\n        assembly {\\n            let\\n                pd\\n            := 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF\\n            let z2 := mulmod(z, z, pd)\\n            let az4 := mulmod(\\n                0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC,\\n                mulmod(z2, z2, pd),\\n                pd\\n            )\\n            let y2 := mulmod(y, y, pd)\\n            let s := mulmod(0x04, mulmod(x, y2, pd), pd)\\n            let u := mulmod(0x08, mulmod(y2, y2, pd), pd)\\n            let m := addmod(mulmod(0x03, mulmod(x, x, pd), pd), az4, pd)\\n            let twos := mulmod(0x02, s, pd)\\n            let m2 := mulmod(m, m, pd)\\n            if lt(m2, twos) {\\n                m2 := add(pd, m2)\\n            }\\n            x3 := sub(m2, twos)\\n            if lt(s, x3) {\\n                s := add(pd, s)\\n            }\\n            y3 := mulmod(m, sub(s, x3), pd)\\n            if lt(y3, u) {\\n                y3 := add(pd, y3)\\n            }\\n            y3 := sub(y3, u)\\n            z3 := mulmod(0x02, mulmod(y, z, pd), pd)\\n        }\\n    }\\n\\n    // Fermats little theorem https://en.wikipedia.org/wiki/Fermat%27s_little_theorem\\n    // a^(p-1) = 1 mod p\\n    // a^(-1) \\u2245 a^(p-2) (mod p)\\n    // we then use the precompile bigModExp to compute a^(-1)\\n    function _primemod(uint value, uint p) internal view returns (uint ret) {\\n        ret = modexp(value, p - 2, p);\\n        return ret;\\n    }\\n\\n    // Wrapper for built-in BigNumber_modexp (contract 0x5) as described here. https://github.com/ethereum/EIPs/pull/198\\n    function modexp(\\n        uint _base,\\n        uint _exp,\\n        uint _mod\\n    ) internal view returns (uint ret) {\\n        // bigModExp(_base, _exp, _mod);\\n        assembly {\\n            if gt(_base, _mod) {\\n                _base := mod(_base, _mod)\\n            }\\n            // Free memory pointer is always stored at 0x40\\n            let freemem := mload(0x40)\\n\\n            mstore(freemem, 0x20)\\n            mstore(add(freemem, 0x20), 0x20)\\n            mstore(add(freemem, 0x40), 0x20)\\n\\n            mstore(add(freemem, 0x60), _base)\\n            mstore(add(freemem, 0x80), _exp)\\n            mstore(add(freemem, 0xa0), _mod)\\n\\n            let success := staticcall(not(0), 0x5, freemem, 0xc0, freemem, 0x20)\\n            switch success\\n            case 0 {\\n                revert(0x0, 0x0)\\n            }\\n            default {\\n                ret := mload(freemem)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd43f80b0a6bc9d21430e1f2a485960a59266972545d9f15c72fc21daebebaf42\",\"license\":\"GPL-3.0\"},\"contracts/aa/utils/UserOp.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.19;\\n// call type\\n// 00 -> single\\n// 01 -> batch\\n\\nstruct UserOp {\\n    uint256 functionType;\\n    bytes argument;\\n    uint256 nonce;\\n    bytes signature;\\n}\\n\\nlibrary UserOpLib {\\n    /**\\n     * Pack the user operation data into bytes for hashing.\\n     * @param userop - The user operation data.\\n     */\\n    function pack(\\n        UserOp calldata userop\\n    ) internal pure returns (bytes memory ret) {\\n        uint256 functionType = userop.functionType;\\n        bytes32 hashArguments = calldataKeccak(userop.argument);\\n        uint256 nonce = userop.nonce;\\n\\n        return abi.encode(functionType, hashArguments, nonce);\\n    }\\n\\n    /**\\n     * Hash the user operation data.\\n     * @param userop - The user operation data.\\n     */\\n    function hash(UserOp calldata userop) internal pure returns (bytes32) {\\n        return keccak256(pack(userop));\\n    }\\n\\n    /**\\n     * keccak function over calldata.\\n     * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n     */\\n    function calldataKeccak(\\n        bytes calldata data\\n    ) public pure returns (bytes32 ret) {\\n        assembly {\\n            let mem := mload(0x40)\\n            let len := data.length\\n            calldatacopy(mem, data.offset, len)\\n            ret := keccak256(mem, len)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe9d67905db0bceb2036a23b41879fc6bc6fb6476262b52e2b80c5aa67621038b\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"createAccount(uint256,uint256,string,uint256)":{"notice":"create an account, and return its address. returns the address even if the account is already deployed. Note that during UserOperation execution, this method is called only if the account is not deployed. This method returns an existing account address so that entryPoint.getSenderAddress() would work even after account creation"},"getAddress(uint256,uint256,string,uint256)":{"notice":"calculate the counterfactual address of this account as it would be returned by createAccount()"}},"version":1}}},"contracts/aa/BUSD.sol":{"BUSD":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"copy_literal_to_memory_54c512ac779647672b8d02e2fe2dc10f79bbf19f719d887221696215fd24e9f1":{"entryPoint":925,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[],"linkReferences":{},"object":"6080604052346200039857620000146200039d565b6200001e6200039d565b81519091906001600160401b039081811162000298576003918254926001928385811c95169586156200038d575b6020968787101462000377578190601f9687811162000321575b508790878311600114620002ba57600092620002ae575b505060001982841b1c191690841b1781555b8551918211620002985760049586548481811c911680156200028d575b8782101462000278578581116200022d575b508590858411600114620001c257938394918492600095620001b6575b50501b92600019911b1c19161783555b33156200017557506002546a52b7d2dcc80cd2e4000000928382018092116200016057506000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91600255338352828152604083208481540190556040519384523393a3604051610cda9081620003cf8239f35b601190634e487b7160e01b6000525260246000fd5b606492916040519262461bcd60e51b845283015260248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b015193503880620000db565b9190601f198416928860005284886000209460005b8a89838310620002155750505010620001fa575b50505050811b018355620000eb565b01519060f884600019921b161c1916905538808080620001eb565b868601518955909701969485019488935001620001d7565b87600052866000208680860160051c8201928987106200026e575b0160051c019085905b82811062000261575050620000be565b6000815501859062000251565b9250819262000248565b602288634e487b7160e01b6000525260246000fd5b90607f1690620000ac565b634e487b7160e01b600052604160045260246000fd5b0151905038806200007d565b90869350601f1983169185600052896000209260005b8b8282106200030a5750508411620002f1575b505050811b0181556200008f565b015160001983861b60f8161c19169055388080620002e3565b8385015186558a97909501949384019301620002d0565b90915083600052876000208780850160051c8201928a86106200036d575b918891869594930160051c01915b8281106200035d57505062000066565b600081558594508891016200034d565b925081926200033f565b634e487b7160e01b600052602260045260246000fd5b94607f16946200004c565b600080fd5b60408051919082016001600160401b0381118382101762000298576040526004825263109554d160e21b602083015256fe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde031461075657508163095ea7b31461070e57816318160ddd146106d157816323b872dd146105a3578163313ce5671461056957816339509351146104bf57816370a082311461045e57816395d89b4114610268578163a457c2d71461016257508063a9059cbb146101145763dd62ed3e1461009e57600080fd5b3461011057807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011057806020926100d86108fe565b6100e0610926565b73ffffffffffffffffffffffffffffffffffffffff91821683526001865283832091168252845220549051908152f35b5080fd5b503461011057807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101105760209061015b6101516108fe565b6024359033610949565b5160018152f35b9050823461026557827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102655761019b6108fe565b918360243592338152600160205281812073ffffffffffffffffffffffffffffffffffffffff861682526020522054908282106101e25760208561015b8585038733610b58565b60849060208651917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152fd5b80fd5b83833461011057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011057805190828454600181811c90808316928315610454575b60209384841081146104285783885287959493929181156103cd5750600114610351575b50505003601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019267ffffffffffffffff8411838510176103255750829182610321925282610898565b0390f35b806041867f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b8888529193925086917f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8284106103b757505050907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe092601f928201019181936102d3565b805488850187015287945092850192810161037c565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016848701525050151560051b830101905081601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06102d3565b60248960228c7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b91607f16916102af565b5050346101105760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610110578060209273ffffffffffffffffffffffffffffffffffffffff6104b06108fe565b16815280845220549051908152f35b82843461026557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610265576104f76108fe565b338252600160205282822073ffffffffffffffffffffffffffffffffffffffff821683526020528282205491602435830180931161053d5760208461015b858533610b58565b806011867f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b50503461011057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610110576020905160128152f35b839150346101105760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610110576105dd6108fe565b6105e5610926565b91846044359473ffffffffffffffffffffffffffffffffffffffff8416815260016020528181203382526020522054907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361064b575b60208661015b878787610949565b84821061067457509183916106696020969561015b95033383610b58565b91939481935061063d565b60649060208751917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b50503461011057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610110576020906002549051908152f35b50503461011057807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101105760209061015b61074c6108fe565b6024359033610b58565b8490843461089457827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108945782600354600181811c9080831692831561088a575b60209384841081146104285783885287959493929181156103cd575060011461080d5750505003601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019267ffffffffffffffff8411838510176103255750829182610321925282610898565b600388529193925086917fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b82841061087457505050907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe092601f928201019181936102d3565b8054888501870152879450928501928101610839565b91607f169161079c565b8280fd5b60208082528251818301819052939260005b8581106108ea575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006040809697860101520116010190565b8181018301518482016040015282016108aa565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361092157565b600080fd5b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361092157565b73ffffffffffffffffffffffffffffffffffffffff809116918215610ad45716918215610a50576000828152806020526040812054918083106109cc57604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152fd5b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152fd5b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152fd5b73ffffffffffffffffffffffffffffffffffffffff809116918215610c4a5716918215610bc65760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152fd5b60846040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH3 0x398 JUMPI PUSH3 0x14 PUSH3 0x39D JUMP JUMPDEST PUSH3 0x1E PUSH3 0x39D JUMP JUMPDEST DUP2 MLOAD SWAP1 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 DUP2 GT PUSH3 0x298 JUMPI PUSH1 0x3 SWAP2 DUP3 SLOAD SWAP3 PUSH1 0x1 SWAP3 DUP4 DUP6 DUP2 SHR SWAP6 AND SWAP6 DUP7 ISZERO PUSH3 0x38D JUMPI JUMPDEST PUSH1 0x20 SWAP7 DUP8 DUP8 LT EQ PUSH3 0x377 JUMPI DUP2 SWAP1 PUSH1 0x1F SWAP7 DUP8 DUP2 GT PUSH3 0x321 JUMPI JUMPDEST POP DUP8 SWAP1 DUP8 DUP4 GT PUSH1 0x1 EQ PUSH3 0x2BA JUMPI PUSH1 0x0 SWAP3 PUSH3 0x2AE JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP5 SHL SHR NOT AND SWAP1 DUP5 SHL OR DUP2 SSTORE JUMPDEST DUP6 MLOAD SWAP2 DUP3 GT PUSH3 0x298 JUMPI PUSH1 0x4 SWAP6 DUP7 SLOAD DUP5 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0x28D JUMPI JUMPDEST DUP8 DUP3 LT EQ PUSH3 0x278 JUMPI DUP6 DUP2 GT PUSH3 0x22D JUMPI JUMPDEST POP DUP6 SWAP1 DUP6 DUP5 GT PUSH1 0x1 EQ PUSH3 0x1C2 JUMPI SWAP4 DUP4 SWAP5 SWAP2 DUP5 SWAP3 PUSH1 0x0 SWAP6 PUSH3 0x1B6 JUMPI JUMPDEST POP POP SHL SWAP3 PUSH1 0x0 NOT SWAP2 SHL SHR NOT AND OR DUP4 SSTORE JUMPDEST CALLER ISZERO PUSH3 0x175 JUMPI POP PUSH1 0x2 SLOAD PUSH11 0x52B7D2DCC80CD2E4000000 SWAP3 DUP4 DUP3 ADD DUP1 SWAP3 GT PUSH3 0x160 JUMPI POP PUSH1 0x0 SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 PUSH1 0x2 SSTORE CALLER DUP4 MSTORE DUP3 DUP2 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP5 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP4 DUP5 MSTORE CALLER SWAP4 LOG3 PUSH1 0x40 MLOAD PUSH2 0xCDA SWAP1 DUP2 PUSH3 0x3CF DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x11 SWAP1 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x64 SWAP3 SWAP2 PUSH1 0x40 MLOAD SWAP3 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP5 MSTORE DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST ADD MLOAD SWAP4 POP CODESIZE DUP1 PUSH3 0xDB JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x1F NOT DUP5 AND SWAP3 DUP9 PUSH1 0x0 MSTORE DUP5 DUP9 PUSH1 0x0 KECCAK256 SWAP5 PUSH1 0x0 JUMPDEST DUP11 DUP10 DUP4 DUP4 LT PUSH3 0x215 JUMPI POP POP POP LT PUSH3 0x1FA JUMPI JUMPDEST POP POP POP POP DUP2 SHL ADD DUP4 SSTORE PUSH3 0xEB JUMP JUMPDEST ADD MLOAD SWAP1 PUSH1 0xF8 DUP5 PUSH1 0x0 NOT SWAP3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 DUP1 PUSH3 0x1EB JUMP JUMPDEST DUP7 DUP7 ADD MLOAD DUP10 SSTORE SWAP1 SWAP8 ADD SWAP7 SWAP5 DUP6 ADD SWAP5 DUP9 SWAP4 POP ADD PUSH3 0x1D7 JUMP JUMPDEST DUP8 PUSH1 0x0 MSTORE DUP7 PUSH1 0x0 KECCAK256 DUP7 DUP1 DUP7 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP10 DUP8 LT PUSH3 0x26E JUMPI JUMPDEST ADD PUSH1 0x5 SHR ADD SWAP1 DUP6 SWAP1 JUMPDEST DUP3 DUP2 LT PUSH3 0x261 JUMPI POP POP PUSH3 0xBE JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE ADD DUP6 SWAP1 PUSH3 0x251 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x248 JUMP JUMPDEST PUSH1 0x22 DUP9 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0xAC JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0x7D JUMP JUMPDEST SWAP1 DUP7 SWAP4 POP PUSH1 0x1F NOT DUP4 AND SWAP2 DUP6 PUSH1 0x0 MSTORE DUP10 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0x0 JUMPDEST DUP12 DUP3 DUP3 LT PUSH3 0x30A JUMPI POP POP DUP5 GT PUSH3 0x2F1 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP2 SSTORE PUSH3 0x8F JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP7 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x2E3 JUMP JUMPDEST DUP4 DUP6 ADD MLOAD DUP7 SSTORE DUP11 SWAP8 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP5 ADD SWAP4 ADD PUSH3 0x2D0 JUMP JUMPDEST SWAP1 SWAP2 POP DUP4 PUSH1 0x0 MSTORE DUP8 PUSH1 0x0 KECCAK256 DUP8 DUP1 DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP11 DUP7 LT PUSH3 0x36D JUMPI JUMPDEST SWAP2 DUP9 SWAP2 DUP7 SWAP6 SWAP5 SWAP4 ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH3 0x35D JUMPI POP POP PUSH3 0x66 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE DUP6 SWAP5 POP DUP9 SWAP2 ADD PUSH3 0x34D JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x33F JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP5 PUSH1 0x7F AND SWAP5 PUSH3 0x4C JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 SWAP1 DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH3 0x298 JUMPI PUSH1 0x40 MSTORE PUSH1 0x4 DUP3 MSTORE PUSH4 0x109554D1 PUSH1 0xE2 SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP INVALID PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 SWAP2 DUP3 CALLDATASIZE LT ISZERO PUSH2 0x16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0x6FDDE03 EQ PUSH2 0x756 JUMPI POP DUP2 PUSH4 0x95EA7B3 EQ PUSH2 0x70E JUMPI DUP2 PUSH4 0x18160DDD EQ PUSH2 0x6D1 JUMPI DUP2 PUSH4 0x23B872DD EQ PUSH2 0x5A3 JUMPI DUP2 PUSH4 0x313CE567 EQ PUSH2 0x569 JUMPI DUP2 PUSH4 0x39509351 EQ PUSH2 0x4BF JUMPI DUP2 PUSH4 0x70A08231 EQ PUSH2 0x45E JUMPI DUP2 PUSH4 0x95D89B41 EQ PUSH2 0x268 JUMPI DUP2 PUSH4 0xA457C2D7 EQ PUSH2 0x162 JUMPI POP DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x114 JUMPI PUSH4 0xDD62ED3E EQ PUSH2 0x9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x110 JUMPI DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x110 JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH2 0xD8 PUSH2 0x8FE JUMP JUMPDEST PUSH2 0xE0 PUSH2 0x926 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND DUP4 MSTORE PUSH1 0x1 DUP7 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x110 JUMPI DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x110 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x15B PUSH2 0x151 PUSH2 0x8FE JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x949 JUMP JUMPDEST MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST SWAP1 POP DUP3 CALLVALUE PUSH2 0x265 JUMPI DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x265 JUMPI PUSH2 0x19B PUSH2 0x8FE JUMP JUMPDEST SWAP2 DUP4 PUSH1 0x24 CALLDATALOAD SWAP3 CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 DUP3 DUP3 LT PUSH2 0x1E2 JUMPI PUSH1 0x20 DUP6 PUSH2 0x15B DUP6 DUP6 SUB DUP8 CALLER PUSH2 0xB58 JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP7 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 REVERT JUMPDEST DUP4 DUP4 CALLVALUE PUSH2 0x110 JUMPI DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x110 JUMPI DUP1 MLOAD SWAP1 DUP3 DUP5 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x454 JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x428 JUMPI DUP4 DUP9 MSTORE DUP8 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 DUP2 ISZERO PUSH2 0x3CD JUMPI POP PUSH1 0x1 EQ PUSH2 0x351 JUMPI JUMPDEST POP POP POP SUB PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x325 JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x321 SWAP3 MSTORE DUP3 PUSH2 0x898 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST DUP1 PUSH1 0x41 DUP7 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x24 SWAP5 MSTORE MSTORE REVERT JUMPDEST DUP9 DUP9 MSTORE SWAP2 SWAP4 SWAP3 POP DUP7 SWAP2 PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B JUMPDEST DUP3 DUP5 LT PUSH2 0x3B7 JUMPI POP POP POP SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP3 PUSH1 0x1F SWAP3 DUP3 ADD ADD SWAP2 DUP2 SWAP4 PUSH2 0x2D3 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP6 ADD DUP8 ADD MSTORE DUP8 SWAP5 POP SWAP3 DUP6 ADD SWAP3 DUP2 ADD PUSH2 0x37C JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP5 DUP8 ADD MSTORE POP POP ISZERO ISZERO PUSH1 0x5 SHL DUP4 ADD ADD SWAP1 POP DUP2 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH2 0x2D3 JUMP JUMPDEST PUSH1 0x24 DUP10 PUSH1 0x22 DUP13 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 DUP4 MSTORE MSTORE REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x2AF JUMP JUMPDEST POP POP CALLVALUE PUSH2 0x110 JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x110 JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x4B0 PUSH2 0x8FE JUMP JUMPDEST AND DUP2 MSTORE DUP1 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 DUP5 CALLVALUE PUSH2 0x265 JUMPI DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x265 JUMPI PUSH2 0x4F7 PUSH2 0x8FE JUMP JUMPDEST CALLER DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP3 DUP3 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP4 MSTORE PUSH1 0x20 MSTORE DUP3 DUP3 KECCAK256 SLOAD SWAP2 PUSH1 0x24 CALLDATALOAD DUP4 ADD DUP1 SWAP4 GT PUSH2 0x53D JUMPI PUSH1 0x20 DUP5 PUSH2 0x15B DUP6 DUP6 CALLER PUSH2 0xB58 JUMP JUMPDEST DUP1 PUSH1 0x11 DUP7 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x24 SWAP5 MSTORE MSTORE REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x110 JUMPI DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x110 JUMPI PUSH1 0x20 SWAP1 MLOAD PUSH1 0x12 DUP2 MSTORE RETURN JUMPDEST DUP4 SWAP2 POP CALLVALUE PUSH2 0x110 JUMPI PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x110 JUMPI PUSH2 0x5DD PUSH2 0x8FE JUMP JUMPDEST PUSH2 0x5E5 PUSH2 0x926 JUMP JUMPDEST SWAP2 DUP5 PUSH1 0x44 CALLDATALOAD SWAP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 CALLER DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x64B JUMPI JUMPDEST PUSH1 0x20 DUP7 PUSH2 0x15B DUP8 DUP8 DUP8 PUSH2 0x949 JUMP JUMPDEST DUP5 DUP3 LT PUSH2 0x674 JUMPI POP SWAP2 DUP4 SWAP2 PUSH2 0x669 PUSH1 0x20 SWAP7 SWAP6 PUSH2 0x15B SWAP6 SUB CALLER DUP4 PUSH2 0xB58 JUMP JUMPDEST SWAP2 SWAP4 SWAP5 DUP2 SWAP4 POP PUSH2 0x63D JUMP JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 DUP8 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x110 JUMPI DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x110 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x110 JUMPI DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x110 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x15B PUSH2 0x74C PUSH2 0x8FE JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0xB58 JUMP JUMPDEST DUP5 SWAP1 DUP5 CALLVALUE PUSH2 0x894 JUMPI DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x894 JUMPI DUP3 PUSH1 0x3 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x88A JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x428 JUMPI DUP4 DUP9 MSTORE DUP8 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 DUP2 ISZERO PUSH2 0x3CD JUMPI POP PUSH1 0x1 EQ PUSH2 0x80D JUMPI POP POP POP SUB PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x325 JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x321 SWAP3 MSTORE DUP3 PUSH2 0x898 JUMP JUMPDEST PUSH1 0x3 DUP9 MSTORE SWAP2 SWAP4 SWAP3 POP DUP7 SWAP2 PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B JUMPDEST DUP3 DUP5 LT PUSH2 0x874 JUMPI POP POP POP SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP3 PUSH1 0x1F SWAP3 DUP3 ADD ADD SWAP2 DUP2 SWAP4 PUSH2 0x2D3 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP6 ADD DUP8 ADD MSTORE DUP8 SWAP5 POP SWAP3 DUP6 ADD SWAP3 DUP2 ADD PUSH2 0x839 JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x79C JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP2 DUP4 ADD DUP2 SWAP1 MSTORE SWAP4 SWAP3 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT PUSH2 0x8EA JUMPI POP POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 PUSH1 0x0 PUSH1 0x40 DUP1 SWAP7 SWAP8 DUP7 ADD ADD MSTORE ADD AND ADD ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD DUP4 ADD MLOAD DUP5 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x8AA JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x921 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x921 JUMPI JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP2 AND SWAP2 DUP3 ISZERO PUSH2 0xAD4 JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0xA50 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 DUP1 DUP4 LT PUSH2 0x9CC JUMPI PUSH1 0x40 DUP3 DUP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP6 DUP8 PUSH1 0x20 SWAP7 MSTORE DUP3 DUP7 MSTORE SUB DUP3 DUP3 KECCAK256 SSTORE DUP7 DUP2 MSTORE KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP2 AND SWAP2 DUP3 ISZERO PUSH2 0xC4A JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0xBC6 JUMPI PUSH1 0x20 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 DUP4 PUSH1 0x0 MSTORE PUSH1 0x1 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP6 PUSH1 0x0 MSTORE DUP3 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"114:111:21:-:0;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;-1:-1:-1;;;;;114:111:21;;;;;;2046:13:7;114:111:21;;;;;;;;;;;;;;;;;-1:-1:-1;114:111:21;;;;;;;;;;;;;;;;;-1:-1:-1;114:111:21;;;;;;;;;;-1:-1:-1;114:111:21;;;;-1:-1:-1;;;;114:111:21;;;;;;;;;;;;;;;;;;;;2069:17:7;114:111:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;114:111:21;;;;;;;;;;;;;;;;;;;195:10;8603:21:7;114:111:21;;;8731:22:7;114:111:21;207:8;114:111;;;;;;;;;;-1:-1:-1;114:111:21;8952:37:7;114:111:21;8731:22:7;114:111:21;195:10;114:111;;;;;;;;;;;;;;;;;;;195:10;8952:37:7;;114:111:21;;;;;;;;;;;;;;;-1:-1:-1;114:111:21;;;-1:-1:-1;114:111:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;114:111:21;;;;;;;;;;;;;-1:-1:-1;114:111:21;;;-1:-1:-1;114:111:21;;-1:-1:-1;114:111:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;114:111:21;;;;;-1:-1:-1;114:111:21;;-1:-1:-1;114:111:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;114:111:21;;;;;;;;;;;;;;;;;;;;-1:-1:-1;114:111:21;;;-1:-1:-1;114:111:21;;;;;;;;;;;;-1:-1:-1;114:111:21;;2069:17:7;114:111:21;;-1:-1:-1;114:111:21;;;;;-1:-1:-1;114:111:21;;;;;;;;;;;;;;;-1:-1:-1;114:111:21;;-1:-1:-1;114:111:21;;-1:-1:-1;114:111:21;;;;;;;;;;-1:-1:-1;114:111:21;;;;;;;;;;;;;;;;-1:-1:-1;;114:111:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;114:111:21;;-1:-1:-1;114:111:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;114:111:21;;;;-1:-1:-1;114:111:21;;;;;;;;;;;;;;;;-1:-1:-1;114:111:21;;;;;-1:-1:-1;114:111:21;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;114:111:21;;;;;;;;;;;;;-1:-1:-1;;;114:111:21;;;;:::o"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":2302,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_4782":{"entryPoint":2342,"id":null,"parameterSlots":0,"returnSlots":1},"abi_encode_string":{"entryPoint":2200,"id":null,"parameterSlots":2,"returnSlots":1},"fun_approve":{"entryPoint":2904,"id":1123,"parameterSlots":3,"returnSlots":0},"fun_transfer":{"entryPoint":2377,"id":949,"parameterSlots":3,"returnSlots":0}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde031461075657508163095ea7b31461070e57816318160ddd146106d157816323b872dd146105a3578163313ce5671461056957816339509351146104bf57816370a082311461045e57816395d89b4114610268578163a457c2d71461016257508063a9059cbb146101145763dd62ed3e1461009e57600080fd5b3461011057807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011057806020926100d86108fe565b6100e0610926565b73ffffffffffffffffffffffffffffffffffffffff91821683526001865283832091168252845220549051908152f35b5080fd5b503461011057807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101105760209061015b6101516108fe565b6024359033610949565b5160018152f35b9050823461026557827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102655761019b6108fe565b918360243592338152600160205281812073ffffffffffffffffffffffffffffffffffffffff861682526020522054908282106101e25760208561015b8585038733610b58565b60849060208651917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152fd5b80fd5b83833461011057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011057805190828454600181811c90808316928315610454575b60209384841081146104285783885287959493929181156103cd5750600114610351575b50505003601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019267ffffffffffffffff8411838510176103255750829182610321925282610898565b0390f35b806041867f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b8888529193925086917f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8284106103b757505050907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe092601f928201019181936102d3565b805488850187015287945092850192810161037c565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016848701525050151560051b830101905081601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06102d3565b60248960228c7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b91607f16916102af565b5050346101105760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610110578060209273ffffffffffffffffffffffffffffffffffffffff6104b06108fe565b16815280845220549051908152f35b82843461026557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610265576104f76108fe565b338252600160205282822073ffffffffffffffffffffffffffffffffffffffff821683526020528282205491602435830180931161053d5760208461015b858533610b58565b806011867f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b50503461011057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610110576020905160128152f35b839150346101105760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610110576105dd6108fe565b6105e5610926565b91846044359473ffffffffffffffffffffffffffffffffffffffff8416815260016020528181203382526020522054907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361064b575b60208661015b878787610949565b84821061067457509183916106696020969561015b95033383610b58565b91939481935061063d565b60649060208751917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b50503461011057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610110576020906002549051908152f35b50503461011057807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101105760209061015b61074c6108fe565b6024359033610b58565b8490843461089457827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108945782600354600181811c9080831692831561088a575b60209384841081146104285783885287959493929181156103cd575060011461080d5750505003601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019267ffffffffffffffff8411838510176103255750829182610321925282610898565b600388529193925086917fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b82841061087457505050907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe092601f928201019181936102d3565b8054888501870152879450928501928101610839565b91607f169161079c565b8280fd5b60208082528251818301819052939260005b8581106108ea575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006040809697860101520116010190565b8181018301518482016040015282016108aa565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361092157565b600080fd5b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361092157565b73ffffffffffffffffffffffffffffffffffffffff809116918215610ad45716918215610a50576000828152806020526040812054918083106109cc57604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152fd5b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152fd5b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152fd5b73ffffffffffffffffffffffffffffffffffffffff809116918215610c4a5716918215610bc65760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152fd5b60846040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 SWAP2 DUP3 CALLDATASIZE LT ISZERO PUSH2 0x16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0x6FDDE03 EQ PUSH2 0x756 JUMPI POP DUP2 PUSH4 0x95EA7B3 EQ PUSH2 0x70E JUMPI DUP2 PUSH4 0x18160DDD EQ PUSH2 0x6D1 JUMPI DUP2 PUSH4 0x23B872DD EQ PUSH2 0x5A3 JUMPI DUP2 PUSH4 0x313CE567 EQ PUSH2 0x569 JUMPI DUP2 PUSH4 0x39509351 EQ PUSH2 0x4BF JUMPI DUP2 PUSH4 0x70A08231 EQ PUSH2 0x45E JUMPI DUP2 PUSH4 0x95D89B41 EQ PUSH2 0x268 JUMPI DUP2 PUSH4 0xA457C2D7 EQ PUSH2 0x162 JUMPI POP DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x114 JUMPI PUSH4 0xDD62ED3E EQ PUSH2 0x9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x110 JUMPI DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x110 JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH2 0xD8 PUSH2 0x8FE JUMP JUMPDEST PUSH2 0xE0 PUSH2 0x926 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND DUP4 MSTORE PUSH1 0x1 DUP7 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x110 JUMPI DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x110 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x15B PUSH2 0x151 PUSH2 0x8FE JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x949 JUMP JUMPDEST MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST SWAP1 POP DUP3 CALLVALUE PUSH2 0x265 JUMPI DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x265 JUMPI PUSH2 0x19B PUSH2 0x8FE JUMP JUMPDEST SWAP2 DUP4 PUSH1 0x24 CALLDATALOAD SWAP3 CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 DUP3 DUP3 LT PUSH2 0x1E2 JUMPI PUSH1 0x20 DUP6 PUSH2 0x15B DUP6 DUP6 SUB DUP8 CALLER PUSH2 0xB58 JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP7 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 REVERT JUMPDEST DUP4 DUP4 CALLVALUE PUSH2 0x110 JUMPI DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x110 JUMPI DUP1 MLOAD SWAP1 DUP3 DUP5 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x454 JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x428 JUMPI DUP4 DUP9 MSTORE DUP8 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 DUP2 ISZERO PUSH2 0x3CD JUMPI POP PUSH1 0x1 EQ PUSH2 0x351 JUMPI JUMPDEST POP POP POP SUB PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x325 JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x321 SWAP3 MSTORE DUP3 PUSH2 0x898 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST DUP1 PUSH1 0x41 DUP7 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x24 SWAP5 MSTORE MSTORE REVERT JUMPDEST DUP9 DUP9 MSTORE SWAP2 SWAP4 SWAP3 POP DUP7 SWAP2 PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B JUMPDEST DUP3 DUP5 LT PUSH2 0x3B7 JUMPI POP POP POP SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP3 PUSH1 0x1F SWAP3 DUP3 ADD ADD SWAP2 DUP2 SWAP4 PUSH2 0x2D3 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP6 ADD DUP8 ADD MSTORE DUP8 SWAP5 POP SWAP3 DUP6 ADD SWAP3 DUP2 ADD PUSH2 0x37C JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP5 DUP8 ADD MSTORE POP POP ISZERO ISZERO PUSH1 0x5 SHL DUP4 ADD ADD SWAP1 POP DUP2 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH2 0x2D3 JUMP JUMPDEST PUSH1 0x24 DUP10 PUSH1 0x22 DUP13 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 DUP4 MSTORE MSTORE REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x2AF JUMP JUMPDEST POP POP CALLVALUE PUSH2 0x110 JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x110 JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x4B0 PUSH2 0x8FE JUMP JUMPDEST AND DUP2 MSTORE DUP1 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 DUP5 CALLVALUE PUSH2 0x265 JUMPI DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x265 JUMPI PUSH2 0x4F7 PUSH2 0x8FE JUMP JUMPDEST CALLER DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP3 DUP3 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP4 MSTORE PUSH1 0x20 MSTORE DUP3 DUP3 KECCAK256 SLOAD SWAP2 PUSH1 0x24 CALLDATALOAD DUP4 ADD DUP1 SWAP4 GT PUSH2 0x53D JUMPI PUSH1 0x20 DUP5 PUSH2 0x15B DUP6 DUP6 CALLER PUSH2 0xB58 JUMP JUMPDEST DUP1 PUSH1 0x11 DUP7 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x24 SWAP5 MSTORE MSTORE REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x110 JUMPI DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x110 JUMPI PUSH1 0x20 SWAP1 MLOAD PUSH1 0x12 DUP2 MSTORE RETURN JUMPDEST DUP4 SWAP2 POP CALLVALUE PUSH2 0x110 JUMPI PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x110 JUMPI PUSH2 0x5DD PUSH2 0x8FE JUMP JUMPDEST PUSH2 0x5E5 PUSH2 0x926 JUMP JUMPDEST SWAP2 DUP5 PUSH1 0x44 CALLDATALOAD SWAP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 CALLER DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x64B JUMPI JUMPDEST PUSH1 0x20 DUP7 PUSH2 0x15B DUP8 DUP8 DUP8 PUSH2 0x949 JUMP JUMPDEST DUP5 DUP3 LT PUSH2 0x674 JUMPI POP SWAP2 DUP4 SWAP2 PUSH2 0x669 PUSH1 0x20 SWAP7 SWAP6 PUSH2 0x15B SWAP6 SUB CALLER DUP4 PUSH2 0xB58 JUMP JUMPDEST SWAP2 SWAP4 SWAP5 DUP2 SWAP4 POP PUSH2 0x63D JUMP JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 DUP8 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x110 JUMPI DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x110 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x110 JUMPI DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x110 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x15B PUSH2 0x74C PUSH2 0x8FE JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0xB58 JUMP JUMPDEST DUP5 SWAP1 DUP5 CALLVALUE PUSH2 0x894 JUMPI DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x894 JUMPI DUP3 PUSH1 0x3 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x88A JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x428 JUMPI DUP4 DUP9 MSTORE DUP8 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 DUP2 ISZERO PUSH2 0x3CD JUMPI POP PUSH1 0x1 EQ PUSH2 0x80D JUMPI POP POP POP SUB PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x325 JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x321 SWAP3 MSTORE DUP3 PUSH2 0x898 JUMP JUMPDEST PUSH1 0x3 DUP9 MSTORE SWAP2 SWAP4 SWAP3 POP DUP7 SWAP2 PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B JUMPDEST DUP3 DUP5 LT PUSH2 0x874 JUMPI POP POP POP SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP3 PUSH1 0x1F SWAP3 DUP3 ADD ADD SWAP2 DUP2 SWAP4 PUSH2 0x2D3 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP6 ADD DUP8 ADD MSTORE DUP8 SWAP5 POP SWAP3 DUP6 ADD SWAP3 DUP2 ADD PUSH2 0x839 JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x79C JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP2 DUP4 ADD DUP2 SWAP1 MSTORE SWAP4 SWAP3 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT PUSH2 0x8EA JUMPI POP POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 PUSH1 0x0 PUSH1 0x40 DUP1 SWAP7 SWAP8 DUP7 ADD ADD MSTORE ADD AND ADD ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD DUP4 ADD MLOAD DUP5 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x8AA JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x921 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x921 JUMPI JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP2 AND SWAP2 DUP3 ISZERO PUSH2 0xAD4 JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0xA50 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 DUP1 DUP4 LT PUSH2 0x9CC JUMPI PUSH1 0x40 DUP3 DUP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP6 DUP8 PUSH1 0x20 SWAP7 MSTORE DUP3 DUP7 MSTORE SUB DUP3 DUP3 KECCAK256 SSTORE DUP7 DUP2 MSTORE KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP2 AND SWAP2 DUP3 ISZERO PUSH2 0xC4A JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0xBC6 JUMPI PUSH1 0x20 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 DUP4 PUSH1 0x0 MSTORE PUSH1 0x1 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP6 PUSH1 0x0 MSTORE DUP3 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"114:111:21:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;4102:11:7;114:111:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3894:6:7;114:111:21;;:::i;:::-;;;719:10:11;;3894:6:7;:::i;:::-;114:111:21;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;719:10:11;;114:111:21;;;;;;;;;;;;;;;;;6792:35:7;;;;114:111:21;;;;6928:34:7;114:111:21;;;;719:10:11;6928:34:7;:::i;114:111:21:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;114:111:21;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;114:111:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;114:111:21;;;;;;;;;;;;;;;-1:-1:-1;;114:111:21;;;;;;;;-1:-1:-1;114:111:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;719:10:11;114:111:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;719:10:11;6021:38:7;719:10:11;;;6021:38:7;:::i;114:111:21:-;;;;;;;;;;;;;;;;;;;;;;;;;;3186:2:7;114:111:21;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;719:10:11;114:111:21;;;;;;11244:37:7;11264:17;11244:37;;11240:243;;114:111:21;;5424:6:7;;;;;;:::i;11240:243::-;11305:26;;;114:111:21;;;;;;11432:25:7;114:111:21;;;5424:6:7;114:111:21;;719:10:11;11432:25:7;;:::i;:::-;11240:243;;;;;;;;114:111:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3342:12:7;114:111:21;;;;;;;;;;;;;;;;;;;;;;4606:6:7;114:111:21;;:::i;:::-;;;719:10:11;;4606:6:7;:::i;114:111:21:-;;;;;;;;;;;;;;;2244:5:7;114:111:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;114:111:21;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2244:5:7;114:111:21;;;;;-1:-1:-1;114:111:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;114:111:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;114:111:21;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;7456:788:7:-;114:111:21;;;;7552:18:7;;;114:111:21;;;7630:16:7;;;114:111:21;;7568:1:7;114:111:21;;;;;;;;;;7801:21:7;;;;114:111:21;;;;;8163:26:7;114:111:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;8163:26:7;7456:788::o;114:111:21:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10457:340:7;114:111:21;;;;10558:19:7;;;114:111:21;;;10636:21:7;;;114:111:21;;;10758:32:7;114:111:21;;10575:1:7;114:111:21;10707:11:7;114:111:21;;;10575:1:7;114:111:21;;10575:1:7;114:111:21;;;;;10575:1:7;114:111:21;;;;;;;10758:32:7;10457:340::o;114:111:21:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"658000","executionCost":"infinite","totalCost":"infinite"},"external":{"allowance(address,address)":"2749","approve(address,uint256)":"24360","balanceOf(address)":"2533","decimals()":"259","decreaseAllowance(address,uint256)":"26789","increaseAllowance(address,uint256)":"26718","name()":"infinite","symbol()":"infinite","totalSupply()":"2321","transfer(address,uint256)":"50939","transferFrom(address,address,uint256)":"77319"}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/aa/BUSD.sol\":\"BUSD\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/aa/BUSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract BUSD is ERC20 {\\n    constructor() ERC20(\\\"BUSD\\\", \\\"BUSD\\\") {\\n        _mint(msg.sender, 10 ** 26);\\n    }\\n}\\n\",\"keccak256\":\"0xbde6d7d04bd8a0b88ba5df05329077b06d5d73685d43f702e5b0609e38dbaf32\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":618,"contract":"contracts/aa/BUSD.sol:BUSD","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":624,"contract":"contracts/aa/BUSD.sol:BUSD","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":626,"contract":"contracts/aa/BUSD.sol:BUSD","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":628,"contract":"contracts/aa/BUSD.sol:BUSD","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":630,"contract":"contracts/aa/BUSD.sol:BUSD","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/aa/Swapper.sol":{"Swapper":{"abi":[{"inputs":[{"internalType":"address","name":"busd","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"uint256","name":"amountBNB","type":"uint256"},{"internalType":"uint256","name":"amountBUSD","type":"uint256"}],"name":"swapBNBToBUSD","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountBUSD","type":"uint256"},{"internalType":"uint256","name":"amountBNB","type":"uint256"}],"name":"swapBUSDToBNB","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"transferBNB","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"transferBUSD","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60803461007a57601f6106cd38819003918201601f19168301916001600160401b0383118484101761007f5780849260209460405283398101031261007a57516001600160a01b0381169081900361007a5760018060a01b031933816000541617600055600154161760015560405161063790816100968239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60406080815260049081361015610020575b5050361561001e57600080fd5b005b600091823560e01c9083826320507ebb1461038257508163ab27021e14610245578163c4f90e1d146100d7575063eefd3d9a0361001157346100d357817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d3578180808073ffffffffffffffffffffffffffffffffffffffff8154166100ac8133146105c5565b47908282156100ca575bf1156100c0575080f35b51903d90823e3d90fd5b506108fc6100b6565b5080fd5b90503461024157827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102415773ffffffffffffffffffffffffffffffffffffffff91828454169261012d8433146105c5565b60015416928151927f70a082310000000000000000000000000000000000000000000000000000000084523081850152856020958686602481845afa9586156102375790829188959493976101fd575b509060449291865197889586947fa9059cbb00000000000000000000000000000000000000000000000000000000865285015260248401525af19081156101f457506101c7578280f35b816101e692903d106101ed575b6101de818361053d565b8101906105ad565b5038808280f35b503d6101d4565b513d85823e3d90fd5b85819493969298503d8311610230575b610217818361053d565b8101031261022c57905194869390604461017d565b8380fd5b503d61020d565b85513d84823e3d90fd5b8280fd5b83915061025136610479565b9173ffffffffffffffffffffffffffffffffffffffff80855416926102778432146104b2565b340361032557928592602092866102ed9660015416928651978895869485937f23b872dd0000000000000000000000000000000000000000000000000000000085523391850160409194939294606082019573ffffffffffffffffffffffffffffffffffffffff80921683521660208201520152565b03925af190811561031c5750610301575080f35b6103189060203d81116101ed576101de818361053d565b5080f35b513d84823e3d90fd5b60648260208851917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601760248201527f496e76616c6964205472616e7366657220616d6f756e740000000000000000006044820152fd5b915061041e602061039236610479565b9373ffffffffffffffffffffffffffffffffffffffff8681815416916103b98332146104b2565b60015416928951968795869485937f23b872dd0000000000000000000000000000000000000000000000000000000085523390850160409194939294606082019573ffffffffffffffffffffffffffffffffffffffff80921683521660208201520152565b03925af1801561046f57839283928392610451575b50818115610448575b3390f1156100c0575080f35b506108fc61043c565b6104689060203d81116101ed576101de818361053d565b5038610433565b84513d85823e3d90fd5b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60409101126104ad576004359060243590565b600080fd5b156104b957565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f537761707065723a205478206e6f7420696e69746961746564206279206f776e60448201527f65720000000000000000000000000000000000000000000000000000000000006064820152fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761057e57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b908160209103126104ad575180151581036104ad5790565b156105cc57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f537761707065723a2053656e646572206e6f74206f776e6572000000000000006044820152fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x80 CALLVALUE PUSH2 0x7A JUMPI PUSH1 0x1F PUSH2 0x6CD CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH2 0x7F JUMPI DUP1 DUP5 SWAP3 PUSH1 0x20 SWAP5 PUSH1 0x40 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH2 0x7A JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x7A JUMPI PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB NOT CALLER DUP2 PUSH1 0x0 SLOAD AND OR PUSH1 0x0 SSTORE PUSH1 0x1 SLOAD AND OR PUSH1 0x1 SSTORE PUSH1 0x40 MLOAD PUSH2 0x637 SWAP1 DUP2 PUSH2 0x96 DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 SWAP1 DUP2 CALLDATASIZE LT ISZERO PUSH2 0x20 JUMPI JUMPDEST POP POP CALLDATASIZE ISZERO PUSH2 0x1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 SWAP2 DUP3 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP4 DUP3 PUSH4 0x20507EBB EQ PUSH2 0x382 JUMPI POP DUP2 PUSH4 0xAB27021E EQ PUSH2 0x245 JUMPI DUP2 PUSH4 0xC4F90E1D EQ PUSH2 0xD7 JUMPI POP PUSH4 0xEEFD3D9A SUB PUSH2 0x11 JUMPI CALLVALUE PUSH2 0xD3 JUMPI DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0xD3 JUMPI DUP2 DUP1 DUP1 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 SLOAD AND PUSH2 0xAC DUP2 CALLER EQ PUSH2 0x5C5 JUMP JUMPDEST SELFBALANCE SWAP1 DUP3 DUP3 ISZERO PUSH2 0xCA JUMPI JUMPDEST CALL ISZERO PUSH2 0xC0 JUMPI POP DUP1 RETURN JUMPDEST MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP PUSH2 0x8FC PUSH2 0xB6 JUMP JUMPDEST POP DUP1 REVERT JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x241 JUMPI DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x241 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 DUP5 SLOAD AND SWAP3 PUSH2 0x12D DUP5 CALLER EQ PUSH2 0x5C5 JUMP JUMPDEST PUSH1 0x1 SLOAD AND SWAP3 DUP2 MLOAD SWAP3 PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP5 MSTORE ADDRESS DUP2 DUP6 ADD MSTORE DUP6 PUSH1 0x20 SWAP6 DUP7 DUP7 PUSH1 0x24 DUP2 DUP5 GAS STATICCALL SWAP6 DUP7 ISZERO PUSH2 0x237 JUMPI SWAP1 DUP3 SWAP2 DUP9 SWAP6 SWAP5 SWAP4 SWAP8 PUSH2 0x1FD JUMPI JUMPDEST POP SWAP1 PUSH1 0x44 SWAP3 SWAP2 DUP7 MLOAD SWAP8 DUP9 SWAP6 DUP7 SWAP5 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP7 MSTORE DUP6 ADD MSTORE PUSH1 0x24 DUP5 ADD MSTORE GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x1F4 JUMPI POP PUSH2 0x1C7 JUMPI DUP3 DUP1 RETURN JUMPDEST DUP2 PUSH2 0x1E6 SWAP3 SWAP1 RETURNDATASIZE LT PUSH2 0x1ED JUMPI JUMPDEST PUSH2 0x1DE DUP2 DUP4 PUSH2 0x53D JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x5AD JUMP JUMPDEST POP CODESIZE DUP1 DUP3 DUP1 RETURN JUMPDEST POP RETURNDATASIZE PUSH2 0x1D4 JUMP JUMPDEST MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP6 DUP2 SWAP5 SWAP4 SWAP7 SWAP3 SWAP9 POP RETURNDATASIZE DUP4 GT PUSH2 0x230 JUMPI JUMPDEST PUSH2 0x217 DUP2 DUP4 PUSH2 0x53D JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x22C JUMPI SWAP1 MLOAD SWAP5 DUP7 SWAP4 SWAP1 PUSH1 0x44 PUSH2 0x17D JUMP JUMPDEST DUP4 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x20D JUMP JUMPDEST DUP6 MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST DUP4 SWAP2 POP PUSH2 0x251 CALLDATASIZE PUSH2 0x479 JUMP JUMPDEST SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 SLOAD AND SWAP3 PUSH2 0x277 DUP5 ORIGIN EQ PUSH2 0x4B2 JUMP JUMPDEST CALLVALUE SUB PUSH2 0x325 JUMPI SWAP3 DUP6 SWAP3 PUSH1 0x20 SWAP3 DUP7 PUSH2 0x2ED SWAP7 PUSH1 0x1 SLOAD AND SWAP3 DUP7 MLOAD SWAP8 DUP9 SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP6 MSTORE CALLER SWAP2 DUP6 ADD PUSH1 0x40 SWAP2 SWAP5 SWAP4 SWAP3 SWAP5 PUSH1 0x60 DUP3 ADD SWAP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP3 AND DUP4 MSTORE AND PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x31C JUMPI POP PUSH2 0x301 JUMPI POP DUP1 RETURN JUMPDEST PUSH2 0x318 SWAP1 PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1ED JUMPI PUSH2 0x1DE DUP2 DUP4 PUSH2 0x53D JUMP JUMPDEST POP DUP1 RETURN JUMPDEST MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x64 DUP3 PUSH1 0x20 DUP9 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C6964205472616E7366657220616D6F756E74000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP2 POP PUSH2 0x41E PUSH1 0x20 PUSH2 0x392 CALLDATASIZE PUSH2 0x479 JUMP JUMPDEST SWAP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 DUP2 SLOAD AND SWAP2 PUSH2 0x3B9 DUP4 ORIGIN EQ PUSH2 0x4B2 JUMP JUMPDEST PUSH1 0x1 SLOAD AND SWAP3 DUP10 MLOAD SWAP7 DUP8 SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP6 MSTORE CALLER SWAP1 DUP6 ADD PUSH1 0x40 SWAP2 SWAP5 SWAP4 SWAP3 SWAP5 PUSH1 0x60 DUP3 ADD SWAP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP3 AND DUP4 MSTORE AND PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x46F JUMPI DUP4 SWAP3 DUP4 SWAP3 DUP4 SWAP3 PUSH2 0x451 JUMPI JUMPDEST POP DUP2 DUP2 ISZERO PUSH2 0x448 JUMPI JUMPDEST CALLER SWAP1 CALL ISZERO PUSH2 0xC0 JUMPI POP DUP1 RETURN JUMPDEST POP PUSH2 0x8FC PUSH2 0x43C JUMP JUMPDEST PUSH2 0x468 SWAP1 PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1ED JUMPI PUSH2 0x1DE DUP2 DUP4 PUSH2 0x53D JUMP JUMPDEST POP CODESIZE PUSH2 0x433 JUMP JUMPDEST DUP5 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC PUSH1 0x40 SWAP2 ADD SLT PUSH2 0x4AD JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST ISZERO PUSH2 0x4B9 JUMPI JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537761707065723A205478206E6F7420696E69746961746564206279206F776E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6572000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x57E JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x4AD JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x4AD JUMPI SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x5CC JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537761707065723A2053656E646572206E6F74206F776E657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"79:1212:22:-:0;;;;;;;;;;;;;-1:-1:-1;;79:1212:22;;;;-1:-1:-1;;;;;79:1212:22;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;79:1212:22;;;;;;;;;;;;;;186:10;79:1212;-1:-1:-1;79:1212:22;;;-1:-1:-1;79:1212:22;;;;;;;;;;;;;;;;;-1:-1:-1;79:1212:22;;;;;;-1:-1:-1;79:1212:22;;;;;-1:-1:-1;79:1212:22"},"deployedBytecode":{"functionDebugData":{"abi_decode_bool_fromMemory":{"entryPoint":1453,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_uint256t_uint256":{"entryPoint":1145,"id":null,"parameterSlots":1,"returnSlots":2},"abi_encode_address_address_uint256":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"finalize_allocation":{"entryPoint":1341,"id":null,"parameterSlots":2,"returnSlots":0},"require_helper_stringliteral_c209":{"entryPoint":1202,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_ff68":{"entryPoint":1477,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"60406080815260049081361015610020575b5050361561001e57600080fd5b005b600091823560e01c9083826320507ebb1461038257508163ab27021e14610245578163c4f90e1d146100d7575063eefd3d9a0361001157346100d357817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d3578180808073ffffffffffffffffffffffffffffffffffffffff8154166100ac8133146105c5565b47908282156100ca575bf1156100c0575080f35b51903d90823e3d90fd5b506108fc6100b6565b5080fd5b90503461024157827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102415773ffffffffffffffffffffffffffffffffffffffff91828454169261012d8433146105c5565b60015416928151927f70a082310000000000000000000000000000000000000000000000000000000084523081850152856020958686602481845afa9586156102375790829188959493976101fd575b509060449291865197889586947fa9059cbb00000000000000000000000000000000000000000000000000000000865285015260248401525af19081156101f457506101c7578280f35b816101e692903d106101ed575b6101de818361053d565b8101906105ad565b5038808280f35b503d6101d4565b513d85823e3d90fd5b85819493969298503d8311610230575b610217818361053d565b8101031261022c57905194869390604461017d565b8380fd5b503d61020d565b85513d84823e3d90fd5b8280fd5b83915061025136610479565b9173ffffffffffffffffffffffffffffffffffffffff80855416926102778432146104b2565b340361032557928592602092866102ed9660015416928651978895869485937f23b872dd0000000000000000000000000000000000000000000000000000000085523391850160409194939294606082019573ffffffffffffffffffffffffffffffffffffffff80921683521660208201520152565b03925af190811561031c5750610301575080f35b6103189060203d81116101ed576101de818361053d565b5080f35b513d84823e3d90fd5b60648260208851917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601760248201527f496e76616c6964205472616e7366657220616d6f756e740000000000000000006044820152fd5b915061041e602061039236610479565b9373ffffffffffffffffffffffffffffffffffffffff8681815416916103b98332146104b2565b60015416928951968795869485937f23b872dd0000000000000000000000000000000000000000000000000000000085523390850160409194939294606082019573ffffffffffffffffffffffffffffffffffffffff80921683521660208201520152565b03925af1801561046f57839283928392610451575b50818115610448575b3390f1156100c0575080f35b506108fc61043c565b6104689060203d81116101ed576101de818361053d565b5038610433565b84513d85823e3d90fd5b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60409101126104ad576004359060243590565b600080fd5b156104b957565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f537761707065723a205478206e6f7420696e69746961746564206279206f776e60448201527f65720000000000000000000000000000000000000000000000000000000000006064820152fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761057e57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b908160209103126104ad575180151581036104ad5790565b156105cc57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f537761707065723a2053656e646572206e6f74206f776e6572000000000000006044820152fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 SWAP1 DUP2 CALLDATASIZE LT ISZERO PUSH2 0x20 JUMPI JUMPDEST POP POP CALLDATASIZE ISZERO PUSH2 0x1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 SWAP2 DUP3 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP4 DUP3 PUSH4 0x20507EBB EQ PUSH2 0x382 JUMPI POP DUP2 PUSH4 0xAB27021E EQ PUSH2 0x245 JUMPI DUP2 PUSH4 0xC4F90E1D EQ PUSH2 0xD7 JUMPI POP PUSH4 0xEEFD3D9A SUB PUSH2 0x11 JUMPI CALLVALUE PUSH2 0xD3 JUMPI DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0xD3 JUMPI DUP2 DUP1 DUP1 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 SLOAD AND PUSH2 0xAC DUP2 CALLER EQ PUSH2 0x5C5 JUMP JUMPDEST SELFBALANCE SWAP1 DUP3 DUP3 ISZERO PUSH2 0xCA JUMPI JUMPDEST CALL ISZERO PUSH2 0xC0 JUMPI POP DUP1 RETURN JUMPDEST MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP PUSH2 0x8FC PUSH2 0xB6 JUMP JUMPDEST POP DUP1 REVERT JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x241 JUMPI DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x241 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 DUP5 SLOAD AND SWAP3 PUSH2 0x12D DUP5 CALLER EQ PUSH2 0x5C5 JUMP JUMPDEST PUSH1 0x1 SLOAD AND SWAP3 DUP2 MLOAD SWAP3 PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP5 MSTORE ADDRESS DUP2 DUP6 ADD MSTORE DUP6 PUSH1 0x20 SWAP6 DUP7 DUP7 PUSH1 0x24 DUP2 DUP5 GAS STATICCALL SWAP6 DUP7 ISZERO PUSH2 0x237 JUMPI SWAP1 DUP3 SWAP2 DUP9 SWAP6 SWAP5 SWAP4 SWAP8 PUSH2 0x1FD JUMPI JUMPDEST POP SWAP1 PUSH1 0x44 SWAP3 SWAP2 DUP7 MLOAD SWAP8 DUP9 SWAP6 DUP7 SWAP5 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP7 MSTORE DUP6 ADD MSTORE PUSH1 0x24 DUP5 ADD MSTORE GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x1F4 JUMPI POP PUSH2 0x1C7 JUMPI DUP3 DUP1 RETURN JUMPDEST DUP2 PUSH2 0x1E6 SWAP3 SWAP1 RETURNDATASIZE LT PUSH2 0x1ED JUMPI JUMPDEST PUSH2 0x1DE DUP2 DUP4 PUSH2 0x53D JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x5AD JUMP JUMPDEST POP CODESIZE DUP1 DUP3 DUP1 RETURN JUMPDEST POP RETURNDATASIZE PUSH2 0x1D4 JUMP JUMPDEST MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP6 DUP2 SWAP5 SWAP4 SWAP7 SWAP3 SWAP9 POP RETURNDATASIZE DUP4 GT PUSH2 0x230 JUMPI JUMPDEST PUSH2 0x217 DUP2 DUP4 PUSH2 0x53D JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x22C JUMPI SWAP1 MLOAD SWAP5 DUP7 SWAP4 SWAP1 PUSH1 0x44 PUSH2 0x17D JUMP JUMPDEST DUP4 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x20D JUMP JUMPDEST DUP6 MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST DUP4 SWAP2 POP PUSH2 0x251 CALLDATASIZE PUSH2 0x479 JUMP JUMPDEST SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 SLOAD AND SWAP3 PUSH2 0x277 DUP5 ORIGIN EQ PUSH2 0x4B2 JUMP JUMPDEST CALLVALUE SUB PUSH2 0x325 JUMPI SWAP3 DUP6 SWAP3 PUSH1 0x20 SWAP3 DUP7 PUSH2 0x2ED SWAP7 PUSH1 0x1 SLOAD AND SWAP3 DUP7 MLOAD SWAP8 DUP9 SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP6 MSTORE CALLER SWAP2 DUP6 ADD PUSH1 0x40 SWAP2 SWAP5 SWAP4 SWAP3 SWAP5 PUSH1 0x60 DUP3 ADD SWAP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP3 AND DUP4 MSTORE AND PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x31C JUMPI POP PUSH2 0x301 JUMPI POP DUP1 RETURN JUMPDEST PUSH2 0x318 SWAP1 PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1ED JUMPI PUSH2 0x1DE DUP2 DUP4 PUSH2 0x53D JUMP JUMPDEST POP DUP1 RETURN JUMPDEST MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x64 DUP3 PUSH1 0x20 DUP9 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C6964205472616E7366657220616D6F756E74000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP2 POP PUSH2 0x41E PUSH1 0x20 PUSH2 0x392 CALLDATASIZE PUSH2 0x479 JUMP JUMPDEST SWAP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 DUP2 SLOAD AND SWAP2 PUSH2 0x3B9 DUP4 ORIGIN EQ PUSH2 0x4B2 JUMP JUMPDEST PUSH1 0x1 SLOAD AND SWAP3 DUP10 MLOAD SWAP7 DUP8 SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP6 MSTORE CALLER SWAP1 DUP6 ADD PUSH1 0x40 SWAP2 SWAP5 SWAP4 SWAP3 SWAP5 PUSH1 0x60 DUP3 ADD SWAP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP3 AND DUP4 MSTORE AND PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x46F JUMPI DUP4 SWAP3 DUP4 SWAP3 DUP4 SWAP3 PUSH2 0x451 JUMPI JUMPDEST POP DUP2 DUP2 ISZERO PUSH2 0x448 JUMPI JUMPDEST CALLER SWAP1 CALL ISZERO PUSH2 0xC0 JUMPI POP DUP1 RETURN JUMPDEST POP PUSH2 0x8FC PUSH2 0x43C JUMP JUMPDEST PUSH2 0x468 SWAP1 PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1ED JUMPI PUSH2 0x1DE DUP2 DUP4 PUSH2 0x53D JUMP JUMPDEST POP CODESIZE PUSH2 0x433 JUMP JUMPDEST DUP5 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC PUSH1 0x40 SWAP2 ADD SLT PUSH2 0x4AD JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST ISZERO PUSH2 0x4B9 JUMPI JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537761707065723A205478206E6F7420696E69746961746564206279206F776E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6572000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x57E JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x4AD JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x4AD JUMPI SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x5CC JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537761707065723A2053656E646572206E6F74206F776E657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"79:1212:22:-:0;;;;;;;;;;;;-1:-1:-1;79:1212:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;925:57;933:10;;:19;925:57;:::i;:::-;1016:21;992:46;;;;;;79:1212;992:46;;;;79:1212;;;992:46;79:1212;;;;;;;;;992:46;;;;;79:1212;;;;;;;;;;;;;;;;;;;;;;;1100:10;1092:57;1100:10;;:19;1092:57;:::i;:::-;1173:9;79:1212;;;;;1173:34;79:1212;1173:34;;1201:4;1173:34;;;79:1212;1173:34;;;;;79:1212;1173:34;;;;;;;;;;;;;;;;;;;79:1212;;;;;;;;1217:30;;;;;79:1212;1217:30;;;;79:1212;;;;;1217:30;;;;;;;;;;79:1212;;;1217:30;;;;;;-1:-1:-1;1217:30:22;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;79:1212;;;1217:30;;;;;;79:1212;;;;;;;;1173:34;;;;;;;;;;;;;;;;;;;:::i;:::-;;;79:1212;;;;;;;;;;;1173:34;;79:1212;;;;1173:34;;;;;;79:1212;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;385:9;377:65;385:9;;:18;377:65;:::i;:::-;460:9;:22;79:1212;;;;;520:53;79:1212;;520:53;79:1212;520:9;79:1212;;;;;520:53;;;;;;;79:1212;520:53;;550:10;520:53;;;79:1212;;;;;;;;;;;;;;;;;;;;;;;;520:53;;;;;;;;;;;;;79:1212;;;520:53;;;;;;;;;;;;;:::i;:::-;;79:1212;;520:53;79:1212;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;770:53;;79:1212;;;:::i;:::-;;;;;;;;703:9;695:65;703:9;;:18;695:65;:::i;:::-;770:9;79:1212;;;;;770:53;;;;;;;79:1212;770:53;;793:10;770:53;;;79:1212;;;;;;;;;;;;;;;;;;;;;;;;770:53;;;;;;;;;;;;;;;;;79:1212;833:39;;;;;;79:1212;793:10;833:39;;;;;79:1212;;;833:39;;;;;770:53;;;;;;;;;;;;;:::i;:::-;;;;;;79:1212;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"318200","executionCost":"infinite","totalCost":"infinite"},"external":{"swapBNBToBUSD(uint256,uint256)":"infinite","swapBUSDToBNB(uint256,uint256)":"infinite","transferBNB()":"infinite","transferBUSD()":"infinite"}},"methodIdentifiers":{"swapBNBToBUSD(uint256,uint256)":"ab27021e","swapBUSDToBNB(uint256,uint256)":"20507ebb","transferBNB()":"eefd3d9a","transferBUSD()":"c4f90e1d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"busd\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBUSD\",\"type\":\"uint256\"}],\"name\":\"swapBNBToBUSD\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"}],\"name\":\"swapBUSDToBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferBUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/aa/Swapper.sol\":\"Swapper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/aa/BUSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract BUSD is ERC20 {\\n    constructor() ERC20(\\\"BUSD\\\", \\\"BUSD\\\") {\\n        _mint(msg.sender, 10 ** 26);\\n    }\\n}\\n\",\"keccak256\":\"0xbde6d7d04bd8a0b88ba5df05329077b06d5d73685d43f702e5b0609e38dbaf32\",\"license\":\"MIT\"},\"contracts/aa/Swapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BUSD.sol\\\";\\n\\ncontract Swapper {\\n    address owner;\\n    BUSD busdToken;\\n\\n    constructor(address busd) {\\n        owner = msg.sender;\\n        busdToken = BUSD(busd);\\n    }\\n\\n    // both inputs with 18\\n    function swapBNBToBUSD(\\n        uint256 amountBNB,\\n        uint256 amountBUSD\\n    ) public payable {\\n        require(tx.origin == owner, \\\"Swapper: Tx not initiated by owner\\\");\\n        require(msg.value == amountBNB, \\\"Invalid Transfer amount\\\");\\n        busdToken.transferFrom(owner, msg.sender, amountBUSD);\\n    }\\n\\n    function swapBUSDToBNB(\\n        uint256 amountBUSD,\\n        uint256 amountBNB\\n    ) public payable {\\n        require(tx.origin == owner, \\\"Swapper: Tx not initiated by owner\\\");\\n        busdToken.transferFrom(msg.sender, owner, amountBUSD);\\n        payable(msg.sender).transfer(amountBNB);\\n    }\\n\\n    function transferBNB() public {\\n        require(msg.sender == owner, \\\"Swapper: Sender not owner\\\");\\n        payable(owner).transfer(address(this).balance);\\n    }\\n\\n    function transferBUSD() public {\\n        require(msg.sender == owner, \\\"Swapper: Sender not owner\\\");\\n        uint256 bal = busdToken.balanceOf(address(this));\\n        busdToken.transfer(owner, bal);\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xbfa7dacbe42d31f85fc9a34569e3c91c7361334ccdf509c40215e72be6bde36c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4279,"contract":"contracts/aa/Swapper.sol:Swapper","label":"owner","offset":0,"slot":"0","type":"t_address"},{"astId":4282,"contract":"contracts/aa/Swapper.sol:Swapper","label":"busdToken","offset":0,"slot":"1","type":"t_contract(BUSD)4274"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_contract(BUSD)4274":{"encoding":"inplace","label":"contract BUSD","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/aa/utils/Base64.sol":{"Base64":{"abi":[],"devdoc":{"details":"Provides a set of functions to operate with Base64 strings.  modified for base64url https://datatracker.ietf.org/doc/html/rfc4648#section-5 _Available since v4.5._","kind":"dev","methods":{},"stateVariables":{"_TABLE":{"details":"Base64 Encoding/Decoding Table"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523460175760119081601d823930815050f35b600080fdfe600080fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x11 SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"369:3490:23:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"369:3490:23:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"3400","executionCost":"infinite","totalCost":"infinite"},"internal":{"encode(bytes memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides a set of functions to operate with Base64 strings.  modified for base64url https://datatracker.ietf.org/doc/html/rfc4648#section-5 _Available since v4.5._\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_TABLE\":{\"details\":\"Base64 Encoding/Decoding Table\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/aa/utils/Base64.sol\":\"Base64\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/aa/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n// modified for base64url encoding, does not pad with '='\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *  modified for base64url https://datatracker.ietf.org/doc/html/rfc4648#section-5\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE =\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        uint256 newlength = (data.length * 8) / 6;\\n        if (data.length % 6 > 0) {\\n            newlength++;\\n        }\\n        string memory result = new string(newlength);\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n            // let targetLength := add(resultPtr, newlength)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(\\n                    resultPtr,\\n                    mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                )\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                // if lt(resultPtr, targetLength) {\\n                mstore8(\\n                    resultPtr,\\n                    mload(add(tablePtr, and(shr(12, input), 0x3F)))\\n                )\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                // if lt(resultPtr, targetLength) {\\n                mstore8(\\n                    resultPtr,\\n                    mload(add(tablePtr, and(shr(6, input), 0x3F)))\\n                )\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                // if lt(resultPtr, targetLength) {\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n                // }\\n                // }\\n                // }\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xdae76c808cc5e424ff5e20688a02f913d6a5f834902e7329f0265fabf153a8fb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/aa/utils/Secp256r1.sol":{"Secp256r1":{"abi":[{"inputs":[],"name":"nn","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608080604052346100195760ec908161001f823930815050f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c90816372a4c30f14608957506391327ec614603457600080fd5b807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011260865760206040517fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8152f35b80fd5b9050817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011260db57807fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255160209252f35b5080fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x19 JUMPI PUSH1 0xEC SWAP1 DUP2 PUSH2 0x1F DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH1 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x72A4C30F EQ PUSH1 0x89 JUMPI POP PUSH4 0x91327EC6 EQ PUSH1 0x34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH1 0x86 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP2 MSTORE RETURN JUMPDEST DUP1 REVERT JUMPDEST SWAP1 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH1 0xDB JUMPI DUP1 PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551 PUSH1 0x20 SWAP3 MSTORE RETURN JUMPDEST POP DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"571:11123:24:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080806040526004361015601257600080fd5b600090813560e01c90816372a4c30f14608957506391327ec614603457600080fd5b807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011260865760206040517fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8152f35b80fd5b9050817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011260db57807fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255160209252f35b5080fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH1 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x72A4C30F EQ PUSH1 0x89 JUMPI POP PUSH4 0x91327EC6 EQ PUSH1 0x34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH1 0x86 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP2 MSTORE RETURN JUMPDEST DUP1 REVERT JUMPDEST SWAP1 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH1 0xDB JUMPI DUP1 PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551 PUSH1 0x20 SWAP3 MSTORE RETURN JUMPDEST POP DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"571:11123:24:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;836:66;571:11123;;;;;;;;;;;;;;;;;946:66;571:11123;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"47200","executionCost":"infinite","totalCost":"infinite"},"external":{"nn()":"143","pp()":"162"},"internal":{"ShamirMultJacobian(struct JPoint memory[16] memory,uint256,uint256)":"infinite","Verify(struct PassKeyId memory,uint256,uint256,uint256)":"infinite","VerifyWithPrecompute(struct JPoint memory[16] memory,uint256,uint256,uint256)":"infinite","_affineFromJacobian(uint256,uint256,uint256)":"infinite","_jAdd(uint256,uint256,uint256,uint256,uint256,uint256)":"infinite","_jPointAdd(struct JPoint memory,struct JPoint memory)":"infinite","_jPointDouble(struct JPoint memory)":"infinite","_modifiedJacobianDouble(uint256,uint256,uint256)":"infinite","_preComputeJacobianPoints(struct PassKeyId memory)":"infinite","_primemod(uint256,uint256)":"infinite","modexp(uint256,uint256,uint256)":"infinite"}},"methodIdentifiers":{"nn()":"72a4c30f","pp()":"91327ec6"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"nn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/aa/utils/Secp256r1.sol\":\"Secp256r1\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/aa/utils/Secp256r1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.19;\\n//\\n// Heavily inspired from\\n// https://github.com/maxrobot/elliptic-solidity/blob/master/contracts/Secp256r1.sol\\n// https://github.com/tdrerup/elliptic-curve-solidity/blob/master/contracts/curves/EllipticCurve.sol\\n// modified to use precompile 0x05 modexp\\n// and modified jacobian double\\n// optimisations to avoid to an from from affine and jacobian coordinates\\n//\\nstruct PassKeyId {\\n    uint256 pubKeyX;\\n    uint256 pubKeyY;\\n    string keyId;\\n}\\n\\nstruct JPoint {\\n    uint256 x;\\n    uint256 y;\\n    uint256 z;\\n}\\n\\nlibrary Secp256r1 {\\n    uint256 constant gx =\\n        0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296;\\n    uint256 constant gy =\\n        0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5;\\n    uint256 public constant pp =\\n        0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    uint256 public constant nn =\\n        0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551;\\n    uint256 constant a =\\n        0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC;\\n    uint256 constant b =\\n        0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B;\\n    uint256 constant MOST_SIGNIFICANT =\\n        0xc000000000000000000000000000000000000000000000000000000000000000;\\n\\n    /*\\n     * Verify\\n     * @description - verifies that a public key has signed a given message\\n     * @param X - public key coordinate X\\n     * @param Y - public key coordinate Y\\n     * @param R - signature half R\\n     * @param S - signature half S\\n     * @param input - hashed message\\n     */\\n    function Verify(\\n        PassKeyId memory passKey,\\n        uint r,\\n        uint s,\\n        uint e\\n    ) internal view returns (bool) {\\n        if (r == 0 || s == 0 || r >= nn || s >= nn) {\\n            /* testing null signature, otherwise (0,0) is valid for any message*/\\n            return false;\\n        }\\n\\n        JPoint[16] memory points = _preComputeJacobianPoints(passKey);\\n        return VerifyWithPrecompute(points, r, s, e);\\n    }\\n\\n    function VerifyWithPrecompute(\\n        JPoint[16] memory points,\\n        uint r,\\n        uint s,\\n        uint e\\n    ) internal view returns (bool) {\\n        if (r >= nn || s >= nn) {\\n            return false;\\n        }\\n\\n        uint w = _primemod(s, nn);\\n\\n        uint u1 = mulmod(e, w, nn);\\n        uint u2 = mulmod(r, w, nn);\\n\\n        uint x;\\n        uint y;\\n\\n        (x, y) = ShamirMultJacobian(points, u1, u2);\\n        return (x == r);\\n    }\\n\\n    /*\\n     * Strauss Shamir trick for EC multiplication\\n     * https://stackoverflow.com/questions/50993471/ec-scalar-multiplication-with-strauss-shamir-method\\n     * we optimise on this a bit to do with 2 bits at a time rather than a single bit\\n     * the individual points for a single pass are precomputed\\n     * overall this reduces the number of additions while keeping the same number of doublings\\n     */\\n    function ShamirMultJacobian(\\n        JPoint[16] memory points,\\n        uint u1,\\n        uint u2\\n    ) internal view returns (uint, uint) {\\n        uint x = 0;\\n        uint y = 0;\\n        uint z = 0;\\n        uint bits = 128;\\n        uint index = 0;\\n\\n        while (bits > 0) {\\n            if (z > 0) {\\n                (x, y, z) = _modifiedJacobianDouble(x, y, z);\\n                (x, y, z) = _modifiedJacobianDouble(x, y, z);\\n            }\\n            index =\\n                ((u1 & MOST_SIGNIFICANT) >> 252) |\\n                ((u2 & MOST_SIGNIFICANT) >> 254);\\n            if (index > 0) {\\n                (x, y, z) = _jAdd(\\n                    x,\\n                    y,\\n                    z,\\n                    points[index].x,\\n                    points[index].y,\\n                    points[index].z\\n                );\\n            }\\n            u1 <<= 2;\\n            u2 <<= 2;\\n            bits--;\\n        }\\n        (x, y) = _affineFromJacobian(x, y, z);\\n        return (x, y);\\n    }\\n\\n    function _preComputeJacobianPoints(\\n        PassKeyId memory passKey\\n    ) internal pure returns (JPoint[16] memory points) {\\n        // JPoint[] memory u1Points = new JPoint[](4);\\n        // u1Points[0] = JPoint(0, 0, 0);\\n        // u1Points[1] = JPoint(gx, gy, 1); // u1\\n        // u1Points[2] = _jPointDouble(u1Points[1]);\\n        // u1Points[3] = _jPointAdd(u1Points[1], u1Points[2]);\\n        // avoiding this intermediate step by using it in a single array below\\n        // these are pre computed points for u1\\n\\n        // JPoint[16] memory points;\\n        points[0] = JPoint(0, 0, 0);\\n        points[1] = JPoint(passKey.pubKeyX, passKey.pubKeyY, 1); // u2\\n        points[2] = _jPointDouble(points[1]);\\n        points[3] = _jPointAdd(points[1], points[2]);\\n\\n        points[4] = JPoint(gx, gy, 1); // u1Points[1]\\n        points[5] = _jPointAdd(points[4], points[1]);\\n        points[6] = _jPointAdd(points[4], points[2]);\\n        points[7] = _jPointAdd(points[4], points[3]);\\n\\n        points[8] = _jPointDouble(points[4]); // u1Points[2]\\n        points[9] = _jPointAdd(points[8], points[1]);\\n        points[10] = _jPointAdd(points[8], points[2]);\\n        points[11] = _jPointAdd(points[8], points[3]);\\n\\n        points[12] = _jPointAdd(points[4], points[8]); // u1Points[3]\\n        points[13] = _jPointAdd(points[12], points[1]);\\n        points[14] = _jPointAdd(points[12], points[2]);\\n        points[15] = _jPointAdd(points[12], points[3]);\\n    }\\n\\n    function _jPointAdd(\\n        JPoint memory p1,\\n        JPoint memory p2\\n    ) internal pure returns (JPoint memory) {\\n        uint x;\\n        uint y;\\n        uint z;\\n        (x, y, z) = _jAdd(p1.x, p1.y, p1.z, p2.x, p2.y, p2.z);\\n        return JPoint(x, y, z);\\n    }\\n\\n    function _jPointDouble(\\n        JPoint memory p\\n    ) internal pure returns (JPoint memory) {\\n        uint x;\\n        uint y;\\n        uint z;\\n        (x, y, z) = _modifiedJacobianDouble(p.x, p.y, p.z);\\n        return JPoint(x, y, z);\\n    }\\n\\n    /* _affineFromJacobian\\n     * @desription returns affine coordinates from a jacobian input follows\\n     * golang elliptic/crypto library\\n     */\\n    function _affineFromJacobian(\\n        uint x,\\n        uint y,\\n        uint z\\n    ) internal view returns (uint ax, uint ay) {\\n        if (z == 0) {\\n            return (0, 0);\\n        }\\n\\n        uint zinv = _primemod(z, pp);\\n        uint zinvsq = mulmod(zinv, zinv, pp);\\n\\n        ax = mulmod(x, zinvsq, pp);\\n        ay = mulmod(y, mulmod(zinvsq, zinv, pp), pp);\\n    }\\n\\n    /*\\n     * _jAdd\\n     * @description performs double Jacobian as defined below:\\n     * https://hyperelliptic.org/EFD/g1p/auto-code/shortw/jacobian-3/doubling/mdbl-2007-bl.op3\\n     */\\n    function _jAdd(\\n        uint p1,\\n        uint p2,\\n        uint p3,\\n        uint q1,\\n        uint q2,\\n        uint q3\\n    ) internal pure returns (uint r1, uint r2, uint r3) {\\n        if (p3 == 0) {\\n            r1 = q1;\\n            r2 = q2;\\n            r3 = q3;\\n\\n            return (r1, r2, r3);\\n        } else if (q3 == 0) {\\n            r1 = p1;\\n            r2 = p2;\\n            r3 = p3;\\n\\n            return (r1, r2, r3);\\n        }\\n\\n        assembly {\\n            let\\n                pd\\n            := 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF\\n            let z1z1 := mulmod(p3, p3, pd) // Z1Z1 = Z1^2\\n            let z2z2 := mulmod(q3, q3, pd) // Z2Z2 = Z2^2\\n\\n            let u1 := mulmod(p1, z2z2, pd) // U1 = X1*Z2Z2\\n            let u2 := mulmod(q1, z1z1, pd) // U2 = X2*Z1Z1\\n\\n            let s1 := mulmod(p2, mulmod(z2z2, q3, pd), pd) // S1 = Y1*Z2*Z2Z2\\n            let s2 := mulmod(q2, mulmod(z1z1, p3, pd), pd) // S2 = Y2*Z1*Z1Z1\\n\\n            let p3q3 := addmod(p3, q3, pd)\\n\\n            if lt(u2, u1) {\\n                u2 := add(pd, u2) // u2 = u2+pd\\n            }\\n            let h := sub(u2, u1) // H = U2-U1\\n\\n            let i := mulmod(0x02, h, pd)\\n            i := mulmod(i, i, pd) // I = (2*H)^2\\n\\n            let j := mulmod(h, i, pd) // J = H*I\\n            if lt(s2, s1) {\\n                s2 := add(pd, s2) // u2 = u2+pd\\n            }\\n            let rr := mulmod(0x02, sub(s2, s1), pd) // r = 2*(S2-S1)\\n            r1 := mulmod(rr, rr, pd) // X3 = R^2\\n\\n            let v := mulmod(u1, i, pd) // V = U1*I\\n            let j2v := addmod(j, mulmod(0x02, v, pd), pd)\\n            if lt(r1, j2v) {\\n                r1 := add(pd, r1) // X3 = X3+pd\\n            }\\n            r1 := sub(r1, j2v)\\n\\n            // Y3 = r*(V-X3)-2*S1*J\\n            let s12j := mulmod(mulmod(0x02, s1, pd), j, pd)\\n\\n            if lt(v, r1) {\\n                v := add(pd, v)\\n            }\\n            r2 := mulmod(rr, sub(v, r1), pd)\\n\\n            if lt(r2, s12j) {\\n                r2 := add(pd, r2)\\n            }\\n            r2 := sub(r2, s12j)\\n\\n            // Z3 = ((Z1+Z2)^2-Z1Z1-Z2Z2)*H\\n            z1z1 := addmod(z1z1, z2z2, pd)\\n            j2v := mulmod(p3q3, p3q3, pd)\\n            if lt(j2v, z1z1) {\\n                j2v := add(pd, j2v)\\n            }\\n            r3 := mulmod(sub(j2v, z1z1), h, pd)\\n        }\\n        return (r1, r2, r3);\\n    }\\n\\n    // Point doubling on the modified jacobian coordinates\\n    // http://point-at-infinity.org/ecc/Prime_Curve_Modified_Jacobian_Coordinates.html\\n    function _modifiedJacobianDouble(\\n        uint x,\\n        uint y,\\n        uint z\\n    ) internal pure returns (uint x3, uint y3, uint z3) {\\n        assembly {\\n            let\\n                pd\\n            := 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF\\n            let z2 := mulmod(z, z, pd)\\n            let az4 := mulmod(\\n                0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC,\\n                mulmod(z2, z2, pd),\\n                pd\\n            )\\n            let y2 := mulmod(y, y, pd)\\n            let s := mulmod(0x04, mulmod(x, y2, pd), pd)\\n            let u := mulmod(0x08, mulmod(y2, y2, pd), pd)\\n            let m := addmod(mulmod(0x03, mulmod(x, x, pd), pd), az4, pd)\\n            let twos := mulmod(0x02, s, pd)\\n            let m2 := mulmod(m, m, pd)\\n            if lt(m2, twos) {\\n                m2 := add(pd, m2)\\n            }\\n            x3 := sub(m2, twos)\\n            if lt(s, x3) {\\n                s := add(pd, s)\\n            }\\n            y3 := mulmod(m, sub(s, x3), pd)\\n            if lt(y3, u) {\\n                y3 := add(pd, y3)\\n            }\\n            y3 := sub(y3, u)\\n            z3 := mulmod(0x02, mulmod(y, z, pd), pd)\\n        }\\n    }\\n\\n    // Fermats little theorem https://en.wikipedia.org/wiki/Fermat%27s_little_theorem\\n    // a^(p-1) = 1 mod p\\n    // a^(-1) \\u2245 a^(p-2) (mod p)\\n    // we then use the precompile bigModExp to compute a^(-1)\\n    function _primemod(uint value, uint p) internal view returns (uint ret) {\\n        ret = modexp(value, p - 2, p);\\n        return ret;\\n    }\\n\\n    // Wrapper for built-in BigNumber_modexp (contract 0x5) as described here. https://github.com/ethereum/EIPs/pull/198\\n    function modexp(\\n        uint _base,\\n        uint _exp,\\n        uint _mod\\n    ) internal view returns (uint ret) {\\n        // bigModExp(_base, _exp, _mod);\\n        assembly {\\n            if gt(_base, _mod) {\\n                _base := mod(_base, _mod)\\n            }\\n            // Free memory pointer is always stored at 0x40\\n            let freemem := mload(0x40)\\n\\n            mstore(freemem, 0x20)\\n            mstore(add(freemem, 0x20), 0x20)\\n            mstore(add(freemem, 0x40), 0x20)\\n\\n            mstore(add(freemem, 0x60), _base)\\n            mstore(add(freemem, 0x80), _exp)\\n            mstore(add(freemem, 0xa0), _mod)\\n\\n            let success := staticcall(not(0), 0x5, freemem, 0xc0, freemem, 0x20)\\n            switch success\\n            case 0 {\\n                revert(0x0, 0x0)\\n            }\\n            default {\\n                ret := mload(freemem)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd43f80b0a6bc9d21430e1f2a485960a59266972545d9f15c72fc21daebebaf42\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/aa/utils/UserOp.sol":{"UserOpLib":{"abi":[{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"calldataKeccak","outputs":[{"internalType":"bytes32","name":"ret","type":"bytes32"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{"calldataKeccak(bytes)":{"details":"copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608080604052346100195760b5908161001f823930815050f35b600080fdfe60806040526004361015601157600080fd5b6000803560e01c631d43458514602657600080fd5b60207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011260a5576004359067ffffffffffffffff9081831160a5573660238401121560a557826004013591821160a557366024838501011160a5575080602460a193016080376080206040519081529081906020820190565b0390f35b80fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x19 JUMPI PUSH1 0xB5 SWAP1 DUP2 PUSH2 0x1F DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH1 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR PUSH4 0x1D434585 EQ PUSH1 0x26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH1 0xA5 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 DUP2 DUP4 GT PUSH1 0xA5 JUMPI CALLDATASIZE PUSH1 0x23 DUP5 ADD SLT ISZERO PUSH1 0xA5 JUMPI DUP3 PUSH1 0x4 ADD CALLDATALOAD SWAP2 DUP3 GT PUSH1 0xA5 JUMPI CALLDATASIZE PUSH1 0x24 DUP4 DUP6 ADD ADD GT PUSH1 0xA5 JUMPI POP DUP1 PUSH1 0x24 PUSH1 0xA1 SWAP4 ADD PUSH1 0x80 CALLDATACOPY PUSH1 0x80 KECCAK256 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"210:1178:25:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"abi_encode_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"60806040526004361015601157600080fd5b6000803560e01c631d43458514602657600080fd5b60207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011260a5576004359067ffffffffffffffff9081831160a5573660238401121560a557826004013591821160a557366024838501011160a5575080602460a193016080376080206040519081529081906020820190565b0390f35b80fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH1 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR PUSH4 0x1D434585 EQ PUSH1 0x26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH1 0xA5 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 DUP2 DUP4 GT PUSH1 0xA5 JUMPI CALLDATASIZE PUSH1 0x23 DUP5 ADD SLT ISZERO PUSH1 0xA5 JUMPI DUP3 PUSH1 0x4 ADD CALLDATALOAD SWAP2 DUP3 GT PUSH1 0xA5 JUMPI CALLDATASIZE PUSH1 0x24 DUP4 DUP6 ADD ADD GT PUSH1 0xA5 JUMPI POP DUP1 PUSH1 0x24 PUSH1 0xA1 SWAP4 ADD PUSH1 0x80 CALLDATACOPY PUSH1 0x80 KECCAK256 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"210:1178:25:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1203:177;210:1178;1203:177;210:1178;;;;;;;;;;;;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"36200","executionCost":"infinite","totalCost":"infinite"},"external":{"calldataKeccak(bytes)":"infinite"},"internal":{"hash(struct UserOp calldata)":"infinite","pack(struct UserOp calldata)":"infinite"}},"methodIdentifiers":{"calldataKeccak(bytes)":"1d434585"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"calldataKeccak\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"ret\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calldataKeccak(bytes)\":{\"details\":\"copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calldataKeccak(bytes)\":{\"notice\":\"keccak function over calldata.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/aa/utils/UserOp.sol\":\"UserOpLib\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/aa/utils/UserOp.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.19;\\n// call type\\n// 00 -> single\\n// 01 -> batch\\n\\nstruct UserOp {\\n    uint256 functionType;\\n    bytes argument;\\n    uint256 nonce;\\n    bytes signature;\\n}\\n\\nlibrary UserOpLib {\\n    /**\\n     * Pack the user operation data into bytes for hashing.\\n     * @param userop - The user operation data.\\n     */\\n    function pack(\\n        UserOp calldata userop\\n    ) internal pure returns (bytes memory ret) {\\n        uint256 functionType = userop.functionType;\\n        bytes32 hashArguments = calldataKeccak(userop.argument);\\n        uint256 nonce = userop.nonce;\\n\\n        return abi.encode(functionType, hashArguments, nonce);\\n    }\\n\\n    /**\\n     * Hash the user operation data.\\n     * @param userop - The user operation data.\\n     */\\n    function hash(UserOp calldata userop) internal pure returns (bytes32) {\\n        return keccak256(pack(userop));\\n    }\\n\\n    /**\\n     * keccak function over calldata.\\n     * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n     */\\n    function calldataKeccak(\\n        bytes calldata data\\n    ) public pure returns (bytes32 ret) {\\n        assembly {\\n            let mem := mload(0x40)\\n            let len := data.length\\n            calldatacopy(mem, data.offset, len)\\n            ret := keccak256(mem, len)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe9d67905db0bceb2036a23b41879fc6bc6fb6476262b52e2b80c5aa67621038b\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"calldataKeccak(bytes)":{"notice":"keccak function over calldata."}},"version":1}}}}}}